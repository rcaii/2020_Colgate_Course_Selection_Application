import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class RangeComponent implements OnInit, ControlValueAccessor {
    private _elf;
    prefixCls: string;
    offset: any[];
    length: any[];
    upperBound: number;
    lowerBound: number;
    maxBound: number[];
    minBound: number[];
    sliderCls: object;
    sliderLength: number;
    sliderStart: number;
    private _min;
    private _max;
    private _step;
    private _value;
    private _defaultValue;
    private _disabled;
    private _marks;
    private _dots;
    private _included;
    private _count;
    private _allowCross;
    private _pushable;
    private _handleStyle;
    private _trackStyle;
    private _railStyle;
    private _handleCount;
    get min(): number;
    set min(value: number);
    get max(): number;
    set max(value: number);
    get step(): number;
    set step(value: number);
    get value(): [number];
    set value(value: [number]);
    set defaultValue(value: any);
    get disabled(): boolean;
    set disabled(value: boolean);
    get marks(): object;
    set marks(value: object);
    get dots(): boolean;
    set dots(value: boolean);
    get included(): boolean;
    set included(value: boolean);
    set count(value: number);
    set allowCross(value: boolean);
    set pushable(value: number);
    get handleStyle(): any[];
    set handleStyle(value: any[]);
    get trackStyle(): any[];
    set trackStyle(value: any[]);
    get railStyle(): any[];
    set railStyle(value: any[]);
    onChange: EventEmitter<any>;
    onAfterChange: EventEmitter<any>;
    amWrapper: boolean;
    private _ngModelOnChange;
    private _ngModelOnTouched;
    constructor(_elf: ElementRef);
    setCls(): void;
    initialValue(): void;
    handleChange(e: any, i: any): void;
    handleAfterChange(e: any, i: any): void;
    setTrackStyle(value: any): void;
    setValueBound(): void;
    verifyPushable(): boolean;
    writeValue(value: number[]): void;
    setValue(value: number[], isWriteValue?: boolean): void;
    registerOnChange(fn: (value: number[]) => void): void;
    registerOnTouched(fn: (value: number) => void): void;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RangeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RangeComponent, "Range , nzm-range", never, { "min": "min"; "max": "max"; "step": "step"; "value": "value"; "defaultValue": "defaultValue"; "disabled": "disabled"; "marks": "marks"; "dots": "dots"; "included": "included"; "count": "count"; "allowCross": "allowCross"; "pushable": "pushable"; "handleStyle": "handleStyle"; "trackStyle": "trackStyle"; "railStyle": "railStyle"; }, { "onChange": "onChange"; "onAfterChange": "onAfterChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhbmdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJhbmdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBfZWxmO1xuICAgIHByZWZpeENsczogc3RyaW5nO1xuICAgIG9mZnNldDogYW55W107XG4gICAgbGVuZ3RoOiBhbnlbXTtcbiAgICB1cHBlckJvdW5kOiBudW1iZXI7XG4gICAgbG93ZXJCb3VuZDogbnVtYmVyO1xuICAgIG1heEJvdW5kOiBudW1iZXJbXTtcbiAgICBtaW5Cb3VuZDogbnVtYmVyW107XG4gICAgc2xpZGVyQ2xzOiBvYmplY3Q7XG4gICAgc2xpZGVyTGVuZ3RoOiBudW1iZXI7XG4gICAgc2xpZGVyU3RhcnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9taW47XG4gICAgcHJpdmF0ZSBfbWF4O1xuICAgIHByaXZhdGUgX3N0ZXA7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdFZhbHVlO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIHByaXZhdGUgX21hcmtzO1xuICAgIHByaXZhdGUgX2RvdHM7XG4gICAgcHJpdmF0ZSBfaW5jbHVkZWQ7XG4gICAgcHJpdmF0ZSBfY291bnQ7XG4gICAgcHJpdmF0ZSBfYWxsb3dDcm9zcztcbiAgICBwcml2YXRlIF9wdXNoYWJsZTtcbiAgICBwcml2YXRlIF9oYW5kbGVTdHlsZTtcbiAgICBwcml2YXRlIF90cmFja1N0eWxlO1xuICAgIHByaXZhdGUgX3JhaWxTdHlsZTtcbiAgICBwcml2YXRlIF9oYW5kbGVDb3VudDtcbiAgICBnZXQgbWluKCk6IG51bWJlcjtcbiAgICBzZXQgbWluKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBtYXgoKTogbnVtYmVyO1xuICAgIHNldCBtYXgodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHN0ZXAoKTogbnVtYmVyO1xuICAgIHNldCBzdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCB2YWx1ZSgpOiBbbnVtYmVyXTtcbiAgICBzZXQgdmFsdWUodmFsdWU6IFtudW1iZXJdKTtcbiAgICBzZXQgZGVmYXVsdFZhbHVlKHZhbHVlOiBhbnkpO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IG1hcmtzKCk6IG9iamVjdDtcbiAgICBzZXQgbWFya3ModmFsdWU6IG9iamVjdCk7XG4gICAgZ2V0IGRvdHMoKTogYm9vbGVhbjtcbiAgICBzZXQgZG90cyh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGluY2x1ZGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGluY2x1ZGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBzZXQgY291bnQodmFsdWU6IG51bWJlcik7XG4gICAgc2V0IGFsbG93Q3Jvc3ModmFsdWU6IGJvb2xlYW4pO1xuICAgIHNldCBwdXNoYWJsZSh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgaGFuZGxlU3R5bGUoKTogYW55W107XG4gICAgc2V0IGhhbmRsZVN0eWxlKHZhbHVlOiBhbnlbXSk7XG4gICAgZ2V0IHRyYWNrU3R5bGUoKTogYW55W107XG4gICAgc2V0IHRyYWNrU3R5bGUodmFsdWU6IGFueVtdKTtcbiAgICBnZXQgcmFpbFN0eWxlKCk6IGFueVtdO1xuICAgIHNldCByYWlsU3R5bGUodmFsdWU6IGFueVtdKTtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25BZnRlckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYW1XcmFwcGVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgX25nTW9kZWxPbkNoYW5nZTtcbiAgICBwcml2YXRlIF9uZ01vZGVsT25Ub3VjaGVkO1xuICAgIGNvbnN0cnVjdG9yKF9lbGY6IEVsZW1lbnRSZWYpO1xuICAgIHNldENscygpOiB2b2lkO1xuICAgIGluaXRpYWxWYWx1ZSgpOiB2b2lkO1xuICAgIGhhbmRsZUNoYW5nZShlOiBhbnksIGk6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQWZ0ZXJDaGFuZ2UoZTogYW55LCBpOiBhbnkpOiB2b2lkO1xuICAgIHNldFRyYWNrU3R5bGUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgc2V0VmFsdWVCb3VuZCgpOiB2b2lkO1xuICAgIHZlcmlmeVB1c2hhYmxlKCk6IGJvb2xlYW47XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyW10pOiB2b2lkO1xuICAgIHNldFZhbHVlKHZhbHVlOiBudW1iZXJbXSwgaXNXcml0ZVZhbHVlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBudW1iZXJbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuIl19