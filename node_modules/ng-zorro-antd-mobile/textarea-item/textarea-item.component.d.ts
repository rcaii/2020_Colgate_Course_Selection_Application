import { OnInit, EventEmitter, TemplateRef, AfterContentChecked, ElementRef, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class TextareaItemComponent implements OnInit, AfterContentChecked, ControlValueAccessor {
    private element;
    private render;
    prefixCls: string;
    wrapCls: object;
    labelCls: object;
    controlCls: object;
    clearCls: object;
    hasCount: boolean;
    characterLength: number;
    isTitleString: boolean;
    maxLength: number;
    private _el;
    private _prefixListCls;
    private _value;
    private _defaultValue;
    private _placeholder;
    private _editable;
    private _disabled;
    private _clear;
    private _rows;
    private _count;
    private _autoHeight;
    private _error;
    private _labelNumber;
    private _name;
    private _title;
    private _focus;
    private _autoFocus;
    private _isClear;
    private _isClickingClear;
    textRef: any;
    get value(): string;
    set value(v: string);
    get defaultValue(): string;
    set defaultValue(value: string);
    get placeholder(): string;
    set placeholder(value: string);
    get editable(): boolean;
    set editable(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    get clear(): boolean;
    set clear(value: boolean);
    get rows(): number;
    set rows(value: number);
    get error(): boolean;
    set error(value: boolean);
    set labelNumber(value: number);
    get count(): number;
    set count(value: number);
    get prefixListCls(): string;
    set prefixListCls(value: string);
    set name(value: string);
    set autoHeight(value: boolean);
    get title(): string | TemplateRef<any>;
    set title(value: string | TemplateRef<any>);
    set focus(value: any);
    get autoFocus(): boolean;
    set autoFocus(value: boolean);
    onChange: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onErrorClick: EventEmitter<any>;
    clsItem: boolean;
    clsDisabled: boolean;
    clsError: boolean;
    clsFocus: boolean;
    clsSingleLine: boolean;
    clsHasCount: boolean;
    constructor(element: ElementRef, render: Renderer2);
    _onChange: (_: any) => void;
    setCls(): void;
    setCharacterLength(): void;
    inputChange(e: any): void;
    inputFocus(value: any): void;
    inputBlur(value: any, event: any): void;
    clearInput(): void;
    errorClick(e: any): void;
    reAlignHeight(): void;
    countSymbols(text?: string): number;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterContentChecked(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextareaItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TextareaItemComponent, "TextareaItem , nzm-textarea-item", never, { "value": "value"; "defaultValue": "defaultValue"; "placeholder": "placeholder"; "editable": "editable"; "disabled": "disabled"; "clear": "clear"; "rows": "rows"; "error": "error"; "labelNumber": "labelNumber"; "count": "count"; "prefixListCls": "prefixListCls"; "name": "name"; "autoHeight": "autoHeight"; "title": "title"; "focus": "focus"; "autoFocus": "autoFocus"; }, { "onChange": "onChange"; "onBlur": "onBlur"; "onFocus": "onFocus"; "onErrorClick": "onErrorClick"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEtaXRlbS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGV4dGFyZWEtaXRlbS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBBZnRlckNvbnRlbnRDaGVja2VkLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGV4dGFyZWFJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRDaGVja2VkLCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyO1xuICAgIHByZWZpeENsczogc3RyaW5nO1xuICAgIHdyYXBDbHM6IG9iamVjdDtcbiAgICBsYWJlbENsczogb2JqZWN0O1xuICAgIGNvbnRyb2xDbHM6IG9iamVjdDtcbiAgICBjbGVhckNsczogb2JqZWN0O1xuICAgIGhhc0NvdW50OiBib29sZWFuO1xuICAgIGNoYXJhY3Rlckxlbmd0aDogbnVtYmVyO1xuICAgIGlzVGl0bGVTdHJpbmc6IGJvb2xlYW47XG4gICAgbWF4TGVuZ3RoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfcHJlZml4TGlzdENscztcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBwcml2YXRlIF9kZWZhdWx0VmFsdWU7XG4gICAgcHJpdmF0ZSBfcGxhY2Vob2xkZXI7XG4gICAgcHJpdmF0ZSBfZWRpdGFibGU7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfY2xlYXI7XG4gICAgcHJpdmF0ZSBfcm93cztcbiAgICBwcml2YXRlIF9jb3VudDtcbiAgICBwcml2YXRlIF9hdXRvSGVpZ2h0O1xuICAgIHByaXZhdGUgX2Vycm9yO1xuICAgIHByaXZhdGUgX2xhYmVsTnVtYmVyO1xuICAgIHByaXZhdGUgX25hbWU7XG4gICAgcHJpdmF0ZSBfdGl0bGU7XG4gICAgcHJpdmF0ZSBfZm9jdXM7XG4gICAgcHJpdmF0ZSBfYXV0b0ZvY3VzO1xuICAgIHByaXZhdGUgX2lzQ2xlYXI7XG4gICAgcHJpdmF0ZSBfaXNDbGlja2luZ0NsZWFyO1xuICAgIHRleHRSZWY6IGFueTtcbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nO1xuICAgIHNldCB2YWx1ZSh2OiBzdHJpbmcpO1xuICAgIGdldCBkZWZhdWx0VmFsdWUoKTogc3RyaW5nO1xuICAgIHNldCBkZWZhdWx0VmFsdWUodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZztcbiAgICBzZXQgcGxhY2Vob2xkZXIodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGVkaXRhYmxlKCk6IGJvb2xlYW47XG4gICAgc2V0IGVkaXRhYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBjbGVhcigpOiBib29sZWFuO1xuICAgIHNldCBjbGVhcih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHJvd3MoKTogbnVtYmVyO1xuICAgIHNldCByb3dzKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBlcnJvcigpOiBib29sZWFuO1xuICAgIHNldCBlcnJvcih2YWx1ZTogYm9vbGVhbik7XG4gICAgc2V0IGxhYmVsTnVtYmVyKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBjb3VudCgpOiBudW1iZXI7XG4gICAgc2V0IGNvdW50KHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBwcmVmaXhMaXN0Q2xzKCk6IHN0cmluZztcbiAgICBzZXQgcHJlZml4TGlzdENscyh2YWx1ZTogc3RyaW5nKTtcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKTtcbiAgICBzZXQgYXV0b0hlaWdodCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2V0IHRpdGxlKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KTtcbiAgICBzZXQgZm9jdXModmFsdWU6IGFueSk7XG4gICAgZ2V0IGF1dG9Gb2N1cygpOiBib29sZWFuO1xuICAgIHNldCBhdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pO1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXJyb3JDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2xzSXRlbTogYm9vbGVhbjtcbiAgICBjbHNEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBjbHNFcnJvcjogYm9vbGVhbjtcbiAgICBjbHNGb2N1czogYm9vbGVhbjtcbiAgICBjbHNTaW5nbGVMaW5lOiBib29sZWFuO1xuICAgIGNsc0hhc0NvdW50OiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcjogUmVuZGVyZXIyKTtcbiAgICBfb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgc2V0Q2xzKCk6IHZvaWQ7XG4gICAgc2V0Q2hhcmFjdGVyTGVuZ3RoKCk6IHZvaWQ7XG4gICAgaW5wdXRDaGFuZ2UoZTogYW55KTogdm9pZDtcbiAgICBpbnB1dEZvY3VzKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIGlucHV0Qmx1cih2YWx1ZTogYW55LCBldmVudDogYW55KTogdm9pZDtcbiAgICBjbGVhcklucHV0KCk6IHZvaWQ7XG4gICAgZXJyb3JDbGljayhlOiBhbnkpOiB2b2lkO1xuICAgIHJlQWxpZ25IZWlnaHQoKTogdm9pZDtcbiAgICBjb3VudFN5bWJvbHModGV4dD86IHN0cmluZyk6IG51bWJlcjtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG59XG4iXX0=