import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, TemplateRef, NgZone } from '@angular/core';
var ToastComponent = /** @class */ (function () {
    function ToastComponent(_zone) {
        this._zone = _zone;
        this.prefixCls = 'am-toast';
        this.isContentString = true;
        this.transitionName = 'am-fade-enter am-fade-enter-active';
        this._iconType = '';
        this._content = '';
        this.mask = true;
        this.position = 'middle';
    }
    Object.defineProperty(ToastComponent.prototype, "content", {
        get: function () {
            return this._content;
        },
        set: function (value) {
            var _this = this;
            if (value instanceof TemplateRef) {
                this.isContentString = false;
            }
            else {
                this.isContentString = true;
            }
            this._zone.run(function () {
                _this._content = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToastComponent.prototype, "iconType", {
        get: function () {
            return this._iconType;
        },
        set: function (value) {
            var _this = this;
            this._zone.run(function () {
                _this._iconType = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    ToastComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ToastComponent.prototype, "mask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ToastComponent.prototype, "content", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ToastComponent.prototype, "iconType", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ToastComponent.prototype, "position", void 0);
    ToastComponent = __decorate([
        Component({
            selector: 'Toast',
            encapsulation: ViewEncapsulation.None,
            template: "<div class=\"{{ prefixCls }}-notice {{ prefixCls }}-notice-closable {{ transitionName }}\">\n  <div class=\"{{ prefixCls }}-notice-content\">\n    <div role=\"alert\" *ngIf=\"iconType\" class=\"{{ prefixCls }}-text {{ prefixCls }}-text-icon\" aria-live=\"assertive\">\n      <Icon [type]=\"iconType\" [size]=\"'lg'\"></Icon>\n      <div *ngIf=\"isContentString\" class=\"{{ prefixCls }}-text-info\">{{ content }}</div>\n    </div>\n    <div *ngIf=\"!iconType\" class=\"{{ prefixCls }}-text\" role=\"alert\" aria-live=\"assertive\">\n      <div *ngIf=\"isContentString\" class=\"{{ prefixCls }}-text-info\">{{ content }}</div>\n      <ng-template *ngIf=\"!isContentString\" [ngTemplateOutlet]=\"content\"></ng-template>\n    </div>\n  </div>\n  <a class=\"{{ prefixCls }}-notice-close\">\n    <span class=\"{{ prefixCls }}-notice-close-x\"></span>\n  </a>\n</div>\n",
            host: {
                '[class.am-toast]': 'true',
                '[class.am-toast-mask]': 'mask',
                '[class.am-toast-mask-top]': "mask && position === 'top'",
                '[class.am-toast-mask-middle]': "mask && position === 'middle'",
                '[class.am-toast-mask-bottom]': "mask && position === 'bottom'",
                '[class.am-toast-nomask]': '!mask',
                '[class.am-toast-nomask-top]': "!mask && position === 'top'",
                '[class.am-toast-nomask-middle]': "!mask && position === 'middle'",
                '[class.am-toast-nomask-bottom]': "!mask && position === 'bottom'"
            }
        }),
        __metadata("design:paramtypes", [NgZone])
    ], ToastComponent);
    return ToastComponent;
}());
export { ToastComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJ0b2FzdC90b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFrQnpGO0lBcUNFLHdCQUFvQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQXBDakMsY0FBUyxHQUFXLFVBQVUsQ0FBQztRQUMvQixvQkFBZSxHQUFZLElBQUksQ0FBQztRQUVoQyxtQkFBYyxHQUFHLG9DQUFvQyxDQUFDO1FBRTlDLGNBQVMsR0FBVyxFQUFFLENBQUM7UUFDdkIsYUFBUSxHQUE4QixFQUFFLENBQUM7UUFHakQsU0FBSSxHQUFZLElBQUksQ0FBQztRQXlCckIsYUFBUSxHQUFXLFFBQVEsQ0FBQztJQUVRLENBQUM7SUF6QnJDLHNCQUFJLG1DQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQzthQUNELFVBQVksS0FBZ0M7WUFBNUMsaUJBU0M7WUFSQyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2FBQzdCO1lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBQ2IsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDOzs7T0FWQTtJQVlELHNCQUFJLG9DQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzthQUNELFVBQWEsS0FBYTtZQUExQixpQkFJQztZQUhDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2dCQUNiLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQzs7O09BTEE7O2dCQVMwQixNQUFNOztJQTNCakM7UUFEQyxLQUFLLEVBQUU7O2dEQUNhO0lBRXJCO1FBREMsS0FBSyxFQUFFOzs7aURBR1A7SUFZRDtRQURDLEtBQUssRUFBRTs7O2tEQUdQO0lBT0Q7UUFEQyxLQUFLLEVBQUU7O29EQUNvQjtJQW5DakIsY0FBYztRQWhCMUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLE9BQU87WUFDakIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDckMsNDJCQUFxQztZQUNyQyxJQUFJLEVBQUU7Z0JBQ0osa0JBQWtCLEVBQUUsTUFBTTtnQkFDMUIsdUJBQXVCLEVBQUUsTUFBTTtnQkFDL0IsMkJBQTJCLEVBQUUsNEJBQTRCO2dCQUN6RCw4QkFBOEIsRUFBRSwrQkFBK0I7Z0JBQy9ELDhCQUE4QixFQUFFLCtCQUErQjtnQkFDL0QseUJBQXlCLEVBQUUsT0FBTztnQkFDbEMsNkJBQTZCLEVBQUUsNkJBQTZCO2dCQUM1RCxnQ0FBZ0MsRUFBRSxnQ0FBZ0M7Z0JBQ2xFLGdDQUFnQyxFQUFFLGdDQUFnQzthQUNuRTtTQUNGLENBQUM7eUNBc0MyQixNQUFNO09BckN0QixjQUFjLENBc0MxQjtJQUFELHFCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBUZW1wbGF0ZVJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1RvYXN0JyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgdGVtcGxhdGVVcmw6ICcuL3RvYXN0LmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuYW0tdG9hc3RdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuYW0tdG9hc3QtbWFza10nOiAnbWFzaycsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1tYXNrLXRvcF0nOiBgbWFzayAmJiBwb3NpdGlvbiA9PT0gJ3RvcCdgLFxuICAgICdbY2xhc3MuYW0tdG9hc3QtbWFzay1taWRkbGVdJzogYG1hc2sgJiYgcG9zaXRpb24gPT09ICdtaWRkbGUnYCxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW1hc2stYm90dG9tXSc6IGBtYXNrICYmIHBvc2l0aW9uID09PSAnYm90dG9tJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1ub21hc2tdJzogJyFtYXNrJyxcbiAgICAnW2NsYXNzLmFtLXRvYXN0LW5vbWFzay10b3BdJzogYCFtYXNrICYmIHBvc2l0aW9uID09PSAndG9wJ2AsXG4gICAgJ1tjbGFzcy5hbS10b2FzdC1ub21hc2stbWlkZGxlXSc6IGAhbWFzayAmJiBwb3NpdGlvbiA9PT0gJ21pZGRsZSdgLFxuICAgICdbY2xhc3MuYW0tdG9hc3Qtbm9tYXNrLWJvdHRvbV0nOiBgIW1hc2sgJiYgcG9zaXRpb24gPT09ICdib3R0b20nYFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Q29tcG9uZW50IHtcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSAnYW0tdG9hc3QnO1xuICBpc0NvbnRlbnRTdHJpbmc6IGJvb2xlYW4gPSB0cnVlO1xuICBtYXNrQ2xhc3NNYXA7XG4gIHRyYW5zaXRpb25OYW1lID0gJ2FtLWZhZGUtZW50ZXIgYW0tZmFkZS1lbnRlci1hY3RpdmUnO1xuXG4gIHByaXZhdGUgX2ljb25UeXBlOiBzdHJpbmcgPSAnJztcbiAgcHJpdmF0ZSBfY29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIG1hc2s6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKVxuICBnZXQgY29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgfVxuICBzZXQgY29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLmlzQ29udGVudFN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzQ29udGVudFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBASW5wdXQoKVxuICBnZXQgaWNvblR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWNvblR5cGU7XG4gIH1cbiAgc2V0IGljb25UeXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLl9pY29uVHlwZSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIEBJbnB1dCgpXG4gIHBvc2l0aW9uOiBzdHJpbmcgPSAnbWlkZGxlJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF96b25lOiBOZ1pvbmUpIHt9XG59XG4iXX0=