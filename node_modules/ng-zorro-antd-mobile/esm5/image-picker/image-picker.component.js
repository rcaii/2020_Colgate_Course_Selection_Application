import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild, ViewContainerRef } from '@angular/core';
var ImagePickerComponent = /** @class */ (function () {
    function ImagePickerComponent() {
        this.prefixCls = 'am-image-picker';
        this.flexEl = [];
        this._accept = 'image/*';
        this._count = 4;
        this._selectable = true;
        this._files = [];
        this._multiple = false;
        this.capture = false;
        this.disableDelete = false;
        this.onFail = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onImageClick = new EventEmitter();
        this.onAddImageClick = new EventEmitter();
    }
    Object.defineProperty(ImagePickerComponent.prototype, "files", {
        get: function () {
            return this._files;
        },
        set: function (value) {
            this._files = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "accept", {
        get: function () {
            return this._accept;
        },
        set: function (value) {
            this._accept = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "length", {
        get: function () {
            return this._count;
        },
        set: function (value) {
            if (value > 0) {
                this._count = value;
            }
            else {
                this._count = 4;
            }
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "multiple", {
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImagePickerComponent.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        set: function (value) {
            this._selectable = value;
            this.sortItem();
        },
        enumerable: true,
        configurable: true
    });
    ImagePickerComponent.prototype.sortItem = function () {
        var _this = this;
        if (!this._files) {
            return;
        }
        var count = parseInt('' + this._count, 10);
        if (count <= 0) {
            count = 4;
        }
        var allEl = this._files.map(function (item) {
            return {
                type: 'img',
                backgroundImage: 'url(' + item.url + ')',
                transform: 'rotate(' + _this.getRotation(item.orientation) + ')deg'
            };
        });
        if (this._selectable) {
            allEl.push({
                type: 'select',
                backgroundImage: '',
                transform: ''
            });
        }
        var length = allEl.length;
        if (length !== 0 && length % count !== 0) {
            var blankCount = count - (length % count);
            var fillBlankEl = [];
            for (var i = 0; i < blankCount; i++) {
                fillBlankEl.push({
                    type: 'white',
                    backgroundImage: '',
                    transform: ''
                });
            }
            allEl = allEl.concat(fillBlankEl);
        }
        this.flexEl = [];
        for (var i = 0; i < allEl.length / count; i++) {
            var rowEl = allEl.slice(i * count, i * count + count);
            this.flexEl.push(rowEl);
        }
    };
    ImagePickerComponent.prototype.addImage = function (imgItem) {
        this._files.push({
            type: 'img',
            url: imgItem.url,
            orientation: imgItem.orientation
        });
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'add',
            index: this._files.length - 1
        });
    };
    ImagePickerComponent.prototype.removeImage = function (index) {
        this._files.splice(index, 1);
        this.sortItem();
        this.onChange.emit({
            files: this._files,
            operationType: 'remove',
            index: index
        });
    };
    ImagePickerComponent.prototype.imageClick = function (index) {
        this.onImageClick.emit({
            index: index,
            files: this._files
        });
    };
    ImagePickerComponent.prototype.addImageClick = function (e) {
        this.onAddImageClick.emit(e);
    };
    ImagePickerComponent.prototype.parseFile = function (file, index) {
        var _this = this;
        var reader = new FileReader();
        reader.onload = function (e) {
            var dataURL = e.target.result;
            if (!dataURL) {
                _this.onFail.emit("Fail to get the " + index + " image");
                return;
            }
            var orientation = 1;
            _this.getOrientation(file, function (res) {
                // -2: not jpeg , -1: not defined
                if (res > 0) {
                    orientation = res;
                }
                _this.addImage({
                    url: dataURL,
                    orientation: orientation,
                    file: file
                });
            });
        };
        reader.readAsDataURL(file);
    };
    ImagePickerComponent.prototype.fileChange = function (event) {
        var fileList = event.target.files;
        if (fileList && fileList.length) {
            for (var i = 0; i < fileList.length; i++) {
                this.parseFile(fileList[i], i);
            }
        }
    };
    ImagePickerComponent.prototype.getRotation = function (orientation) {
        if (orientation === void 0) { orientation = 1; }
        var imgRotation = 0;
        switch (orientation) {
            case 3:
                imgRotation = 180;
                break;
            case 6:
                imgRotation = 90;
                break;
            case 8:
                imgRotation = 270;
                break;
            default:
        }
        return imgRotation;
    };
    // https://stackoverflow.com/questions/7584794/accessing-jpeg-exif-rotation-data-in-javascript-on-the-client-side
    ImagePickerComponent.prototype.getOrientation = function (file, callback) {
        var reader = new FileReader();
        reader.onload = function (e) {
            var view = new DataView(e.target.result);
            if (view.getUint16(0, false) !== 0xffd8) {
                return callback(-2);
            }
            var length = view.byteLength;
            var offset = 2;
            while (offset < length) {
                var marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 0xffe1) {
                    var tmp = view.getUint32((offset += 2), false);
                    if (tmp !== 0x45786966) {
                        return callback(-1);
                    }
                    var little = view.getUint16((offset += 6), false) === 0x4949;
                    offset += view.getUint32(offset + 4, little);
                    var tags = view.getUint16(offset, little);
                    offset += 2;
                    for (var i = 0; i < tags; i++) {
                        if (view.getUint16(offset + i * 12, little) === 0x0112) {
                            return callback(view.getUint16(offset + i * 12 + 8, little));
                        }
                    }
                }
                else if ((marker & 0xff00) !== 0xff00) {
                    break;
                }
                else {
                    offset += view.getUint16(offset, false);
                }
            }
            return callback(-1);
        };
        reader.readAsArrayBuffer(file.slice(0, 64 * 1024));
    };
    __decorate([
        ViewChild('fileSelectorInput', { read: ViewContainerRef }),
        __metadata("design:type", ViewContainerRef)
    ], ImagePickerComponent.prototype, "_fileSelectorInput", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ImagePickerComponent.prototype, "capture", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ImagePickerComponent.prototype, "disableDelete", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], ImagePickerComponent.prototype, "files", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ImagePickerComponent.prototype, "accept", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ImagePickerComponent.prototype, "length", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ImagePickerComponent.prototype, "multiple", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ImagePickerComponent.prototype, "selectable", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImagePickerComponent.prototype, "onFail", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImagePickerComponent.prototype, "onChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImagePickerComponent.prototype, "onImageClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImagePickerComponent.prototype, "onAddImageClick", void 0);
    ImagePickerComponent = __decorate([
        Component({
            selector: 'ImagePicker, nzm-image-picker',
            template: "<div class=\"{{ prefixCls }}-list\" role=\"group\">\n  <Flex *ngFor=\"let rowItem of flexEl; let i = index\">\n    <FlexItem *ngFor=\"let item of rowItem; let j = index\">\n      <div *ngIf=\"item && 'img' === item.type && item.backgroundImage\" class=\"{{ prefixCls }}-item\">\n        <div\n          role=\"button\"\n          *ngIf=\"!disableDelete\"\n          aria-label=\"Click and Remove this image\"\n          class=\"{{ prefixCls }}-item-remove\"\n          (click)=\"removeImage(i * length + j)\"\n        ></div>\n        <div\n          role=\"button\"\n          aria-label=\"Image can be clicked\"\n          class=\"{{ prefixCls }}-item-content\"\n          [ngStyle]=\"{ 'background-image': item.backgroundImage, transform: item.transform }\"\n          (click)=\"imageClick(i * length + j)\"\n        ></div>\n      </div>\n      <div\n        role=\"button\"\n        aria-label=\"Choose and add image\"\n        *ngIf=\"item && 'select' === item.type\"\n        class=\"{{ prefixCls }}-item {{ prefixCls }}-upload-btn\"\n        (click)=\"addImageClick($event)\"\n      >\n        <input\n          #fileSelectorInput\n          type=\"file\"\n          [accept]=\"accept\"\n          [multiple]=\"multiple\"\n          [attr.capture]=\"capture ? capture : null\"\n          (change)=\"fileChange($event)\"\n        />\n      </div>\n      <div *ngIf=\"item && 'white' === item.type\" class=\"{{ prefixCls }}-item-white\"></div>\n    </FlexItem>\n  </Flex>\n</div>\n"
        }),
        __metadata("design:paramtypes", [])
    ], ImagePickerComponent);
    return ImagePickerComponent;
}());
export { ImagePickerComponent };
//# sourceMappingURL=data:application/json;base64,