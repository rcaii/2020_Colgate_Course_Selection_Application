import { __decorate, __extends } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { PopupService } from '../core/services/popup.service';
var PickerService = /** @class */ (function (_super) {
    __extends(PickerService, _super);
    function PickerService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.comRef = null;
        _this.defaultOptions = new PickerOptions();
        return _this;
    }
    PickerService.prototype.showPicker = function (config, confirmCallback, cancelCallback) {
        var _this = this;
        if (config === void 0) { config = this.defaultOptions; }
        var options = new PickerOptions();
        Object.assign(options, config, {
            hidePicker: function (event) {
                _this.hidePicker();
            },
            confirm: function (event) {
                if (confirmCallback) {
                    confirmCallback(event);
                }
            },
            cancel: function () {
                if (cancelCallback) {
                    cancelCallback();
                }
            }
        });
        var childInjector = Injector.create([
            {
                provide: PickerOptions,
                useValue: options
            }
        ]);
        this.comRef = this.showPopup(PickerComponent, childInjector);
        return this.comRef && this.comRef.instance;
    };
    PickerService.prototype.hidePicker = function () {
        this.hidePopup();
    };
    PickerService = __decorate([
        Injectable()
    ], PickerService);
    return PickerService;
}(PopupService));
export { PickerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInBpY2tlci9waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUc5RDtJQUFtQyxpQ0FBWTtJQUEvQztRQUFBLHFFQXVDQztRQXRDQyxZQUFNLEdBQWtDLElBQUksQ0FBQztRQUM3QyxvQkFBYyxHQUFrQixJQUFJLGFBQWEsRUFBRSxDQUFDOztJQXFDdEQsQ0FBQztJQW5DQyxrQ0FBVSxHQUFWLFVBQ0UsTUFBMkMsRUFDM0MsZUFBZ0MsRUFDaEMsY0FBK0I7UUFIakMsaUJBOEJDO1FBN0JDLHVCQUFBLEVBQUEsU0FBd0IsSUFBSSxDQUFDLGNBQWM7UUFJM0MsSUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7WUFDN0IsVUFBVSxFQUFFLFVBQUMsS0FBSztnQkFDaEIsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BCLENBQUM7WUFDRCxPQUFPLEVBQUUsVUFBQyxLQUFLO2dCQUNiLElBQUksZUFBZSxFQUFFO29CQUNuQixlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQztZQUNELE1BQU0sRUFBRTtnQkFDTixJQUFJLGNBQWMsRUFBRTtvQkFDbEIsY0FBYyxFQUFFLENBQUM7aUJBQ2xCO1lBQ0gsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUVILElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDcEM7Z0JBQ0UsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFFBQVEsRUFBRSxPQUFPO2FBQ2xCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM3RCxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDN0MsQ0FBQztJQUVELGtDQUFVLEdBQVY7UUFDRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQXRDVSxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWEsQ0F1Q3pCO0lBQUQsb0JBQUM7Q0FBQSxBQXZDRCxDQUFtQyxZQUFZLEdBdUM5QztTQXZDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFBpY2tlckNhbGxCYWNrLCBQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9waWNrZXItb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyBQb3B1cFNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL3NlcnZpY2VzL3BvcHVwLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGlja2VyU2VydmljZSBleHRlbmRzIFBvcHVwU2VydmljZSB7XG4gIGNvbVJlZjogQ29tcG9uZW50UmVmPFBpY2tlckNvbXBvbmVudD4gPSBudWxsO1xuICBkZWZhdWx0T3B0aW9uczogUGlja2VyT3B0aW9ucyA9IG5ldyBQaWNrZXJPcHRpb25zKCk7XG5cbiAgc2hvd1BpY2tlcihcbiAgICBjb25maWc6IFBpY2tlck9wdGlvbnMgPSB0aGlzLmRlZmF1bHRPcHRpb25zLFxuICAgIGNvbmZpcm1DYWxsYmFjaz86IFBpY2tlckNhbGxCYWNrLFxuICAgIGNhbmNlbENhbGxiYWNrPzogUGlja2VyQ2FsbEJhY2tcbiAgKTogYW55IHtcbiAgICBjb25zdCBvcHRpb25zID0gbmV3IFBpY2tlck9wdGlvbnMoKTtcbiAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZywge1xuICAgICAgaGlkZVBpY2tlcjogKGV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuaGlkZVBpY2tlcigpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpcm06IChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoY29uZmlybUNhbGxiYWNrKSB7XG4gICAgICAgICAgY29uZmlybUNhbGxiYWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbmNlbDogKCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBjaGlsZEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKFtcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogUGlja2VyT3B0aW9ucyxcbiAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgIH1cbiAgICBdKTtcbiAgICB0aGlzLmNvbVJlZiA9IHRoaXMuc2hvd1BvcHVwKFBpY2tlckNvbXBvbmVudCwgY2hpbGRJbmplY3Rvcik7XG4gICAgcmV0dXJuIHRoaXMuY29tUmVmICYmIHRoaXMuY29tUmVmLmluc3RhbmNlO1xuICB9XG5cbiAgaGlkZVBpY2tlcigpOiB2b2lkIHtcbiAgICB0aGlzLmhpZGVQb3B1cCgpO1xuICB9XG59XG4iXX0=