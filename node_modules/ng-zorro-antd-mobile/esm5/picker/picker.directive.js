import { __decorate, __metadata } from "tslib";
import { Input, Output, OnInit, NgZone, Injector, Renderer2, OnChanges, OnDestroy, Directive, ElementRef, forwardRef, HostListener, EventEmitter, ComponentRef, ViewContainerRef, ComponentFactory, ComponentFactoryResolver } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var PickerDirective = /** @class */ (function () {
    function PickerDirective(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer, _zone) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._zone = _zone;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onPickerChange = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onChange = function () { return null; };
        this.onTouched = function () { return null; };
    }
    PickerDirective_1 = PickerDirective;
    PickerDirective.prototype.togglePicker = function () {
        if (!this.picker) {
            this.showPicker();
        }
        else {
            this.hidePicker();
        }
    };
    PickerDirective.prototype.ngOnInit = function () {
        this.onVisibleChange.emit(false);
    };
    PickerDirective.prototype.ngOnChanges = function (value) {
        if (value.cols && this.picker) {
            this.picker.instance.options.cols = value.cols.currentValue;
        }
        if (value.data && this.picker) {
            if (!this.isPickerDataEqual(this.picker.instance.options.data, value.data.currentValue)) {
                this.picker.instance.options.data = value.data.currentValue;
                this.showPicker();
            }
        }
    };
    PickerDirective.prototype.ngOnDestroy = function () {
        this.hidePicker();
    };
    PickerDirective.prototype.onDocumentClick = function (event) {
        if (this.picker &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.picker.location.nativeElement.contains(event.target)) {
            this.hidePicker();
        }
    };
    PickerDirective.prototype.showPicker = function () {
        var _this = this;
        if (this.picker) {
            this._zone.run(function () {
                _this.picker.instance.init();
            });
        }
        else if (!this.picker && !this.disabled) {
            setTimeout(function () {
                _this._eventListeners = [
                    _this._renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); })
                ];
            });
            var options_1 = new PickerOptions();
            Object.assign(options_1, this._defaultOptions, {
                hidePicker: function (event) {
                    _this.hidePicker();
                },
                updateNgModel: function (value) {
                    _this.onChange(value);
                }
            });
            var optionalParams = [
                'data',
                'value',
                'cols',
                'mask',
                'title',
                'okText',
                'dismissText',
                'disabled',
                'cascade',
                'appendToBody',
                'indicatorStyle',
                'onPickerChange',
                'onVisibleChange',
                'onDismiss'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    options_1[param] = _this[param];
                }
            });
            var componentFactory = this._cfr.resolveComponentFactory(PickerComponent);
            var childInjector = Injector.create([
                {
                    provide: PickerOptions,
                    useValue: options_1
                }
            ]);
            this.picker = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                this.appendToBodyElement = document.body.appendChild(this.picker.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    PickerDirective.prototype.hidePicker = function () {
        if (this.appendToBodyElement) {
            document.body.removeChild(this.appendToBodyElement);
            this.appendToBodyElement = null;
        }
        if (this.picker) {
            this.picker.destroy();
            delete this.picker;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    PickerDirective.prototype.writeValue = function (value) {
        this.value = Array.isArray(value) ? value : [];
        if (this.picker) {
            this.picker.instance.options.value = this.value;
            this.showPicker();
            this.picker.instance.reloadPicker();
        }
    };
    PickerDirective.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    PickerDirective.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    PickerDirective.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    PickerDirective.prototype.isPickerDataEqual = function (data1, data2) {
        if (!data1 && !data2) {
            return true;
        }
        if (!Array.isArray(data1) || !Array.isArray(data2) || data1.length !== data2.length) {
            return false;
        }
        for (var i = 0; i < data1.length; i++) {
            var item1 = data1[i];
            var item2 = data2[i];
            if ((item1 && !item2) || (!item1 && item2)) {
                return false;
            }
            if (item1.value !== item2.value) {
                return false;
            }
            if (item1.label !== item2.label) {
                return false;
            }
            if (item1.children && item2.children) {
                return this.isPickerDataEqual(item1.children, item2.children);
            }
        }
        return true;
    };
    var PickerDirective_1;
    PickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: PickerOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], PickerDirective.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PickerDirective.prototype, "cols", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PickerDirective.prototype, "mask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PickerDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PickerDirective.prototype, "visible", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PickerDirective.prototype, "okText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PickerDirective.prototype, "dismissText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PickerDirective.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PickerDirective.prototype, "cascade", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PickerDirective.prototype, "appendToBody", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PickerDirective.prototype, "indicatorStyle", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PickerDirective.prototype, "onVisibleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PickerDirective.prototype, "onPickerChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PickerDirective.prototype, "onDismiss", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PickerDirective.prototype, "togglePicker", null);
    PickerDirective = PickerDirective_1 = __decorate([
        Directive({
            selector: '[Picker], [nzm-picker]',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PickerDirective_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [ViewContainerRef,
            ElementRef,
            PickerOptions,
            ComponentFactoryResolver,
            Renderer2,
            NgZone])
    ], PickerDirective);
    return PickerDirective;
}());
export { PickerDirective };
//# sourceMappingURL=data:application/json;base64,