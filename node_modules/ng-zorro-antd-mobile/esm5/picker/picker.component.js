import { __decorate, __extends, __metadata } from "tslib";
import { OnInit, OnDestroy, Component, ViewChild, ElementRef, HostListener, AfterViewInit, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { PickerOptions } from './picker-options.provider';
import * as velocity from '../core/util/velocity';
import * as touchEvent from '../core/util/touch-event';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { PickerRef } from './picker-ref.class';
var PickerComponent = /** @class */ (function (_super) {
    __extends(PickerComponent, _super);
    function PickerComponent(elementRef, options, _localeProviderService) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.options = options;
        _this._localeProviderService = _localeProviderService;
        _this.transitionName = 'am-slide-up-enter am-slide-up-enter-active';
        _this.maskTransitionName = 'am-fade-enter am-fade-enter-active';
        _this.startY = 0;
        _this.differY = 0;
        _this.currentY = 0;
        _this.len = 0;
        _this.dom = null;
        _this.index = 0;
        _this.maxY = 0;
        _this.lineHeight = 34;
        _this.dataForRender = [];
        _this.selectedTarget = [];
        _this.isMouseDown = false;
        _this.Velocity = velocity.getVelocity();
        _this._unsubscribe$ = new Subject();
        _this.onChange = function (_) { };
        return _this;
    }
    PickerComponent.prototype.panstart = function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask') || this.options.disabled) {
            return;
        }
        this.isMouseDown = true;
        event.preventDefault();
        this.dom = touchEvent.getEventTarget(event).target.parentElement.children[2];
        this.len = this.dom.children.length;
        this.maxY = -(this.len - 1);
        if (this.dom.style.transform === 'translateY(0px)') {
            this.currentY = 0;
            this.maxY = -(this.len - 1);
        }
        else if (this.selectedTarget.length > 0) {
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    _this.currentY = item.currentY;
                }
            });
        }
        this.startY = touchEvent.getEventTarget(event).clientY;
    };
    PickerComponent.prototype.panmove = function (event) {
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown || this.options.disabled) {
            return;
        }
        event.preventDefault();
        var ev = touchEvent.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        this.Velocity.record(this.differY);
        this.dom.style.transition = 'transform 0s';
        this.dom.style.transform = "translateY(" + (this.currentY * this.lineHeight + this.differY) + "px)";
    };
    PickerComponent.prototype.panend = function (event) {
        var _this = this;
        if (!event.target.classList.contains('am-picker-col-mask') || !this.isMouseDown || this.options.disabled) {
            return;
        }
        this.isMouseDown = false;
        event.preventDefault();
        var ev = touchEvent.getEventTarget(event);
        this.differY = ev.clientY - this.startY;
        var time = 0.3;
        var velocityTemp = this.Velocity.getVelocity(this.differY) * 4;
        if (velocity) {
            this.differY = velocityTemp * 40 + this.differY;
            time = Math.abs(velocityTemp) * 0.1;
        }
        this.dom.style.transition = 'transform ' + (time < 0.3 ? 0.3 : time) + 's';
        if (this.differY <= -this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY <= this.maxY) {
                this.currentY = this.maxY;
            }
        }
        else if (this.differY >= this.lineHeight / 2) {
            this.currentY += Math.floor(this.differY / this.lineHeight);
            if (this.currentY >= 0) {
                this.currentY = 0;
            }
        }
        if (this.selectedTarget.length > 0) {
            var hasKey_1 = false;
            this.selectedTarget.forEach(function (item) {
                if (item.targetId === event.target.id) {
                    hasKey_1 = true;
                    item.targetId = event.target.id;
                    item.currentY = _this.currentY;
                }
                else if (parseInt(item.targetId, 0) > parseInt(event.target.id, 0) && _this.options.cascade) {
                    item.currentY = 0;
                }
            });
            if (!hasKey_1) {
                this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
            }
        }
        else {
            this.selectedTarget.push({ targetId: event.target.id, currentY: this.currentY });
        }
        this.dom.style.transform = "translateY(" + this.currentY * this.lineHeight + "px)";
        this.index = Math.floor(Math.abs(this.currentY / 1));
        this.setCurrentSelected(parseInt(event.target.id, 0), this.index);
        if (this.options.value !== this.combineReslut()) {
            this.options.onPickerChange.emit(this.combineReslut());
            this.onChange(this.combineReslut());
        }
    };
    PickerComponent.prototype.init = function () {
        if (this.dataForRender.length === 0 && this.generateArrayData(this.options.data).length > 0) {
            this.dataForRender.push(this.generateArrayData(this.options.data));
        }
        if (this.options.value.length > 0) {
            this.getInitValueIndex(this.dataForRender);
        }
        else {
            this.checkArrayDeep(this.options.data[0]);
            for (var index = 0; index < this.dataForRender.length; index++) {
                this.selectedTarget.push({ targetId: "" + index, currentY: 0 });
            }
        }
    };
    PickerComponent.prototype.getInitValueIndex = function (dataTemp) {
        var self = this;
        self.selectedTarget = [];
        self.options.value.forEach(function (element, i) {
            dataTemp.forEach(function (item, j) {
                item.forEach(function (item1, k) {
                    if ((element === item1.label || element === item1.value || element === item1) && i === j) {
                        self.checkArrayDeep(self.dataForRender[i][k], false);
                        self.selectedTarget.push({ targetId: "" + i, currentY: -k });
                    }
                });
            });
        });
    };
    PickerComponent.prototype.reloadPicker = function () {
        if (!this._picker || this._picker === undefined) {
            return;
        }
        this.currentPicker = this._picker.element.nativeElement;
        if (this.currentPicker && this.currentPicker.children.length > 0) {
            var self_1 = this;
            setTimeout(function () {
                self_1.selectedTarget.forEach(function (item, i) {
                    self_1.currentPicker.children[i].children[2].style.transition = 'transform .3s';
                    var index = parseInt(item.currentY, 0);
                    self_1.currentPicker.children[i].children[2].style.transform = "translateY(" + index * self_1.lineHeight + "px)";
                });
            }, 0);
        }
    };
    PickerComponent.prototype.generateArrayData = function (targetArr) {
        var tempArr = [];
        if (targetArr instanceof Array) {
            targetArr.forEach(function (item, i) {
                if (item instanceof Array) {
                    var keys = Object.keys(item);
                    var element_1 = {};
                    keys.forEach(function (key) {
                        element_1[key] = targetArr[i][key] || targetArr[i];
                    });
                    tempArr.push(element_1);
                }
                else {
                    tempArr.push(item);
                }
            });
            return tempArr;
        }
        return [];
    };
    PickerComponent.prototype.checkArrayDeep = function (parent, init) {
        if (init === void 0) { init = true; }
        if (parent instanceof Object && parent.children && parent.children.length > 0) {
            if (this.generateArrayData(parent.children).length > 0 && this.dataForRender.length < this.options.cols) {
                var hasValue_1 = false;
                this.dataForRender.filter(function (item, index) {
                    if (JSON.stringify(item) === JSON.stringify(parent.children)) {
                        hasValue_1 = true;
                    }
                });
                if (!hasValue_1) {
                    this.dataForRender.push(this.generateArrayData(parent.children));
                }
                if (init) {
                    this.checkArrayDeep(parent.children[0]);
                }
            }
        }
    };
    PickerComponent.prototype.ok = function () {
        if (this.options.updateNgModel) {
            this.options.updateNgModel(this.combineReslut());
        }
        if (this.options.confirm) {
            this.options.confirm(this.combineReslut());
        }
        this.setTransitionName();
    };
    PickerComponent.prototype.combineReslut = function () {
        var result = [];
        var self = this;
        self.selectedTarget.forEach(function (item) {
            if (self.dataForRender.length > 0 && self.dataForRender.length >= parseInt(item.targetId, 0) + 1) {
                var curItem = self.dataForRender[parseInt(item.targetId, 0)][-item.currentY];
                if (curItem !== undefined) {
                    result.push(curItem);
                }
            }
        });
        return result;
    };
    PickerComponent.prototype.cancel = function () {
        this.setTransitionName();
        this.options.onDismiss.emit();
        if (this.options.cancel) {
            this.options.cancel();
        }
    };
    PickerComponent.prototype.setTransitionName = function () {
        var _this = this;
        this.transitionName = 'am-slide-up-leave am-slide-up-leave-active';
        this.maskTransitionName = 'am-fade-leave am-fade-leave-active';
        setTimeout(function () {
            _this.options.hidePicker();
        }, 200);
    };
    PickerComponent.prototype.setCurrentSelected = function (target, index) {
        var _this = this;
        if (!this.options.cascade) {
            return;
        }
        var a = this.dataForRender.slice(0, target + 1);
        this.dataForRender = a;
        this.checkArrayDeep(this.dataForRender[target][index]);
        if (this.selectedTarget.length > 0 && this.selectedTarget.length < this.dataForRender.length) {
            for (var i = 0; i < this.dataForRender.length; i++) {
                if (i > target) {
                    if (i < this.selectedTarget.length) {
                        this.selectedTarget[i] = { targetId: "" + i, currentY: 0 };
                    }
                    else {
                        this.selectedTarget.push({ targetId: "" + i, currentY: 0 });
                    }
                }
            }
        }
        setTimeout(function () {
            _this.dataForRender.forEach(function (item, i) {
                if (target !== "" + i && i > target) {
                    _this._picker.element.nativeElement.children[i].children[2].style.transition = 'transform .3s';
                    _this._picker.element.nativeElement.children[i].children[2].style.transform = 'translateY(0px)';
                }
            });
        }, 0);
    };
    PickerComponent.prototype.getInstance = function () {
        return this;
    };
    PickerComponent.prototype.getElement = function () {
        return this.elementRef && this.elementRef.nativeElement;
    };
    PickerComponent.prototype.close = function () {
        if (this.options.hidePicker) {
            this.options.hidePicker();
        }
    };
    PickerComponent.prototype.destroy = function () {
        this.close();
    };
    PickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.init();
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            var locale = _this._localeProviderService.getLocaleSubObj('Picker');
            _this.options.okText = _this.options.okText === '确定' ? locale.okText : _this.options.okText;
            _this.options.dismissText = _this.options.dismissText === '取消' ? locale.dismissText : _this.options.dismissText;
        });
    };
    PickerComponent.prototype.ngAfterViewInit = function () {
        this.reloadPicker();
    };
    PickerComponent.prototype.ngOnDestroy = function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    PickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: PickerOptions },
        { type: LocaleProviderService }
    ]; };
    __decorate([
        ViewChild('picker', { read: ViewContainerRef, static: true }),
        __metadata("design:type", ViewContainerRef)
    ], PickerComponent.prototype, "_picker", void 0);
    __decorate([
        HostListener('mousedown', ['$event']),
        HostListener('touchstart', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PickerComponent.prototype, "panstart", null);
    __decorate([
        HostListener('mousemove', ['$event']),
        HostListener('touchmove', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PickerComponent.prototype, "panmove", null);
    __decorate([
        HostListener('mouseup', ['$event']),
        HostListener('mouseleave', ['$event']),
        HostListener('touchend', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PickerComponent.prototype, "panend", null);
    PickerComponent = __decorate([
        Component({
            selector: 'Picker',
            template: "<div *ngIf=\"options.mask\" class=\"am-picker-popup-mask {{ maskTransitionName }}\" (click)=\"cancel()\"></div>\n<div class=\"am-picker-popup am-picker-popup-wrap {{ transitionName }}\" style=\" min-height: 280px\">\n  <div class=\"am-picker-popup-content\">\n    <div class=\"am-picker-popup-body\">\n      <div>\n        <div class=\"am-picker-popup-header\">\n          <div class=\"am-picker-popup-item am-picker-popup-header-left\" (click)=\"cancel()\">\n            {{ options.dismissText }}\n          </div>\n          <div class=\"am-picker-popup-item am-picker-popup-title\">{{ options.title }}</div>\n          <div class=\"am-picker-popup-item am-picker-popup-header-right\" (click)=\"ok()\">{{ options.okText }}</div>\n        </div>\n        <div class=\"am-picker\" style=\"flex-direction: row; align-items: center;\" #picker>\n          <div *ngFor=\"let item of dataForRender; let i = index\" class=\"am-picker-col\">\n            <div class=\"am-picker-col-indicator \" style=\"top: 102px;\" [ngStyle]=\"options.indicatorStyle\"></div>\n            <div class=\"am-picker-col-mask\" style=\"background-size: 100% 102px;\" id=\"{{ i }}\"></div>\n            <div class=\"am-picker-col-content\">\n              <div *ngFor=\"let val of item; let i = index\" class=\"am-picker-col-item\" id=\"{{ i }}\">\n                {{ val.label ? val.label : val }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef,
            PickerOptions,
            LocaleProviderService])
    ], PickerComponent);
    return PickerComponent;
}(PickerRef));
export { PickerComponent };
//# sourceMappingURL=data:application/json;base64,