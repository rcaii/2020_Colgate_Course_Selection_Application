import { __decorate, __metadata, __read, __spread } from "tslib";
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, Output, AfterContentInit, OnDestroy, QueryList, forwardRef, EventEmitter, ContentChildren, ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { RadioItemComponent } from './radio-item.component';
import { merge, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
export var RADIO_ITEM_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return RadioItemGroupComponent; }),
    multi: true
};
var RadioItemGroupComponent = /** @class */ (function () {
    function RadioItemGroupComponent(cdr) {
        this.cdr = cdr;
        this.destroy$ = new Subject();
        this.onChange = new EventEmitter();
    }
    RadioItemGroupComponent.prototype.updateChildrenStatus = function () {
        var _this = this;
        if (this.radioItems && typeof this.selectedValue !== 'undefined' && null !== this.selectedValue) {
            Promise.resolve().then(function () {
                _this.radioItems.forEach(function (radioItem) {
                    radioItem.checked = radioItem.value === _this.selectedValue;
                    radioItem.markForCheck();
                });
            });
        }
    };
    RadioItemGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.radioItems.changes
            .pipe(startWith(null), takeUntil(this.destroy$))
            .subscribe(function () {
            _this.updateChildrenStatus();
            if (_this.selectSubscription) {
                _this.selectSubscription.unsubscribe();
            }
            _this.selectSubscription = merge.apply(void 0, __spread(_this.radioItems.map(function (radioItem) { return radioItem.select$; }))).pipe(takeUntil(_this.destroy$))
                .subscribe(function (radioItem) {
                if (typeof _this.selectedValue !== 'undefined' && null !== _this.selectedValue) {
                    _this.selectedValue = radioItem.value;
                    _this._ngModelOnChange(radioItem.value);
                    _this.updateChildrenStatus();
                    if (_this.onChange) {
                        _this.onChange.emit({ name: radioItem.name, value: radioItem.value });
                    }
                }
            });
        });
    };
    RadioItemGroupComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    RadioItemGroupComponent.prototype.writeValue = function (value) {
        if (typeof value !== 'undefined' && null !== value) {
            this.selectedValue = value;
            this.updateChildrenStatus();
            this.cdr.markForCheck();
        }
    };
    RadioItemGroupComponent.prototype.registerOnChange = function (fn) {
        this._ngModelOnChange = fn;
    };
    RadioItemGroupComponent.prototype.registerOnTouched = function (fn) {
        this._ngModelOnTouched = fn;
    };
    RadioItemGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return RadioItemComponent; })),
        __metadata("design:type", QueryList)
    ], RadioItemGroupComponent.prototype, "radioItems", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], RadioItemGroupComponent.prototype, "onChange", void 0);
    RadioItemGroupComponent = __decorate([
        Component({
            selector: 'RadioItemGroup, nzm-radio-item-group',
            template: "<ng-content></ng-content>\n",
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [RADIO_ITEM_GROUP_VALUE_ACCESSOR]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], RadioItemGroupComponent);
    return RadioItemGroupComponent;
}());
export { RadioItemGroupComponent };
//# sourceMappingURL=data:application/json;base64,