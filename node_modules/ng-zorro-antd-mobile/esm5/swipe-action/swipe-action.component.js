import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
var SwipeActionComponent = /** @class */ (function () {
    function SwipeActionComponent() {
        var _this = this;
        this.prefixCls = 'am-swipe';
        this.wrapCls = {};
        this._swiping = false;
        this._openedLeft = false;
        this._openedRight = false;
        this.left = [];
        this.right = [];
        this.autoClose = false;
        this.disabled = false;
        this.onOpen = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onCloseSwipe = function (ev) {
            if (!(_this._openedLeft || _this._openedRight)) {
                return;
            }
            var pNode = ev.target.closest("." + _this.prefixCls + "-actions");
            if (!pNode) {
                _this.close();
            }
        };
    }
    SwipeActionComponent.prototype.setClassMap = function () {
        var _a;
        this.wrapCls = (_a = {},
            _a[this.prefixCls] = true,
            _a[this.prefixCls + "-swiping"] = this._swiping,
            _a);
    };
    SwipeActionComponent.prototype.close = function () {
        if (this._openedLeft || this._openedRight) {
            this.onClose.emit();
        }
        this.setBtnStyle(0);
        this._openedLeft = false;
        this._openedRight = false;
    };
    SwipeActionComponent.prototype.setBtnStyle = function (value) {
        if (this._btnsLeftWidth === 0 || this._btnsRightWidth === 0) {
            this._btnsLeftWidth = this.leftBtnRef ? this.leftBtnRef.nativeElement.offsetWidth : 0;
            this._btnsRightWidth = this.rightBtnRef ? this.rightBtnRef.nativeElement.offsetWidth : 0;
        }
        var limit = value > 0 ? this._btnsLeftWidth : -this._btnsRightWidth;
        var contentLeft = this.getContentEasing(value, limit);
        this.content.nativeElement.style.left = contentLeft + "px";
        this.cover.nativeElement.style.display = Math.abs(value) > 0 ? 'block' : 'none';
        this.cover.nativeElement.style.left = contentLeft + "px";
    };
    SwipeActionComponent.prototype.getContentEasing = function (value, limit) {
        return Math.abs(value) - Math.abs(limit) > 0 ? limit : value;
    };
    SwipeActionComponent.prototype.onTouchStart = function (e) {
        this._startX = e.changedTouches[0].clientX;
        this._swiping = true;
    };
    SwipeActionComponent.prototype.onTouchMove = function (e) {
        var deltaX = e.changedTouches[0].clientX - this._startX;
        this._needShowRight = deltaX < -5 && this.right.length > 0;
        this._needShowLeft = deltaX > 5 && this.left.length > 0;
        if (this.leftBtnRef) {
            this.leftBtnRef.nativeElement.style.visibility = this._needShowRight ? 'hidden' : 'visible';
        }
        if (this.rightBtnRef) {
            this.rightBtnRef.nativeElement.style.visibility = this._needShowLeft ? 'hidden' : 'visible';
        }
        this.setBtnStyle(deltaX);
    };
    SwipeActionComponent.prototype.onTouchEnd = function (e) {
        var deltaX = e.changedTouches[0].clientX - this._startX;
        var needOpenRight = this._needShowRight && Math.abs(deltaX) > this._btnsRightWidth / 2;
        var needOpenLeft = this._needShowLeft && Math.abs(deltaX) > this._btnsLeftWidth / 2;
        if (needOpenRight) {
            this.doOpenRight();
        }
        else if (needOpenLeft) {
            this.doOpenLeft();
        }
        else {
            this.close();
        }
        this._swiping = false;
        this._needShowLeft = false;
        this._needShowRight = false;
    };
    SwipeActionComponent.prototype.doOpenLeft = function () {
        this.open(this._btnsLeftWidth, true, false);
    };
    SwipeActionComponent.prototype.doOpenRight = function () {
        this.open(-this._btnsRightWidth, false, true);
    };
    SwipeActionComponent.prototype.onBtnClick = function (ev, btn) {
        var onPress = btn.onPress;
        if (onPress) {
            onPress(ev);
        }
        if (this.autoClose) {
            this.close();
        }
    };
    SwipeActionComponent.prototype.open = function (value, openedLeft, openedRight) {
        this.onOpen.emit();
        this._openedLeft = openedLeft;
        this._openedRight = openedRight;
        this.setBtnStyle(value);
    };
    SwipeActionComponent.prototype.ngOnInit = function () {
        this.setClassMap();
    };
    SwipeActionComponent.prototype.ngAfterViewInit = function () {
        this._btnsLeftWidth = this.leftBtnRef ? this.leftBtnRef.nativeElement.offsetWidth : 0;
        this._btnsRightWidth = this.rightBtnRef ? this.rightBtnRef.nativeElement.offsetWidth : 0;
        document.body.addEventListener('touchstart', this.onCloseSwipe, true);
    };
    SwipeActionComponent.prototype.ngOnDestroy = function () {
        document.body.removeEventListener('touchstart', this.onCloseSwipe, true);
    };
    __decorate([
        ViewChild('leftBtnRef'),
        __metadata("design:type", Object)
    ], SwipeActionComponent.prototype, "leftBtnRef", void 0);
    __decorate([
        ViewChild('rightBtnRef'),
        __metadata("design:type", Object)
    ], SwipeActionComponent.prototype, "rightBtnRef", void 0);
    __decorate([
        ViewChild('contentRef'),
        __metadata("design:type", Object)
    ], SwipeActionComponent.prototype, "content", void 0);
    __decorate([
        ViewChild('coverRef'),
        __metadata("design:type", Object)
    ], SwipeActionComponent.prototype, "cover", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SwipeActionComponent.prototype, "left", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], SwipeActionComponent.prototype, "right", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SwipeActionComponent.prototype, "autoClose", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], SwipeActionComponent.prototype, "disabled", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SwipeActionComponent.prototype, "onOpen", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SwipeActionComponent.prototype, "onClose", void 0);
    SwipeActionComponent = __decorate([
        Component({
            selector: 'SwipeAction, nzm-swipe-action',
            template: "<div *ngIf=\"(left.length != 0 || right.length != 0) && !disabled\" [ngClass]=\"wrapCls\">\n  <div class=\"{{ prefixCls }}-cover\" #coverRef></div>\n  <div *ngIf=\"left && left.length > 0\" class=\"{{ prefixCls }}-actions {{ prefixCls }}-actions-left\" #leftBtnRef>\n    <div\n      *ngFor=\"let btn of left\"\n      class=\"{{ prefixCls }}-btn {{ btn.className }}\"\n      [ngStyle]=\"btn.style\"\n      role=\"button\"\n      (click)=\"onBtnClick($event, btn)\"\n    >\n      <div class=\"{{ prefixCls }}-btn-text\">\n        {{ btn.text || 'Click' }}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"right && right.length > 0\" class=\"{{ prefixCls }}-actions {{ prefixCls }}-actions-right\" #rightBtnRef>\n    <div\n      *ngFor=\"let btn of right\"\n      class=\"{{ prefixCls }}-btn {{ btn.className }}\"\n      [ngStyle]=\"btn.style\"\n      role=\"button\"\n      (click)=\"onBtnClick($event, btn)\"\n    >\n      <div class=\"{{ prefixCls }}-btn-text\">\n        {{ btn.text || 'Click' }}\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"{{ prefixCls }}-content\"\n    #contentRef\n    (touchstart)=\"onTouchStart($event)\"\n    (touchmove)=\"onTouchMove($event)\"\n    (touchend)=\"onTouchEnd($event)\"\n  >\n    <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n  </div>\n</div>\n<div *ngIf=\"!((left.length != 0 || right.length != 0) && !disabled)\" class=\"{{ prefixCls }}-content\" #contentRef>\n  <ng-template [ngTemplateOutlet]=\"content\"></ng-template>\n</div>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [])
    ], SwipeActionComponent);
    return SwipeActionComponent;
}());
export { SwipeActionComponent };
//# sourceMappingURL=data:application/json;base64,