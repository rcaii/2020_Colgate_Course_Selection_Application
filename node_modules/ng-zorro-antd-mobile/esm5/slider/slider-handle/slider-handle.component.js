import { __decorate, __metadata } from "tslib";
import { Component, OnInit, ElementRef, Input, Output, EventEmitter, HostListener, OnDestroy, ViewEncapsulation } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var SliderHandleComponent = /** @class */ (function () {
    function SliderHandleComponent(_elf, _sanitizer) {
        var _this = this;
        this._elf = _elf;
        this._sanitizer = _sanitizer;
        this._disabled = false;
        this._marks = {};
        this._isDraging = false;
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
        this.mouseDown = function (event) {
            if (!_this._disabled && _this.isMouseTarget(event)) {
                _this._startX = event.clientX;
                _this._handleStatus = 'start';
                _this._isDraging = true;
                document.addEventListener('mousemove', _this.mouseMove, false);
                document.addEventListener('mouseup', _this.mouseUp, false);
                _this.pauseEvent(event);
            }
        };
        this.mouseMove = function (event) {
            if (!_this._disabled && _this._isDraging) {
                _this.pauseEvent(event);
                var pos = event.clientX;
                _this._value = Math.round(_this.calcValueByPos(pos));
                _this.left = _this.calcOffset(_this._value);
                if (_this._oldValue !== _this._value) {
                    _this._oldValue = _this._value;
                    _this.onChange.emit(_this._value);
                }
            }
        };
        this.mouseUp = function (event) {
            if (!_this._disabled && _this._isDraging) {
                _this._handleStatus = 'end';
                _this._isDraging = false;
                var pos = event.clientX;
                _this._value = Math.round(_this.calcValueByPos(pos));
                _this.left = _this.calcOffset(_this._value);
                _this.onAfterChange.emit(_this._value);
            }
        };
    }
    Object.defineProperty(SliderHandleComponent.prototype, "min", {
        set: function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "max", {
        set: function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "minBound", {
        set: function (value) {
            this._minBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "maxBound", {
        set: function (value) {
            this._maxBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "step", {
        set: function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "value", {
        set: function (value) {
            this._value = value;
            if (this._value) {
                this.left = this.calcOffset(this._value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "disabled", {
        set: function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "sliderLength", {
        set: function (value) {
            this._sliderLength = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "sliderStart", {
        set: function (value) {
            this._sliderStart = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderHandleComponent.prototype, "handleStyle", {
        get: function () {
            return this._handleStyle;
        },
        set: function (value) {
            this._handleStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    /* 手势操作 */
    SliderHandleComponent.prototype.panstart = function (event) {
        // event.preventDefault();
        if (!this._disabled) {
            this._startX = event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            this._handleStatus = 'start';
            this._isDraging = true;
        }
    };
    SliderHandleComponent.prototype.panmove = function (event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            var pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            if (this._oldValue !== this._value) {
                this._oldValue = this._value;
                this.onChange.emit(this._value);
            }
        }
    };
    SliderHandleComponent.prototype.panend = function (event) {
        event.preventDefault();
        if (!this._disabled && this._isDraging) {
            this._handleStatus = 'end';
            this._isDraging = false;
            var pos = event.changedTouches[0].clientX;
            this._value = Math.round(this.calcValueByPos(pos));
            this.left = this.calcOffset(this._value);
            this.onAfterChange.emit(this._value);
        }
    };
    SliderHandleComponent.prototype.calcValueByPos = function (pos) {
        var offset = pos - this._sliderStart;
        var value = this.calcValue(offset);
        if (value <= this._minBound) {
            value = this._minBound;
        }
        if (value >= this._maxBound) {
            value = this._maxBound;
        }
        var closestPoint = this.getClosestPoint(value);
        return this._step === null ? closestPoint : parseFloat(closestPoint.toFixed(this.getPrecision(this._step)));
    };
    SliderHandleComponent.prototype.calcValue = function (offset) {
        var ratio = Math.abs(Math.max(offset, 0) / this._sliderLength);
        var value = ratio * (this._max - this._min) + this._min;
        return value;
    };
    SliderHandleComponent.prototype.getClosestPoint = function (val) {
        var points = Object.keys(this._marks).map(parseFloat);
        if (this._step !== null) {
            var closestStep = Math.round((val - this._min) / this._step) * this._step + this._min;
            points.push(closestStep);
        }
        var diffs = points.map(function (point) {
            return Math.abs(val - point);
        });
        return points[diffs.indexOf(Math.min.apply(Math, this.toConsumableArray(diffs)))];
    };
    SliderHandleComponent.prototype.getPrecision = function (step) {
        var stepString = step.toString();
        var precision = 0;
        if (stepString.indexOf('.') >= 0) {
            precision = stepString.length - stepString.indexOf('.') - 1;
        }
        return precision;
    };
    SliderHandleComponent.prototype.calcOffset = function (value) {
        var ratio = (value - this._min) / (this._max - this._min);
        return ratio * 100;
    };
    SliderHandleComponent.prototype.pauseEvent = function (e) {
        e.stopPropagation();
        e.preventDefault();
    };
    SliderHandleComponent.prototype.isMouseTarget = function (event) {
        var target = event.target;
        var parentFound = false;
        while (target !== null && !parentFound) {
            if (target === this._elf.nativeElement) {
                parentFound = true;
            }
            target = target.parentElement;
        }
        return parentFound;
    };
    SliderHandleComponent.prototype.toConsumableArray = function (arr) {
        if (Array.isArray(arr)) {
            var arr2 = Array(arr.length);
            for (var i = 0; i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        }
    };
    SliderHandleComponent.prototype.ngOnInit = function () {
        var self = this;
        this._elf.nativeElement.addEventListener('mousedown', this.mouseDown, false);
        this._handleOffsetX = this._elf.nativeElement.getBoundingClientRect().x;
        this.left = this.calcOffset(this._value);
        this._minBound = this._minBound === undefined ? this._min : this._minBound;
        this._maxBound = this._maxBound === undefined ? this._max : this._maxBound;
    };
    SliderHandleComponent.prototype.ngOnDestroy = function () {
        document.removeEventListener('mousemove', this.mouseMove, false);
        document.removeEventListener('mouseup', this.mouseUp, false);
    };
    SliderHandleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "min", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "max", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "minBound", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "maxBound", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "step", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SliderHandleComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "sliderLength", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderHandleComponent.prototype, "sliderStart", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SliderHandleComponent.prototype, "handleStyle", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SliderHandleComponent.prototype, "onChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SliderHandleComponent.prototype, "onAfterChange", void 0);
    __decorate([
        HostListener('touchstart', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SliderHandleComponent.prototype, "panstart", null);
    __decorate([
        HostListener('touchmove', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SliderHandleComponent.prototype, "panmove", null);
    __decorate([
        HostListener('touchend', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SliderHandleComponent.prototype, "panend", null);
    SliderHandleComponent = __decorate([
        Component({
            selector: 'SliderHandle, nzm-slider-handle',
            template: "<div role=\"slider\" class=\"am-slider-handle\" [ngStyle]=\"handleStyle\" [style.left.%]=\"left\"></div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef, DomSanitizer])
    ], SliderHandleComponent);
    return SliderHandleComponent;
}());
export { SliderHandleComponent };
//# sourceMappingURL=data:application/json;base64,