import { __assign, __decorate, __metadata } from "tslib";
import { Component, OnInit, ElementRef, Input, Output, EventEmitter, AfterViewInit, HostBinding, ViewEncapsulation } from '@angular/core';
var SliderMarksComponent = /** @class */ (function () {
    function SliderMarksComponent(_elf) {
        this._elf = _elf;
        this.markArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._className = 'am-slider-mark';
        this.onChange = new EventEmitter();
        this.onAfterChange = new EventEmitter();
    }
    Object.defineProperty(SliderMarksComponent.prototype, "min", {
        set: function (value) {
            if (value && value <= this._max) {
                this._min = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "max", {
        set: function (value) {
            if (value && value >= this._min) {
                this._max = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "marks", {
        set: function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "included", {
        set: function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "upperBound", {
        set: function (value) {
            if (value && value !== this._upperBound) {
                this._upperBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "lowerBound", {
        set: function (value) {
            if (value && value !== this.lowerBound) {
                this._lowerBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderMarksComponent.prototype, "class", {
        get: function () {
            return this._className;
        },
        enumerable: true,
        configurable: true
    });
    SliderMarksComponent.prototype.getMarks = function (marksKeys) {
        var _this = this;
        this.markArray = [];
        marksKeys
            .map(parseFloat)
            .sort(function (a, b) { return a - b; })
            .map(function (point) {
            var _a;
            var markItem = {
                markLabel: '',
                point: '',
                className: {},
                style: {}
            };
            var markPoint = _this._marks[point];
            var markPointIsObject = typeof markPoint === 'object';
            var markLabel = markPointIsObject ? markPoint.label : markPoint;
            if (!markLabel && markLabel !== 0) {
                return null;
            }
            var isActive = (!_this._included && point === _this._upperBound) ||
                (_this._included && point <= _this._upperBound && point >= _this._lowerBound);
            var markClassName = (_a = {},
                _a[_this._className + "-text"] = true,
                _a[_this._className + "-text-active"] = isActive,
                _a);
            var bottomStyle = {
                marginBottom: '-50%',
                bottom: ((point - _this._min) / _this._range) * 100 + "%"
            };
            var leftStyle = {
                width: _this._markWidth + "%",
                marginLeft: -_this._markWidth / 2 + "%",
                left: ((point - _this._min) / _this._range) * 100 + "%"
            };
            var style = leftStyle;
            var markStyle = markPointIsObject ? __assign(__assign({}, style), markPoint.style) : style;
            markItem.markLabel = markLabel;
            markItem.point = point;
            markItem.className = Object.keys(markClassName).join(' ');
            markItem.style = markStyle;
            _this.markArray.push(markItem);
        });
    };
    SliderMarksComponent.prototype.setActiveCls = function () {
        var _a;
        for (var i = 0; i < this.markArray.length; i++) {
            var point = this.markArray[i].point;
            var isActive = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.markArray[i].className = (_a = {},
                _a[this._className + "-text"] = true,
                _a[this._className + "-text-active"] = isActive,
                _a);
        }
    };
    SliderMarksComponent.prototype.setMarksLable = function () {
        for (var i = 0; i < this.markArray.length; i++) {
            var markEle = this._elf.nativeElement.getElementsByClassName(this._className + '-text')[i];
            markEle.innerHTML = this.markArray[i].markLabel;
        }
    };
    SliderMarksComponent.prototype.ngOnInit = function () {
        var marksKeys = Object.keys(this._marks);
        var marksCount = marksKeys.length;
        var unit = marksCount > 1 ? 100 / (marksCount - 1) : 100;
        this._markWidth = unit * 0.9;
        this._range = this._max - this._min;
        this.getMarks(marksKeys);
    };
    SliderMarksComponent.prototype.ngAfterViewInit = function () {
        this.setMarksLable();
    };
    SliderMarksComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderMarksComponent.prototype, "min", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderMarksComponent.prototype, "max", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SliderMarksComponent.prototype, "marks", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SliderMarksComponent.prototype, "included", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderMarksComponent.prototype, "upperBound", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderMarksComponent.prototype, "lowerBound", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SliderMarksComponent.prototype, "onChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], SliderMarksComponent.prototype, "onAfterChange", void 0);
    __decorate([
        HostBinding(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SliderMarksComponent.prototype, "class", null);
    SliderMarksComponent = __decorate([
        Component({
            selector: 'SliderMarks, nzm-slider-marks',
            template: "<span *ngFor=\"let item of markArray\" [ngClass]=\"item.className\" [ngStyle]=\"item.style\"> </span>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SliderMarksComponent);
    return SliderMarksComponent;
}());
export { SliderMarksComponent };
//# sourceMappingURL=data:application/json;base64,