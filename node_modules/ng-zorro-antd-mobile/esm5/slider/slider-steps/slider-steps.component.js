import { __assign, __decorate, __metadata } from "tslib";
import { Component, OnInit, ElementRef, Input, HostBinding, ViewEncapsulation } from '@angular/core';
var SliderStepsComponent = /** @class */ (function () {
    function SliderStepsComponent(_elf) {
        this._elf = _elf;
        this.prefixCls = 'am-slider';
        this.stepArray = [];
        this._min = 0;
        this._max = 100;
        this._marks = {};
        this._included = true;
        this._dots = false;
    }
    Object.defineProperty(SliderStepsComponent.prototype, "min", {
        set: function (value) {
            if (value && value <= this._max) {
                this._min = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "max", {
        set: function (value) {
            if (value && value >= this._min) {
                this._max = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "marks", {
        set: function (value) {
            this._marks = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "step", {
        set: function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "included", {
        set: function (value) {
            this._included = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "dots", {
        set: function (value) {
            this._dots = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "upperBound", {
        set: function (value) {
            if (value !== undefined && value !== this._upperBound) {
                this._upperBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "lowerBound", {
        set: function (value) {
            if (value !== undefined && value !== this.lowerBound) {
                this._lowerBound = value;
                this.setActiveCls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderStepsComponent.prototype, "class", {
        get: function () {
            return 'am-slider-step';
        },
        enumerable: true,
        configurable: true
    });
    SliderStepsComponent.prototype.calPoints = function () {
        var points = Object.keys(this._marks).map(parseFloat);
        if (this._dots) {
            for (var i = this._min; i <= this._max; i = i + this._step) {
                if (points.indexOf(i) < 0) {
                    points.push(i);
                }
            }
        }
        return points;
    };
    SliderStepsComponent.prototype.getSteps = function (points) {
        var _this = this;
        var range = this._max - this._min;
        this.stepArray = [];
        points.map(function (point) {
            var _a;
            var stepItem = {
                stepStyle: {},
                stepClass: {},
                point: null
            };
            var offset = (Math.abs(point - _this._min) / range) * 100 + "%";
            var isActived = (!_this._included && point === _this._upperBound) ||
                (_this._included && point <= _this._upperBound && point >= _this._lowerBound);
            var style = __assign({ left: offset }, _this._dotStyle);
            if (isActived) {
                style = __assign(__assign({}, style), _this._activeDotStyle);
            }
            var pointClassName = (_a = {},
                _a[_this.prefixCls + "-dot"] = true,
                _a[_this.prefixCls + "-dot-active"] = isActived,
                _a);
            stepItem.point = point;
            stepItem.stepStyle = style;
            stepItem.stepClass = pointClassName;
            _this.stepArray.push(stepItem);
        });
    };
    SliderStepsComponent.prototype.setActiveCls = function () {
        var _a;
        for (var i = 0; i < this.stepArray.length; i++) {
            var point = this.stepArray[i].point;
            var isActived = (!this._included && point === this._upperBound) ||
                (this._included && point <= this._upperBound && point >= this._lowerBound);
            this.stepArray[i].stepClass = (_a = {},
                _a[this.prefixCls + "-dot"] = true,
                _a[this.prefixCls + "-dot-active"] = isActived,
                _a);
        }
    };
    SliderStepsComponent.prototype.ngOnInit = function () {
        var points = this.calPoints();
        this.getSteps(points);
    };
    SliderStepsComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderStepsComponent.prototype, "min", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderStepsComponent.prototype, "max", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], SliderStepsComponent.prototype, "marks", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderStepsComponent.prototype, "step", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SliderStepsComponent.prototype, "included", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SliderStepsComponent.prototype, "dots", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderStepsComponent.prototype, "upperBound", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], SliderStepsComponent.prototype, "lowerBound", null);
    __decorate([
        HostBinding(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SliderStepsComponent.prototype, "class", null);
    SliderStepsComponent = __decorate([
        Component({
            selector: 'SliderSteps, nzm-slider-steps',
            template: "<span *ngFor=\"let item of stepArray\" [ngClass]=\"item.stepClass\" [ngStyle]=\"item.stepStyle\"> </span>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], SliderStepsComponent);
    return SliderStepsComponent;
}());
export { SliderStepsComponent };
//# sourceMappingURL=data:application/json;base64,