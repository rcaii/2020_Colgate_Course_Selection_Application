import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, Output, ElementRef, HostListener, EventEmitter, Renderer2, TemplateRef, AfterViewInit } from '@angular/core';
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this.prefixCls = 'am-button';
        this.ngTemplate = false;
        this._className = '';
        this._classList = [];
        this._size = 'large';
        this._loading = false;
        this._active = false;
        this._inline = false;
        this._disabled = false;
        this._icon = '';
        this._userAgent = navigator.userAgent || navigator.vendor || window.opera;
        this.onClick = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, this.prefixCls);
        this._className = this._el.className;
    }
    Object.defineProperty(ButtonComponent.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (value) {
            this._size = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "loading", {
        get: function () {
            return this._loading;
        },
        set: function (value) {
            this._loading = value;
            if (this._el.querySelector('icon')) {
                var icon = this._el.querySelector('icon');
                icon.style.display = value ? '' : 'none';
            }
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "inline", {
        get: function () {
            return this._inline;
        },
        set: function (value) {
            this._inline = value;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            if (value instanceof TemplateRef) {
                this.ngTemplate = true;
                this._icon = value;
            }
            else {
                this.ngTemplate = false;
                this._icon = value;
                this.setClassMap();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "className", {
        set: function (v) {
            this._className = this._className + ' ' + v;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    ButtonComponent.prototype.touchStart = function (event) {
        if (this._disabled) {
            return;
        }
        this._active = true;
        this.setClassMap();
    };
    ButtonComponent.prototype.touchEnd = function (event) {
        if (this._disabled) {
            return;
        }
        this._active = false;
        this.setClassMap();
    };
    ButtonComponent.prototype.click = function (event) {
        if (this._disabled) {
            return;
        }
        this.onClick.emit();
    };
    ButtonComponent.prototype.isTemplateRef = function (value) {
        if (value) {
            return value instanceof TemplateRef;
        }
        return false;
    };
    ButtonComponent.prototype.ngAfterViewInit = function () {
        if (this._el.querySelector('img')) {
            var amSize = this._size === 'small' ? 'am-icon-xxs' : 'am-icon-md';
            this._el.querySelector('img').setAttribute('class', "am-icon " + this.prefixCls + "-icon " + amSize);
            this._render.addClass(this._el, this.prefixCls + "-icon");
        }
    };
    ButtonComponent.prototype.setClassMap = function () {
        this.iconType = this._loading ? 'loading' : this._icon;
        this._classList = [
            this._type && this.prefixCls + "-" + this._type,
            this._size === 'small' && this.prefixCls + "-" + this._size,
            this._disabled && this.prefixCls + "-disabled",
            this._loading && this.prefixCls + "-loading",
            this.iconType && this.prefixCls + "-icon",
            this._active && this.prefixCls + "-active",
            this._inline && this.prefixCls + "-inline"
        ].filter(function (item) {
            return !!item;
        });
        this._el.className = this._className + ' ' + this._classList.join(' ');
    };
    ButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ButtonComponent.prototype, "type", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ButtonComponent.prototype, "size", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ButtonComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ButtonComponent.prototype, "loading", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ButtonComponent.prototype, "inline", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ButtonComponent.prototype, "icon", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], ButtonComponent.prototype, "className", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ButtonComponent.prototype, "onClick", void 0);
    __decorate([
        HostListener('touchstart', ['$event']),
        HostListener('mousedown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ButtonComponent.prototype, "touchStart", null);
    __decorate([
        HostListener('touchend', ['$event']),
        HostListener('mouseup', ['$event']),
        HostListener('touchmove', ['$event']),
        HostListener('mousemove', ['$event']),
        HostListener('touchcancel', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ButtonComponent.prototype, "touchEnd", null);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ButtonComponent.prototype, "click", null);
    ButtonComponent = __decorate([
        Component({
            selector: '[Button], nzm-button',
            encapsulation: ViewEncapsulation.None,
            template: "<Icon\n  *ngIf=\"!ngTemplate\"\n  class=\"{{ prefixCls }}-icon\"\n  [type]=\"iconType\"\n  [size]=\"size === 'small' ? 'xxs' : 'md'\"\n></Icon>\n<ng-template *ngIf=\"ngTemplate\" [ngTemplateOutlet]=\"icon\"></ng-template>\n<ng-content select=\"img\"></ng-content>\n<div class=\"{{ prefixCls }}-content\">\n  <span>\n    <ng-content></ng-content>\n  </span>\n</div>\n"
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], ButtonComponent);
    return ButtonComponent;
}());
export { ButtonComponent };
//# sourceMappingURL=data:application/json;base64,