import { __decorate, __metadata } from "tslib";
import { ContentChildren, Component, QueryList, Input, forwardRef, HostListener, Output, EventEmitter, HostBinding } from '@angular/core';
import { AccordionService } from './accordion.service';
import { AccordionGroupComponent } from './accordion-group/accordion-group.component';
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(_accordionService) {
        this._accordionService = _accordionService;
        this.isFirstChange = true;
        this.expandAll = false;
        this.openAnimation = {};
        this.accordion = false;
        this.onChange = new EventEmitter();
        this.amAccordion = true;
        this._accordionService.getComponent(this);
    }
    AccordionComponent.prototype.click = function () {
        var _this = this;
        var result = [];
        this.groups.toArray().forEach(function (group) {
            if (group.isOpened) {
                if (_this.accordion) {
                    result = group.key;
                }
                else {
                    result.push(group.key);
                }
            }
        });
        this.onChange.emit(result);
    };
    AccordionComponent.prototype.closeAll = function () {
        this.groups.toArray().forEach(function (group) {
            group.isOpened = false;
        });
    };
    AccordionComponent.prototype.init = function () {
        var _this = this;
        if (this.expandAll && this.groups && this.groups.length > 0) {
            this._oldGroups = this.groups.toArray();
            this._oldGroups.forEach(function (group) {
                group.openOnInitialization();
            });
            this._subscription = this.groups.changes.subscribe(function (change) {
                var newGroups = _this.groups.toArray().filter(function (group) {
                    return _this._oldGroups.indexOf(group) === -1;
                });
                newGroups.forEach(function (group) {
                    group.openOnInitialization();
                });
                _this._oldGroups = _this.groups.toArray();
            });
        }
        var currentActiveKey = [];
        if (this.activeKey && this.activeKey.length > 0) {
            currentActiveKey = this.toArray(this.activeKey);
            if (this.accordion) {
                currentActiveKey = currentActiveKey.slice(0, 1);
            }
        }
        else if (this.defaultActiveKey) {
            currentActiveKey = [this.defaultActiveKey];
        }
        if (this.groups && this.groups.length > 0) {
            this.groups.forEach(function (group, index) {
                currentActiveKey.forEach(function (key) {
                    if (index === parseInt(key, 0)) {
                        setTimeout(function () {
                            group.isOpened = true;
                            group.openOnInitialization();
                        }, 0);
                    }
                });
            });
        }
    };
    AccordionComponent.prototype.toArray = function (activeKey) {
        var currentActiveKey = activeKey;
        if (!Array.isArray(currentActiveKey)) {
            currentActiveKey = currentActiveKey !== undefined && currentActiveKey !== '' ? [currentActiveKey] : [];
        }
        return currentActiveKey;
    };
    AccordionComponent.prototype.ngOnChanges = function (changes) {
        if (changes.accordion) {
            this._accordionService.getComponent(this);
        }
        if (changes.expandAll || changes.accordion) {
            this.init();
        }
    };
    AccordionComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.groups && this.groups.length > 0) {
            this.init();
        }
        else {
            this.groupsSubscription = this.groups.changes.subscribe(function (group) {
                if (_this.isFirstChange) {
                    _this.init();
                }
                _this.isFirstChange = false;
            });
        }
    };
    AccordionComponent.prototype.ngOnDestroy = function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
        if (this.groupsSubscription) {
            this.groupsSubscription.unsubscribe();
        }
    };
    AccordionComponent.ctorParameters = function () { return [
        { type: AccordionService }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return AccordionGroupComponent; })),
        __metadata("design:type", QueryList)
    ], AccordionComponent.prototype, "groups", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "expandAll", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "activeKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "defaultActiveKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "openAnimation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "accordion", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AccordionComponent.prototype, "onChange", void 0);
    __decorate([
        HostBinding('class.am-accordion'),
        __metadata("design:type", Boolean)
    ], AccordionComponent.prototype, "amAccordion", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], AccordionComponent.prototype, "click", null);
    AccordionComponent = __decorate([
        Component({
            selector: 'Accordion, nzm-accordion',
            template: "<ng-content></ng-content>\n",
            providers: [AccordionService]
        }),
        __metadata("design:paramtypes", [AccordionService])
    ], AccordionComponent);
    return AccordionComponent;
}());
export { AccordionComponent };
//# sourceMappingURL=data:application/json;base64,