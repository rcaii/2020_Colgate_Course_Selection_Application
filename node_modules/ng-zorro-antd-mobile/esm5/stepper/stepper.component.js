import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, HostBinding, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var StepperComponent = /** @class */ (function () {
    function StepperComponent() {
        this.prefixCls = 'am-stepper';
        this._max = Infinity;
        this._min = -Infinity;
        this._step = 1;
        this._disabled = false;
        this._readOnly = false;
        this._showNumber = false;
        this._upDisabled = false;
        this._downDisabled = false;
        this._isUpClick = false;
        this._isDownClick = false;
        this.onChange = new EventEmitter();
        this.clsStepper = true;
        this.clsStpDisabled = this._disabled;
        this.clsShowNum = this._showNumber;
        this.onChangeFn = function () { };
        this.onTouchFn = function () { };
    }
    StepperComponent_1 = StepperComponent;
    Object.defineProperty(StepperComponent.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "step", {
        set: function (value) {
            this._step = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "defaultValue", {
        set: function (value) {
            if (value) {
                this._defaultValue = value;
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value) {
                this._downDisabled = value;
                this._upDisabled = value;
            }
            this._disabled = value;
            this.clsStpDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "readOnly", {
        get: function () {
            return this._readOnly;
        },
        set: function (value) {
            this._readOnly = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "showNumber", {
        set: function (value) {
            this._showNumber = value;
            this.clsShowNum = value;
        },
        enumerable: true,
        configurable: true
    });
    StepperComponent.prototype.onIncrease = function () {
        var _this = this;
        if (!this._upDisabled) {
            this._value = this.plus(this._value, this._step);
            this.onChange.emit(this._value);
            this.onChangeFn(this._value);
            if (this.plus(this._value, this._step) > this._max) {
                this._upDisabled = true;
            }
            if (this.minus(this._value, this._step) >= this._min) {
                this._downDisabled = false;
            }
            this._isUpClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isUpClick = false;
                _this.setCls();
            }, 100);
        }
    };
    StepperComponent.prototype.onDecrease = function () {
        var _this = this;
        if (!this._downDisabled) {
            this._value = this.minus(this._value, this._step);
            this.onChange.emit(this._value);
            this.onChangeFn(this._value);
            if (this.minus(this._value, this._step) < this._min) {
                this._downDisabled = true;
            }
            if (this.plus(this._value, this._step) <= this._max) {
                this._upDisabled = false;
            }
            this._isDownClick = true;
            this.setCls();
            setTimeout(function () {
                _this._isDownClick = false;
                _this.setCls();
            }, 100);
        }
    };
    StepperComponent.prototype.inputChange = function (event) {
        var value = event;
        this._value = value ? +value : 0;
        if (this._value < this._min) {
            this._value = this._min;
        }
        if (this._value > this._max) {
            this._value = this._max;
        }
        this._upDisabled = this.plus(this._value, this._step) > this._max ? true : false;
        this._downDisabled = this.minus(this._value, this._step) < this._min ? true : false;
        this.setCls();
        this.onChange.emit(this._value);
        this.onChangeFn(this._value);
    };
    StepperComponent.prototype.setCls = function () {
        var _a, _b;
        this.upDisableCls = (_a = {},
            _a[this.prefixCls + "-handler-up-disabled"] = this._upDisabled,
            _a[this.prefixCls + "-handler-active"] = this._isUpClick,
            _a);
        this.downDisableCls = (_b = {},
            _b[this.prefixCls + "-handler-down-disabled"] = this._downDisabled,
            _b[this.prefixCls + "-handler-active"] = this._isDownClick,
            _b);
    };
    StepperComponent.prototype.ngOnChanges = function () {
        if (this._disabled) {
            this._downDisabled = true;
            this._upDisabled = true;
        }
        else {
            this._upDisabled = this.plus(this._value, this._step) > this._max ? true : false;
            this._downDisabled = this.minus(this._value, this._step) < this._min ? true : false;
        }
        this.setCls();
    };
    StepperComponent.prototype.writeValue = function (value) {
        this._value = value;
        this.ngOnChanges();
    };
    StepperComponent.prototype.registerOnChange = function (fn) {
        this.onChangeFn = fn;
    };
    StepperComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchFn = fn;
    };
    StepperComponent.prototype.plus = function (num1, num2) {
        if (num1 === undefined || num1 === null || num2 === undefined || num2 === null) {
            return;
        }
        var baseNum = Math.pow(10, Math.max(this.digitLength(num1), this.digitLength(num2)));
        return (this.times(num1, baseNum) + this.times(num2, baseNum)) / baseNum;
    };
    StepperComponent.prototype.minus = function (num1, num2) {
        if (num1 === undefined || num1 === null || num2 === undefined || num2 === null) {
            return;
        }
        var baseNum = Math.pow(10, Math.max(this.digitLength(num1), this.digitLength(num2)));
        return (this.times(num1, baseNum) - this.times(num2, baseNum)) / baseNum;
    };
    StepperComponent.prototype.digitLength = function (num) {
        var eSplit = num.toString().split(/[eE]/);
        var len = (eSplit[0].split('.')[1] || '').length - +(eSplit[1] || 0);
        return len > 0 ? len : 0;
    };
    StepperComponent.prototype.times = function (num1, num2) {
        var num1Changed = this.floatToFixed(num1);
        var num2Changed = this.floatToFixed(num2);
        var baseNum = this.digitLength(num1) + this.digitLength(num2);
        var leftValue = num1Changed * num2Changed;
        return leftValue / Math.pow(10, baseNum);
    };
    StepperComponent.prototype.floatToFixed = function (num) {
        if (num.toString().indexOf('e') === -1) {
            return Number(num.toString().replace('.', ''));
        }
        var dLen = this.digitLength(num);
        return dLen > 0 ? this.strip(num * Math.pow(10, dLen)) : num;
    };
    StepperComponent.prototype.strip = function (num, precision) {
        if (precision === void 0) { precision = 12; }
        return +parseFloat(num.toPrecision(precision));
    };
    var StepperComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], StepperComponent.prototype, "max", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], StepperComponent.prototype, "min", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], StepperComponent.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StepperComponent.prototype, "step", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StepperComponent.prototype, "defaultValue", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], StepperComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], StepperComponent.prototype, "readOnly", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], StepperComponent.prototype, "showNumber", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StepperComponent.prototype, "onChange", void 0);
    __decorate([
        HostBinding('class.am-stepper'),
        __metadata("design:type", Boolean)
    ], StepperComponent.prototype, "clsStepper", void 0);
    __decorate([
        HostBinding('class.am-stepper-disabled'),
        __metadata("design:type", Boolean)
    ], StepperComponent.prototype, "clsStpDisabled", void 0);
    __decorate([
        HostBinding('class.showNumber'),
        __metadata("design:type", Boolean)
    ], StepperComponent.prototype, "clsShowNum", void 0);
    StepperComponent = StepperComponent_1 = __decorate([
        Component({
            selector: 'Stepper, nzm-stepper',
            template: "<div class=\"{{ prefixCls }}-handler-wrap\">\n  <span\n    role=\"button\"\n    class=\"{{ prefixCls }}-handler {{ prefixCls }}-handler-up\"\n    style=\"line-height:28px;\"\n    [ngClass]=\"upDisableCls\"\n    (click)=\"onIncrease()\"\n  >\n    <Icon [type]=\"'plus'\" [size]=\"'xxs'\"> </Icon>\n  </span>\n  <span\n    role=\"button\"\n    class=\"{{ prefixCls }}-handler {{ prefixCls }}-handler-down\"\n    style=\"line-height:28px;\"\n    [ngClass]=\"downDisableCls\"\n    (click)=\"onDecrease()\"\n  >\n    <Icon [type]=\"'minus'\" [size]=\"'xxs'\"> </Icon>\n  </span>\n</div>\n<div class=\"{{ prefixCls }}-input-wrap\">\n  <input\n    class=\"{{ prefixCls }}-input\"\n    style=\"outline:none\"\n    [disabled]=\"disabled\"\n    [readonly]=\"readOnly\"\n    [autocomplete]=\"'off'\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"inputChange($event)\"\n  />\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return StepperComponent_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [])
    ], StepperComponent);
    return StepperComponent;
}());
export { StepperComponent };
//# sourceMappingURL=data:application/json;base64,