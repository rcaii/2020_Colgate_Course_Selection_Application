import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
var PaginationComponent = /** @class */ (function () {
    function PaginationComponent(_localeProviderService) {
        this._localeProviderService = _localeProviderService;
        this.prefixCls = 'am-pagination';
        this.hasSetLocale = false;
        this._locale = {
            prevText: '',
            nextText: ''
        };
        this._unsubscribe$ = new Subject();
        this.mode = 'button';
        this.current = 1;
        this.total = 0;
        this.simple = false;
        this.disabled = false;
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(PaginationComponent.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        set: function (v) {
            this._locale = v;
            this.hasSetLocale = true;
            this._unsubscribe$.next();
            this._unsubscribe$.complete();
        },
        enumerable: true,
        configurable: true
    });
    PaginationComponent.prototype.isTemplateRef = function (key) {
        return key instanceof TemplateRef;
    };
    PaginationComponent.prototype.onClick = function (p) {
        this.current = p;
        this.onChange.emit(p);
    };
    PaginationComponent.prototype.getNumber = function (p) {
        return new Array(p);
    };
    PaginationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._localeProviderService.localeChange.pipe(takeUntil(this._unsubscribe$)).subscribe(function (_) {
            if (!_this.hasSetLocale) {
                _this._locale = _this._localeProviderService.getLocaleSubObj('Pagination');
            }
        });
    };
    PaginationComponent.prototype.ngOnDestroy = function () {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
    };
    PaginationComponent.ctorParameters = function () { return [
        { type: LocaleProviderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PaginationComponent.prototype, "mode", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PaginationComponent.prototype, "current", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], PaginationComponent.prototype, "total", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PaginationComponent.prototype, "simple", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PaginationComponent.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PaginationComponent.prototype, "locale", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PaginationComponent.prototype, "onChange", void 0);
    PaginationComponent = __decorate([
        Component({
            selector: 'Pagination, nzm-pagination',
            template: "<div class=\"{{ prefixCls }} {{ prefixCls }}-align-center\">\n  <Flex *ngIf=\"mode === 'button'\">\n    <FlexItem class=\"{{ prefixCls }}-wrap-btn {{ prefixCls }}-wrap-btn-prev\">\n      <a Button [inline]=\"true\" [disabled]=\"current <= 1\" (onClick)=\"onClick(current - 1)\">\n        <ng-container *ngIf=\"!isTemplateRef(locale.prevText)\">\n          {{ locale.prevText }}\n        </ng-container>\n        <ng-template *ngIf=\"isTemplateRef(locale.prevText)\" [ngTemplateOutlet]=\"locale.prevText\"></ng-template>\n      </a>\n    </FlexItem>\n    <FlexItem class=\"{{ prefixCls }}-wrap\" aria-live=\"assertive\" *ngIf=\"!simple\">\n      <span class=\"active\">{{ current }}</span\n      >/\n      <span>{{ total }}</span>\n    </FlexItem>\n    <FlexItem class=\"{{ prefixCls }}-wrap-btn {{ prefixCls }}-wrap-btn-next\">\n      <a Button [inline]=\"true\" [disabled]=\"current >= total\" (onClick)=\"onClick(current + 1)\">\n        <ng-container *ngIf=\"!isTemplateRef(locale.nextText)\">\n          {{ locale.nextText }}\n        </ng-container>\n        <ng-template *ngIf=\"isTemplateRef(locale.nextText)\" [ngTemplateOutlet]=\"locale.nextText\"></ng-template>\n      </a>\n    </FlexItem>\n  </Flex>\n\n  <div class=\"{{ prefixCls }}-wrap\" *ngIf=\"mode === 'number'\">\n    <span class=\"active\">{{ current }}</span\n    >/<span>{{ total }}</span>\n  </div>\n\n  <div class=\"{{ prefixCls }}-wrap\" *ngIf=\"mode === 'pointer'\">\n    <div\n      *ngFor=\"let number of getNumber(total); let i = index\"\n      class=\"{{ prefixCls }}-wrap-dot {{ current === i + 1 ? prefixCls + '-wrap-dot-active' : '' }}\"\n    >\n      <span></span>\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [LocaleProviderService])
    ], PaginationComponent);
    return PaginationComponent;
}());
export { PaginationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInBhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsaUJBQWlCLEVBQ2pCLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQVduRjtJQWlDRSw2QkFBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7UUFoQ2pFLGNBQVMsR0FBRyxlQUFlLENBQUM7UUFFcEIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFDckIsWUFBTyxHQUFnQjtZQUM3QixRQUFRLEVBQUUsRUFBRTtZQUNaLFFBQVEsRUFBRSxFQUFFO1NBQ2IsQ0FBQztRQUNNLGtCQUFhLEdBQWtCLElBQUksT0FBTyxFQUFRLENBQUM7UUFHM0QsU0FBSSxHQUFXLFFBQVEsQ0FBQztRQUV4QixZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLFVBQUssR0FBVyxDQUFDLENBQUM7UUFFbEIsV0FBTSxHQUFZLEtBQUssQ0FBQztRQUV4QixhQUFRLEdBQVksS0FBSyxDQUFDO1FBWTFCLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUVjLENBQUM7SUFackUsc0JBQUksdUNBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO2FBQ0QsVUFBVyxDQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLENBQUM7OztPQU5BO0lBWUQsMkNBQWEsR0FBYixVQUFjLEdBQUc7UUFDZixPQUFZLEdBQUcsWUFBWSxXQUFXLENBQUM7SUFDekMsQ0FBQztJQUVELHFDQUFPLEdBQVAsVUFBUSxDQUFTO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELHVDQUFTLEdBQVQsVUFBVSxDQUFTO1FBQ2pCLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFBQSxpQkFNQztRQUxDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDO1lBQ3RGLElBQUksQ0FBQyxLQUFJLENBQUMsWUFBWSxFQUFFO2dCQUN0QixLQUFJLENBQUMsT0FBTyxHQUFnQixLQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3ZGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQseUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQyxDQUFDOztnQkExQjJDLHFCQUFxQjs7SUF0QmpFO1FBREMsS0FBSyxFQUFFOztxREFDZ0I7SUFFeEI7UUFEQyxLQUFLLEVBQUU7O3dEQUNZO0lBRXBCO1FBREMsS0FBSyxFQUFFOztzREFDVTtJQUVsQjtRQURDLEtBQUssRUFBRTs7dURBQ2dCO0lBRXhCO1FBREMsS0FBSyxFQUFFOzt5REFDa0I7SUFFMUI7UUFEQyxLQUFLLEVBQUU7OztxREFHUDtJQVFEO1FBREMsTUFBTSxFQUFFO2tDQUNDLFlBQVk7eURBQWdDO0lBL0IzQyxtQkFBbUI7UUFML0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDRCQUE0QjtZQUN0Qyw0cERBQTBDO1lBQzFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1NBQ3RDLENBQUM7eUNBa0M0QyxxQkFBcUI7T0FqQ3RELG1CQUFtQixDQTREL0I7SUFBRCwwQkFBQztDQUFBLEFBNURELElBNERDO1NBNURZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBUZW1wbGF0ZVJlZixcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTG9jYWxlUHJvdmlkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL2xvY2FsZS1wcm92aWRlci5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIExvY2FsZVZhbHVlIHtcbiAgcHJldlRleHQ6IHN0cmluZztcbiAgbmV4dFRleHQ6IHN0cmluZztcbn1cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1BhZ2luYXRpb24sIG56bS1wYWdpbmF0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BhZ2luYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByZWZpeENscyA9ICdhbS1wYWdpbmF0aW9uJztcblxuICBwcml2YXRlIGhhc1NldExvY2FsZSA9IGZhbHNlO1xuICBwcml2YXRlIF9sb2NhbGU6IExvY2FsZVZhbHVlID0ge1xuICAgIHByZXZUZXh0OiAnJyxcbiAgICBuZXh0VGV4dDogJydcbiAgfTtcbiAgcHJpdmF0ZSBfdW5zdWJzY3JpYmUkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBASW5wdXQoKVxuICBtb2RlOiBzdHJpbmcgPSAnYnV0dG9uJztcbiAgQElucHV0KClcbiAgY3VycmVudDogbnVtYmVyID0gMTtcbiAgQElucHV0KClcbiAgdG90YWw6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgpXG4gIHNpbXBsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBnZXQgbG9jYWxlKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gIH1cbiAgc2V0IGxvY2FsZSh2KSB7XG4gICAgdGhpcy5fbG9jYWxlID0gdjtcbiAgICB0aGlzLmhhc1NldExvY2FsZSA9IHRydWU7XG4gICAgdGhpcy5fdW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLl91bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxuICBAT3V0cHV0KClcbiAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbG9jYWxlUHJvdmlkZXJTZXJ2aWNlOiBMb2NhbGVQcm92aWRlclNlcnZpY2UpIHt9XG5cbiAgaXNUZW1wbGF0ZVJlZihrZXkpIHtcbiAgICByZXR1cm4gPGFueT5rZXkgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcbiAgfVxuXG4gIG9uQ2xpY2socDogbnVtYmVyKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gcDtcbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQocCk7XG4gIH1cblxuICBnZXROdW1iZXIocDogbnVtYmVyKTogQXJyYXk8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShwKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuX2xvY2FsZVByb3ZpZGVyU2VydmljZS5sb2NhbGVDaGFuZ2UucGlwZSh0YWtlVW50aWwodGhpcy5fdW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgaWYgKCF0aGlzLmhhc1NldExvY2FsZSkge1xuICAgICAgICB0aGlzLl9sb2NhbGUgPSA8TG9jYWxlVmFsdWU+dGhpcy5fbG9jYWxlUHJvdmlkZXJTZXJ2aWNlLmdldExvY2FsZVN1Yk9iaignUGFnaW5hdGlvbicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fdW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLl91bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19