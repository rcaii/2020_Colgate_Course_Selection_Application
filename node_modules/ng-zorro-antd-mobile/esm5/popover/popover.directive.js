import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ComponentRef, OnDestroy, ElementRef, OnInit, Injector, ComponentFactoryResolver, Renderer2, TemplateRef, ComponentFactory, OnChanges, SimpleChanges } from '@angular/core';
import { PopoverComponent } from './popover.component';
import { PopoverOptions } from './popover-options.provider';
import { PopoverComponentOptions } from './popover-component-options.provider';
import * as Positioning from '../core/util/position';
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_viewContainerRef, _elm, _defaultOptions, _cfr, _renderer) {
        this._viewContainerRef = _viewContainerRef;
        this._elm = _elm;
        this._defaultOptions = _defaultOptions;
        this._cfr = _cfr;
        this._renderer = _renderer;
        this._eventListeners = [];
        this.onVisibleChange = new EventEmitter(true);
        this.onSelect = new EventEmitter();
    }
    PopoverDirective.prototype.togglePopover = function () {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    };
    PopoverDirective.prototype.positionMap = function (placement) {
        switch (placement) {
            case 'topLeft':
                return 'top-left';
            case 'topRight':
                return 'top-right';
            case 'bottomLeft':
                return 'bottom-left';
            case 'bottomRight':
                return 'bottom-right';
            case 'leftTop':
                return 'left-top';
            case 'leftBottom':
                return 'left-bottom';
            case 'rightTop':
                return 'right-top';
            case 'rightBottom':
                return 'right-bottom';
            case 'fullScreen':
            case 'landScape':
                return 'bottom';
            default:
                return placement;
        }
    };
    PopoverDirective.prototype.ngOnInit = function () { };
    PopoverDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.visible && changes.visible.currentValue) {
            setTimeout(function () {
                _this.showPopover();
            }, 0);
        }
        else {
            setTimeout(function () {
                _this.hidePopover();
            }, 0);
        }
    };
    PopoverDirective.prototype.ngOnDestroy = function () {
        this.hidePopover();
    };
    PopoverDirective.prototype.onDocumentClick = function (event) {
        if (this.popover &&
            !this._elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target)) {
            this.hidePopover();
        }
    };
    PopoverDirective.prototype.showPopover = function () {
        var _this = this;
        if (!this.popover) {
            setTimeout(function () {
                _this._eventListeners = [
                    _this._renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),
                    _this._renderer.listen('window', 'resize', function () { return _this.positionPopover(); })
                ];
            });
            var options_1 = new PopoverComponentOptions();
            options_1.placement = this.placement;
            Object.assign(options_1, this._defaultOptions, {
                hidePopover: function (event) {
                    _this.hidePopover();
                },
                onAfterViewInit: function () {
                    _this.positionPopover();
                    var children = document.getElementsByClassName('am-popover-inner-wrapper')[0].children;
                    if (children.length > 0) {
                        var _loop_1 = function (i) {
                            children[i].id = "" + i;
                            children[i].addEventListener('click', function () {
                                if (_this.onSelect) {
                                    _this.onSelect.emit(children[i]);
                                    if (options_1.autoClose) {
                                        _this.hidePopover();
                                    }
                                }
                            }, false);
                        };
                        // 首先我们检查它是否包含子节点
                        for (var i = 0; i < children.length; i++) {
                            _loop_1(i);
                        }
                    }
                }
            });
            var optionalParams = [
                'mask',
                'showArrow',
                'placement',
                'appendToBody',
                'overlay',
                'className',
                'autoClose'
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    options_1[param] = _this[param];
                }
            });
            var componentFactory = this._cfr.resolveComponentFactory(PopoverComponent);
            var childInjector = Injector.create([
                {
                    provide: PopoverComponentOptions,
                    useValue: options_1
                }
            ], this._viewContainerRef.parentInjector);
            this.popover = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                this.appendToBodyElement = document.body.appendChild(this.popover.location.nativeElement);
            }
            this.onVisibleChange.emit(true);
        }
    };
    PopoverDirective.prototype.positionPopover = function () {
        if (this.popover) {
            var popoverElement = this.popover.location.nativeElement.children[1];
            var popoverPosition = Positioning.getPositionElements(this._elm.nativeElement, popoverElement, this.positionMap(this.placement) || this._defaultOptions.placement, this.appendToBody || this._defaultOptions.appendToBody);
            if (this.placement === 'landScape') {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else if (this.placement === 'fullScreen') {
                this._renderer.setStyle(popoverElement, 'top', 0 + "px");
                this._renderer.setStyle(popoverElement, 'left', "0px");
                this._renderer.setStyle(popoverElement, 'width', window.innerWidth + "px");
                this._renderer.setStyle(popoverElement, 'max-height', window.innerHeight - popoverPosition.height + "px");
            }
            else {
                this._renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                this._renderer.setStyle(popoverElement, 'left', popoverPosition.left + "px");
            }
        }
    };
    PopoverDirective.prototype.hidePopover = function () {
        if (this.appendToBodyElement) {
            document.body.removeChild(this.appendToBodyElement);
            this.appendToBodyElement = null;
        }
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.onVisibleChange.emit(false);
            this._eventListeners.forEach(function (fn) { return fn(); });
            this._eventListeners = [];
        }
    };
    PopoverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: PopoverOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PopoverDirective.prototype, "mask", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PopoverDirective.prototype, "showArrow", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PopoverDirective.prototype, "visible", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "placement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", TemplateRef)
    ], PopoverDirective.prototype, "overlay", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "onVisibleChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "onSelect", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PopoverDirective.prototype, "appendToBody", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "className", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], PopoverDirective.prototype, "autoClose", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PopoverDirective.prototype, "togglePopover", null);
    PopoverDirective = __decorate([
        Directive({
            selector: '[Popover], [nzm-popover]',
            providers: [PopoverOptions]
        }),
        __metadata("design:paramtypes", [ViewContainerRef,
            ElementRef,
            PopoverOptions,
            ComponentFactoryResolver,
            Renderer2])
    ], PopoverDirective);
    return PopoverDirective;
}());
export { PopoverDirective };
//# sourceMappingURL=data:application/json;base64,