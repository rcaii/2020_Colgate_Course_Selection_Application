import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { IconHandler } from '../core/util/icon';
import * as util from './util';
var NoticeBarComponent = /** @class */ (function () {
    function NoticeBarComponent(_iconHandler) {
        this._iconHandler = _iconHandler;
        this.visiable = false;
        this.marqueeScroll = 'scrolling';
        this.style = {};
        this._option = {
            mode: '',
            icon: '',
            action: '',
            content: '',
            fontSize: '14px',
            scrolling: true,
            marqueeProps: { loop: true, leading: 500, trailing: 8000, fps: 200, style: {} }
        };
        this.onClick = new EventEmitter();
        this._iconHandler.load();
    }
    Object.defineProperty(NoticeBarComponent.prototype, "option", {
        get: function () {
            return this._option;
        },
        set: function (value) {
            Object.assign(this._option, value);
            this.dataProcess();
            if (this._option.scrolling) {
                this.marqueeScroll = 'scrolling';
            }
            else {
                this.marqueeScroll = 'scrolling-stop';
            }
        },
        enumerable: true,
        configurable: true
    });
    NoticeBarComponent.prototype.click = function () {
        this.onClick.emit(this._option.mode);
        if (this._option.mode === 'closable') {
            this.visiable = false;
        }
    };
    NoticeBarComponent.prototype.dataProcess = function () {
        this.visiable = true;
        this.style = {
            width: '200%'
        };
        this._width = util.getTextWidth(this._option.content, this._option.fontSize);
        if (util.getWidthHeight().width < this._width) {
            var count = this._option.marqueeProps.loop ? 'infinite' : 1;
            var animationName = "noticebarmarquee_" + this._width;
            this.style = {
                width: this._width * 2 + 'px',
                'animation-name': animationName,
                'animation-delay': this._option.marqueeProps.leading + "ms",
                'animation-duration': (((1 / this._option.marqueeProps.fps) * this._width) / util.getWidthHeight().width) *
                    1000 + "s",
                'animation-iteration-count': "" + count
            };
            this.marqueeScroll = 'scrolling';
            this.insetKeyframe(animationName);
        }
        else {
            this.marqueeScroll = 'scrolling-stop';
        }
    };
    NoticeBarComponent.prototype.insetKeyframe = function (animationName) {
        util.insertKeyFrame("@keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-webkit-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-moz-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
        util.insertKeyFrame("@-o-keyframes " + animationName + " {\n      0% { left: 0px; }\n      100% { left: -" + this._width + "px }\n    }", 'notice_bar_animation_cls');
    };
    NoticeBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        document.addEventListener('touchstart', function () {
            _this.marqueeScroll = 'scrolling-stop';
        });
        document.addEventListener('touchend', function () {
            _this.marqueeScroll = 'scrolling';
        });
    };
    NoticeBarComponent.prototype.ngOnDestroy = function () {
        util.deleteKeyFrame('notice_bar_animation_cls');
    };
    NoticeBarComponent.ctorParameters = function () { return [
        { type: IconHandler }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NoticeBarComponent.prototype, "option", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NoticeBarComponent.prototype, "onClick", void 0);
    NoticeBarComponent = __decorate([
        Component({
            selector: 'NoticeBar, nzm-notice-bar',
            template: "<div role=\"alert\" *ngIf=\"visiable\" class=\"am-notice-bar\" (click)=\"click()\">\n  <div *ngIf=\"option.icon !== null\" class=\"am-notice-bar-icon\">\n    <ng-template [ngTemplateOutlet]=\"option.icon || voice\"></ng-template>\n  </div>\n  <div class=\"am-notice-bar-content\">\n    <div class=\"marquee\">\n      <div [ngClass]=\"marqueeScroll\" [ngStyle]=\"style\">\n        <span>{{ option.content }}</span>\n        <span>{{ option.content }}</span>\n      </div>\n    </div>\n  </div>\n  <div role=\"button\" *ngIf=\"option.mode && option.action !== null\" class=\"am-notice-bar-operation\">\n    <ng-template *ngIf=\"option.mode === 'closable'\" [ngTemplateOutlet]=\"option.action || cross\"></ng-template>\n    <ng-template *ngIf=\"option.mode === 'link'\" [ngTemplateOutlet]=\"option.action || right\"></ng-template>\n  </div>\n</div>\n\n<ng-template #voice>\n  <Icon [type]=\"'voice'\" [size]=\"'xxs'\"></Icon>\n</ng-template>\n<ng-template #cross>\n  <Icon [type]=\"'cross'\" [size]=\"'md'\"></Icon>\n</ng-template>\n<ng-template #right>\n  <Icon [type]=\"'right'\" [size]=\"'md'\"></Icon>\n</ng-template>\n",
            providers: [IconHandler]
        }),
        __metadata("design:paramtypes", [IconHandler])
    ], NoticeBarComponent);
    return NoticeBarComponent;
}());
export { NoticeBarComponent };
//# sourceMappingURL=data:application/json;base64,