import { __decorate, __metadata } from "tslib";
import { Component, Input, QueryList, Renderer2, ViewChild, ElementRef, HostBinding, AfterContentInit, ContentChildren, ChangeDetectorRef } from '@angular/core';
var DefaultTabBarComponent = /** @class */ (function () {
    function DefaultTabBarComponent(_renderer, _ref) {
        this._renderer = _renderer;
        this._ref = _ref;
        this.prefixCls = 'am-tabs-default-bar';
        this.inkBarStyle = {};
        this.tabsBarStyle = {};
        this.showPrev = false;
        this.showNext = false;
        this.selectedKey = 0;
        this.inkBarOffSet = 0;
        this.inkBarLength = 0;
        this.tabBarNavSwipedPosition = 0;
        this.tabBarNavSwipingPosition = 0;
        this._startPosition = 0;
        this.page = 5;
        this.animated = true;
        this.tabBarBackgroundColor = '#FFF';
        this.tabTitleSize = 0;
        this.tabBarPosition = 'top';
        this.tabBarWrap = true;
        this.getTabSize = function (page, tabLength) { return 100 / Math.min(page, tabLength); };
    }
    Object.defineProperty(DefaultTabBarComponent.prototype, "activeTab", {
        get: function () {
            return this.selectedKey;
        },
        set: function (index) {
            if (index !== this.selectedKey) {
                this.selectedKey = index;
                if (this.tabTitles && this.tabTitles.length > 0) {
                    this.setTabBarStyleCenter();
                    this.setInkBarStatus(this.selectedKey);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    DefaultTabBarComponent.prototype.onTouchStart = function (event) {
        if ((this.tabTitleSize > 0 &&
            this.tabTitleSize * this.tabTitles.length >
                ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition
                    ? this.tabsBarSwipe.nativeElement.offsetWidth
                    : this.tabsBarSwipe.nativeElement.offsetHeight)) ||
            (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientX;
            }
            else {
                this._startPosition =
                    event && event.changedTouches && event.changedTouches[0] && event.changedTouches[0].clientY;
            }
        }
    };
    DefaultTabBarComponent.prototype.onTouchMove = function (event) {
        event.preventDefault();
        event.stopPropagation();
        if ((this.tabTitleSize > 0 &&
            this.tabTitleSize * this.tabTitles.length >
                ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition
                    ? this.tabsBarSwipe.nativeElement.offsetWidth
                    : this.tabsBarSwipe.nativeElement.offsetHeight)) ||
            (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.setTabBarNavSwipingPosition(event.changedTouches[0].clientX - this._startPosition, this.tabTitles.first.nativeElement.offsetWidth, this.tabsBarSwipe.nativeElement.offsetWidth);
                this.tabsBarStyle = {
                    transition: '0ms',
                    transform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)',
                    webkitTransform: 'translate3d(' + this.tabBarNavSwipingPosition + 'px, 0px, 0px)'
                };
            }
            else {
                this.setTabBarNavSwipingPosition(event.changedTouches[0].clientY - this._startPosition, this.tabTitles.first.nativeElement.offsetHeight, this.tabsBarSwipe.nativeElement.offsetHeight);
                this.tabsBarStyle = {
                    transition: '0ms',
                    transform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)',
                    webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipingPosition + 'px, 0px)'
                };
            }
        }
    };
    DefaultTabBarComponent.prototype.onTouchEnd = function () {
        if ((this.tabTitleSize > 0 &&
            this.tabTitleSize * this.tabTitles.length >
                ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition
                    ? this.tabsBarSwipe.nativeElement.offsetWidth
                    : this.tabsBarSwipe.nativeElement.offsetHeight)) ||
            (this.tabTitleSize <= 0 && this.page < this.tabTitles.length)) {
            this.tabBarNavSwipedPosition = this.tabBarNavSwipingPosition;
        }
    };
    DefaultTabBarComponent.prototype.onContentChange = function () {
        this.setTabsStyle();
        this.setInkBarStatus(this.selectedKey);
    };
    DefaultTabBarComponent.prototype.ngAfterContentInit = function () {
        this.setTabsStyle();
        this.setTabBarStyleCenter();
        this.setInkBarStatus(this.selectedKey);
    };
    DefaultTabBarComponent.prototype.setTabsStyle = function () {
        var _this = this;
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.tabTitles.forEach(function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'width', _this.tabTitleSize > 0 ? _this.tabTitleSize + 'px' : _this.getTabSize(_this.page, _this.tabTitles.length) + '%');
                });
            }
            else {
                this.tabTitles.forEach(function (tabTitle) {
                    _this._renderer.setStyle(tabTitle.nativeElement, 'height', _this.tabTitleSize > 0 ? _this.tabTitleSize + 'px' : _this.getTabSize(_this.page, _this.tabTitles.length) + '%');
                });
            }
        }
    };
    DefaultTabBarComponent.prototype.setTabBarStyleCenter = function () {
        if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
            this.setTabBarNavSwipedPosition(this.tabTitleSize > 0
                ? this.tabTitleSize
                : this.tabsBarSwipe.nativeElement.offsetWidth / Math.min(this.tabTitles.length, this.page), this.tabsBarSwipe.nativeElement.offsetWidth);
            this.tabsBarStyle = {
                transform: 'translate3d(' + this.tabBarNavSwipedPosition + 'px, 0px, 0px)',
                webkitTransform: 'translate3d(' + this.tabBarNavSwipedPosition + ', 0px, 0px)'
            };
        }
        else {
            this.setTabBarNavSwipedPosition(this.tabTitleSize > 0
                ? this.tabTitleSize
                : this.tabsBarSwipe.nativeElement.offsetHeight / Math.min(this.tabTitles.length, this.page), this.tabsBarSwipe.nativeElement.offsetHeight);
            this.tabsBarStyle = {
                transform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)',
                webkitTransform: 'translate3d(0, ' + this.tabBarNavSwipedPosition + 'px, 0px)'
            };
        }
    };
    DefaultTabBarComponent.prototype.setInkBarStatus = function (key) {
        if (this.tabTitles && this.tabTitles.length > 0) {
            if ('top' === this.tabBarPosition || 'bottom' === this.tabBarPosition) {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetLeft;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.width;
                this.inkBarStyle = {
                    width: this.inkBarLength,
                    left: this.tabTitleSize > 0
                        ? this.selectedKey * this.tabTitleSize + 'px'
                        : (this.selectedKey * 100) / Math.min(this.tabTitles.length, this.page) + '%'
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
            else {
                this.inkBarOffSet = this.tabTitles.toArray()[key].nativeElement.offsetTop;
                this.inkBarLength = this.tabTitles.toArray()[key].nativeElement.style.height;
                this.inkBarStyle = {
                    height: this.inkBarLength,
                    top: this.tabTitleSize > 0
                        ? this.selectedKey * this.tabTitleSize + 'px'
                        : (this.selectedKey * 100) / Math.min(this.tabTitles.length, this.page) + '%'
                };
                Object.assign(this.inkBarStyle, this.tabBarUnderlineStyle);
            }
            this._ref.detectChanges();
        }
    };
    DefaultTabBarComponent.prototype.setTabBarNavSwipingPosition = function (swipingDistance, swipingItemLength, viewportLength) {
        if (this.tabBarNavSwipedPosition + swipingDistance > 0) {
            this.tabBarNavSwipingPosition = 0;
        }
        else if (this.tabBarNavSwipedPosition + swipingDistance <
            viewportLength - swipingItemLength * this.tabTitles.length) {
            this.tabBarNavSwipingPosition = viewportLength - swipingItemLength * this.tabTitles.length;
            this.showNext = false;
        }
        else {
            this.tabBarNavSwipingPosition = this.tabBarNavSwipedPosition + swipingDistance;
            this.showNext = true;
        }
        if (this.tabBarNavSwipingPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
    };
    DefaultTabBarComponent.prototype.setTabBarNavSwipedPosition = function (swipingItemLength, viewportLength) {
        if (this.selectedKey * swipingItemLength + this.tabBarNavSwipedPosition <= 0) {
            if (0 === this.selectedKey) {
                this.tabBarNavSwipedPosition = 0;
            }
            else {
                this.tabBarNavSwipedPosition = (1 - this.selectedKey) * swipingItemLength;
            }
        }
        else if ((this.selectedKey + 1) * swipingItemLength >= viewportLength - this.tabBarNavSwipedPosition) {
            if (this.tabTitles.length - 1 === this.selectedKey) {
                this.tabBarNavSwipedPosition = viewportLength - (this.selectedKey + 1) * swipingItemLength;
            }
            else {
                this.tabBarNavSwipedPosition = viewportLength - (this.selectedKey + 2) * swipingItemLength;
            }
        }
        if (this.tabBarNavSwipedPosition < 0) {
            this.showPrev = true;
        }
        else {
            this.showPrev = false;
        }
        if (this.tabBarNavSwipedPosition + swipingItemLength * this.tabTitles.length - viewportLength > 0) {
            this.showNext = true;
        }
        else {
            this.showNext = false;
        }
    };
    DefaultTabBarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ContentChildren('TabTitle'),
        __metadata("design:type", QueryList)
    ], DefaultTabBarComponent.prototype, "tabTitles", void 0);
    __decorate([
        ViewChild('TabsBarSwipe', { static: true }),
        __metadata("design:type", ElementRef)
    ], DefaultTabBarComponent.prototype, "tabsBarSwipe", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DefaultTabBarComponent.prototype, "page", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DefaultTabBarComponent.prototype, "animated", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DefaultTabBarComponent.prototype, "tabBarUnderlineStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DefaultTabBarComponent.prototype, "tabBarBackgroundColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DefaultTabBarComponent.prototype, "tabTitleSize", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DefaultTabBarComponent.prototype, "tabBarPosition", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], DefaultTabBarComponent.prototype, "activeTab", null);
    __decorate([
        HostBinding('class.am-tabs-tab-bar-wrap'),
        __metadata("design:type", Object)
    ], DefaultTabBarComponent.prototype, "tabBarWrap", void 0);
    DefaultTabBarComponent = __decorate([
        Component({
            selector: 'DefaultTabBar, nzm-default-tab-bar',
            template: "<div\n  class=\"{{ prefixCls }} {{ prefixCls }}-{{ tabBarPosition }}\"\n  [ngClass]=\"{ 'am-tabs-default-bar-animated': animated }\"\n  [ngStyle]=\"{ backgroundColor: tabBarBackgroundColor || '#FFF' }\"\n>\n  <div *ngIf=\"showPrev\" class=\"{{ prefixCls }}-prevpage\"></div>\n  <div\n    #TabsBarSwipe\n    class=\"{{ prefixCls }}-content\"\n    [ngStyle]=\"tabsBarStyle\"\n    (touchstart)=\"onTouchStart($event)\"\n    (touchmove)=\"onTouchMove($event)\"\n    (touchend)=\"onTouchEnd()\"\n    (cdkObserveContent)=\"onContentChange()\"\n  >\n    <ng-content></ng-content>\n    <div class=\"{{ prefixCls }}-underline\" [ngStyle]=\"inkBarStyle\"></div>\n  </div>\n  <div *ngIf=\"showNext\" class=\"{{ prefixCls }}-nextpage\"></div>\n</div>\n"
        }),
        __metadata("design:paramtypes", [Renderer2, ChangeDetectorRef])
    ], DefaultTabBarComponent);
    return DefaultTabBarComponent;
}());
export { DefaultTabBarComponent };
//# sourceMappingURL=data:application/json;base64,