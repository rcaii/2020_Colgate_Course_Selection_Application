import { __decorate, __metadata, __values } from "tslib";
import { Component, ContentChildren, HostBinding, Input, Output, HostListener, QueryList, EventEmitter, OnDestroy, ElementRef, AfterViewInit, ViewEncapsulation } from '@angular/core';
import { CarouselSlideComponent } from './carousel-slide/carousel-slide.component';
import * as touchEvent from '../core/util/touch-event';
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent(_ele) {
        this._ele = _ele;
        this.style = {
            height: 'auto',
            width: '100%',
            transform: 'translate3d(0px, 0px, 0px)',
            margin: ''
        };
        this.lastIndex = 0;
        this.currentSelectedIndex = 0;
        this._nodeArr = [];
        this._isMouseDown = false;
        this._rationWidth = 0;
        this._currentSlideWidth = 0;
        this._currentSlideHeight = 0;
        this._transition = '';
        this._spaceWidth = 0;
        this._dragging = true;
        this._selectedIndex = 0;
        this.speed = 500;
        this.dots = true;
        this.vertical = false;
        this.autoplay = false;
        this.autoplayInterval = 3000;
        this.infinite = false;
        this.dotStyle = {};
        this.dotActiveStyle = {};
        this.frameOverflow = 'hidden';
        this.cellSpacing = 0;
        this.slideWidth = 1;
        this.swipeSpeed = 12;
        this.dragging = true;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.carouselWrapper = true;
        this.carouselwrap = true;
    }
    Object.defineProperty(CarouselComponent.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            if (typeof value === 'undefined') {
                value = 0;
            }
            this._selectedIndex = Math.abs(value);
            if (this._nodeArr.length > 0) {
                this.carousel(1);
            }
        },
        enumerable: true,
        configurable: true
    });
    CarouselComponent.prototype.panstart = function (event) {
        event.stopPropagation();
        if (!this._dragging) {
            return;
        }
        this.stopTimer();
        this._isMouseDown = true;
        this.touchObject = {
            startX: touchEvent.getEventTarget(event).pageX,
            startY: touchEvent.getEventTarget(event).pageY,
            direction: this.touchObject.direction
        };
    };
    CarouselComponent.prototype.panmove = function (event) {
        event.stopPropagation();
        if (!this._dragging || !this._isMouseDown) {
            return;
        }
        var direction = this.swipeDirection(this.touchObject.startX, touchEvent.getEventTarget(event).pageX, this.touchObject.startY, touchEvent.getEventTarget(event).pageY).direction;
        if (direction === 0) {
            return;
        }
        var length = this.vertical
            ? Math.abs(touchEvent.getEventTarget(event).pageY - this.touchObject.startY)
            : Math.abs(touchEvent.getEventTarget(event).pageX - this.touchObject.startX);
        var offset = -this.touchObject.direction * length - this.currentSelectedIndex * this._rationWidth;
        this.touchObject = {
            startX: this.touchObject.startX,
            startY: this.touchObject.startY,
            endX: touchEvent.getEventTarget(event).pageX,
            endY: touchEvent.getEventTarget(event).pageY,
            length: length,
            direction: direction,
            offset: offset
        };
        if (direction !== 0) {
            this.setSlideStyles(this.currentSelectedIndex, this.touchObject.direction);
        }
        this.getListStyles(offset);
    };
    CarouselComponent.prototype.panend = function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this._dragging || !this._isMouseDown || !this.touchObject.length || this.touchObject.length === undefined) {
            this._isMouseDown = false;
            return;
        }
        this._isMouseDown = false;
        if (this.touchObject.length > this.swipeSpeed) {
            this.carousel(this.touchObject.direction);
        }
        else {
            this.getListStyles(this.touchObject.direction * this.touchObject.length + this.touchObject.offset);
            this.style['transition'] = this._transition;
        }
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    CarouselComponent.prototype.cancel = function () {
        var _this = this;
        setTimeout(function () {
            _this.startTimer();
        }, this.speed);
    };
    CarouselComponent.prototype.resize = function () {
        var _this = this;
        if (this._resizeTimer) {
            clearTimeout(this._resizeTimer);
        }
        this._resizeTimer = setTimeout(function () {
            _this.ngAfterViewInit();
            clearTimeout(_this._resizeTimer);
        }, 200);
    };
    CarouselComponent.prototype.initCarouselSize = function () {
        var nativeElement = this._ele.nativeElement;
        this.slideHeight = nativeElement.querySelector('carouselslide').clientHeight;
        this._currentSlideHeight = this.slideHeight * this.slideWidth;
        this._currentSlideWidth = nativeElement.clientWidth;
        this._rationWidth = this.vertical ? this._currentSlideHeight : this._currentSlideWidth * this.slideWidth;
        this._spaceWidth = ((this.vertical ? this.slideHeight : this._currentSlideWidth) - this._rationWidth) / 2;
    };
    CarouselComponent.prototype.carouselInit = function (items) {
        var _this = this;
        this.infinite = this.infinite || true;
        this._nodeArr = items['_results'];
        var shouldDragging = this._nodeArr.length > 1;
        this._dragging = this.dragging && shouldDragging ? true : false;
        if (this._nodeArr.length > 1) {
            this.lastIndex = this._nodeArr.length - 1;
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    v.width = _this.vertical ? 'auto' : _this._rationWidth - _this.cellSpacing;
                    v.left = _this.vertical ? 0 : index === _this.lastIndex ? -_this._rationWidth : index * _this._rationWidth;
                    v.top = _this.vertical ? (index === _this.lastIndex ? -_this._rationWidth : index * _this._rationWidth) : 0;
                    v.margin = _this.vertical ? _this.cellSpacing / 2 + "px auto" : "auto " + _this.cellSpacing / 2 + "px";
                });
                _this.startTimer();
            }, 0);
        }
        else if (this._nodeArr.length === 1) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v) {
                    v.width = _this.vertical ? 'auto' : _this._rationWidth - _this.cellSpacing;
                    v.left = 0;
                    v.top = 0;
                    v.margin = "auto " + _this.cellSpacing / 2 + "px";
                });
            }, 0);
        }
    };
    CarouselComponent.prototype.startTimer = function () {
        var _this = this;
        if (!this.autoplay) {
            return;
        }
        this.stopTimer();
        this._timer = this.autoplayInterval
            ? setInterval(function () {
                if (document.getElementsByTagName('carousel').length === 0) {
                    return;
                }
                _this.carousel(1);
            }, this.autoplayInterval)
            : 0;
    };
    CarouselComponent.prototype.stopTimer = function () {
        clearInterval(this._timer);
    };
    CarouselComponent.prototype.carousel = function (moveDirection) {
        if (this.vertical) {
            if (moveDirection === 1) {
                this.moveUp();
            }
            else if (moveDirection === -1) {
                this.moveDown();
            }
        }
        else {
            if (moveDirection === 1) {
                this.moveLeft();
            }
            else if (moveDirection === -1) {
                this.moveRight();
            }
        }
        this.style['transition'] = this._transition;
    };
    CarouselComponent.prototype.moveUp = function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    CarouselComponent.prototype.moveDown = function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    CarouselComponent.prototype.moveLeft = function () {
        this.gotoCarousel(this.getAfterNode(false));
    };
    CarouselComponent.prototype.moveRight = function () {
        this.gotoCarousel(this.getAfterNode(true));
    };
    CarouselComponent.prototype.getAfterNode = function (pre) {
        var _this = this;
        var nextIndex;
        if (pre) {
            if (this.currentSelectedIndex <= 0) {
                this.getListStyles(this._rationWidth);
                setTimeout(function () {
                    _this._nodeArr.forEach(function (v, tempIndex) {
                        if (tempIndex === 0) {
                            v.left = _this.vertical ? 0 : _this._nodeArr.length * _this._rationWidth;
                            v.top = _this.vertical ? _this._nodeArr.length * _this._rationWidth : 0;
                        }
                        else {
                            v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                            v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                        }
                    });
                    _this.getListStyles(-_this._rationWidth * (_this.items.length - 1));
                }, this.speed);
                nextIndex = !this.infinite ? null : this.lastIndex;
                this.beforeChange.emit({ from: this.currentSelectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.currentSelectedIndex - 1;
            this.getListStyles(nextIndex * this._rationWidth * this.touchObject.direction);
            this._nodeArr.forEach(function (v, tempIndex) {
                if (0 === tempIndex && nextIndex === _this._nodeArr.length - 2) {
                    v.left = 0;
                    v.top = 0;
                }
            });
            this.beforeChange.emit({ from: this.currentSelectedIndex, to: nextIndex });
            return nextIndex;
        }
        else {
            if (this.currentSelectedIndex >= this.lastIndex) {
                this.setSlideStyles(this.currentSelectedIndex, 1);
                this.getListStyles(-(this.lastIndex + 1) * this._rationWidth);
                nextIndex = !this.infinite ? null : 0;
                this.beforeChange.emit({ from: this.currentSelectedIndex, to: nextIndex });
                return nextIndex;
            }
            nextIndex = this.currentSelectedIndex + 1;
            this.setSlideStyles(this.currentSelectedIndex, 1);
            this.getListStyles(-nextIndex * this._rationWidth);
            this.beforeChange.emit({ from: this.currentSelectedIndex, to: nextIndex });
            return nextIndex;
        }
    };
    CarouselComponent.prototype.caculateDirectionLeftCurrentIndex = function () {
        var previousIndex = this.currentSelectedIndex;
        this.currentSelectedIndex = (previousIndex + 1) % this.items.length;
    };
    CarouselComponent.prototype.caculateDirectionRightCurrentIndex = function () {
        if (this.currentSelectedIndex === 0) {
            this.currentSelectedIndex = this.items.length;
        }
        var previousIndex = this.currentSelectedIndex;
        this.currentSelectedIndex = (previousIndex - 1) % this.items.length;
    };
    CarouselComponent.prototype.gotoCarousel = function (afterIndex) {
        var _this = this;
        if (afterIndex === null) {
            return;
        }
        this.getCurrentIndex();
        if (afterIndex === 0) {
            setTimeout(function () {
                _this._nodeArr.forEach(function (v, index) {
                    if (index === _this._nodeArr.length - 1) {
                        v.left = _this.vertical ? 0 : -_this._rationWidth;
                        v.top = _this.vertical ? -_this._rationWidth : 0;
                    }
                    else {
                        v.left = _this.vertical ? 0 : index * _this._rationWidth;
                        v.top = _this.vertical ? index * _this._rationWidth : 0;
                    }
                });
                _this.startTimer();
                _this.getListStyles(0);
            }, this.speed);
        }
        this.currentSelectedIndex = afterIndex;
        this.afterChange.emit(this.currentSelectedIndex);
    };
    CarouselComponent.prototype.getCurrentIndex = function () {
        if (this.touchObject.direction === 1) {
            this.caculateDirectionLeftCurrentIndex();
        }
        else {
            this.caculateDirectionRightCurrentIndex();
        }
    };
    CarouselComponent.prototype.setSlideStyles = function (index, direction, xDist) {
        var _this = this;
        if (xDist === void 0) { xDist = 0; }
        if (direction === 1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index < _this._nodeArr.length && index - 1 === tempIndex) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length + tempIndex) * _this._rationWidth : 0;
                    }
                }
                else if (_this._nodeArr.length - 1 === tempIndex && index !== 2) {
                    if (xDist === 0 || xDist > _this._spaceWidth) {
                        v.left = _this.vertical ? 0 : (_this._nodeArr.length - 1) * _this._rationWidth;
                        v.top = _this.vertical ? (_this._nodeArr.length - 1) * _this._rationWidth : 0;
                    }
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 1 && _this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 1 && tempIndex === 0 && !_this.autoplay) {
                    v.left = _this.vertical ? 0 : (_this._nodeArr.length + tempIndex) * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
        else if (direction === -1) {
            this._nodeArr.forEach(function (v, tempIndex) {
                if (index === 0 && _this._nodeArr.length - 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === _this._nodeArr.length - 2 && index + 1 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index === 1 && 0 === tempIndex) {
                    v.left = _this.vertical ? 0 : direction * _this._rationWidth * tempIndex;
                    v.top = _this.vertical ? direction * _this._rationWidth : 0;
                }
                else if (index > 1) {
                    v.left = _this.vertical ? 0 : tempIndex * _this._rationWidth;
                    v.top = _this.vertical ? tempIndex * _this._rationWidth : 0;
                }
            });
        }
    };
    CarouselComponent.prototype.getListStyles = function (offset) {
        if (offset === void 0) { offset = 0; }
        var positionOffset = offset +
            (this.vertical
                ? (this.slideHeight - this._currentSlideHeight) / 2
                : (this._currentSlideWidth - this._rationWidth) / 2) -
            this.cellSpacing;
        this.style = {
            height: this._currentSlideHeight + 'px',
            width: '100%',
            transform: this.vertical
                ? "translate3d(0px, " + positionOffset + "px, 0px)"
                : "translate3d(" + positionOffset + "px, 0px, 0px)",
            margin: this.vertical ? (this.cellSpacing / 2) * -1 + "px 0px" : "0px " + (this.cellSpacing / 2) * -1 + "px"
        };
    };
    CarouselComponent.prototype.swipeDirection = function (x1, x2, y1, y2) {
        var xDist = x1 - x2;
        var yDist = y1 - y2;
        var r = Math.atan2(yDist, xDist);
        var swipeAngle = Math.round((r * 180) / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return {
                direction: 1,
                xDist: xDist
            };
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return {
                direction: -1,
                xDist: xDist
            };
        }
        if (this.vertical === true) {
            if (swipeAngle >= 35 + 33 && swipeAngle <= 135) {
                return {
                    direction: 1,
                    xDist: xDist
                };
            }
            else {
                return {
                    direction: -1,
                    xDist: xDist
                };
            }
        }
        return {
            direction: 0,
            xDist: xDist
        };
    };
    Object.defineProperty(CarouselComponent.prototype, "page", {
        get: function () {
            return this.dots ? this.currentSelectedIndex : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "pageCount", {
        get: function () {
            return this.dots ? this.items.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarouselComponent.prototype, "dotindicatorStatus", {
        get: function () {
            return this.dots ? this.items.length > 1 : this.dots;
        },
        enumerable: true,
        configurable: true
    });
    CarouselComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.touchObject = { direction: 1 };
        this._transition = "transform " + this.speed / 1000 + "s";
        this.items.changes.subscribe(function (items) {
            _this.carouselInit(items);
        });
        this.initCarouselSize();
        if (!this._resizeTimer) {
            this.selectedIndex = this.items.length - 1 < this.selectedIndex ? 0 : this.selectedIndex;
        }
        var index = this.items.length > 1 ? (this.items.length - 1 === this.selectedIndex ? -1 : this.selectedIndex) : 0;
        setTimeout(function () {
            _this.currentSelectedIndex = _this.selectedIndex;
        }, 0);
        this.getListStyles(-index * this._rationWidth);
        this.carouselInit(this.items);
        var nativeElement = this._ele.nativeElement;
        var targetNode = nativeElement.querySelector('carouselslide');
        var config = { attributes: true, childList: true, subtree: true };
        var callback = function (mutationsList) {
            var e_1, _a;
            try {
                for (var mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    if (mutation.type == 'attributes') {
                        if (_this.slideHeight !== nativeElement.querySelector('carouselslide').clientHeight) {
                            _this.initCarouselSize();
                            _this.getListStyles(-index * _this._rationWidth);
                            _this.carouselInit(_this.items);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        this._observer = new MutationObserver(callback);
        this._observer.observe(targetNode, config);
    };
    CarouselComponent.prototype.ngOnDestroy = function () {
        this._observer.disconnect();
        this._observer = null;
        this.stopTimer();
    };
    CarouselComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(CarouselSlideComponent),
        __metadata("design:type", QueryList)
    ], CarouselComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], CarouselComponent.prototype, "speed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "dots", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "vertical", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "autoplay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CarouselComponent.prototype, "autoplayInterval", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "infinite", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CarouselComponent.prototype, "dotStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CarouselComponent.prototype, "dotActiveStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], CarouselComponent.prototype, "frameOverflow", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], CarouselComponent.prototype, "cellSpacing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], CarouselComponent.prototype, "slideWidth", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], CarouselComponent.prototype, "swipeSpeed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "dragging", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CarouselComponent.prototype, "selectedIndex", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], CarouselComponent.prototype, "afterChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], CarouselComponent.prototype, "beforeChange", void 0);
    __decorate([
        HostBinding('class.am-carousel'),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "carouselWrapper", void 0);
    __decorate([
        HostBinding('class.carousel'),
        __metadata("design:type", Boolean)
    ], CarouselComponent.prototype, "carouselwrap", void 0);
    __decorate([
        HostListener('mousedown', ['$event']),
        HostListener('touchstart', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], CarouselComponent.prototype, "panstart", null);
    __decorate([
        HostListener('mousemove', ['$event']),
        HostListener('touchmove', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], CarouselComponent.prototype, "panmove", null);
    __decorate([
        HostListener('mouseleave', ['$event']),
        HostListener('mouseup', ['$event']),
        HostListener('touchend', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], CarouselComponent.prototype, "panend", null);
    __decorate([
        HostListener('touchcancel'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CarouselComponent.prototype, "cancel", null);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CarouselComponent.prototype, "resize", null);
    CarouselComponent = __decorate([
        Component({
            selector: 'Carousel, nzm-carousel',
            encapsulation: ViewEncapsulation.None,
            template: "<div class=\"slider-frame\" [ngStyle]=\"{ overflow: frameOverflow }\">\n  <ul class=\"slider-list\" [ngStyle]=\"style\">\n    <ng-content></ng-content>\n  </ul>\n</div>\n<DotIndicator\n  *ngIf=\"dotindicatorStatus\"\n  class=\"am-carousel-wrap-dot\"\n  [page]=\"page\"\n  [dotStyle]=\"dotStyle\"\n  [pageCount]=\"pageCount\"\n  [dotActiveStyle]=\"dotActiveStyle\"\n></DotIndicator>\n"
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], CarouselComponent);
    return CarouselComponent;
}());
export { CarouselComponent };
//# sourceMappingURL=data:application/json;base64,