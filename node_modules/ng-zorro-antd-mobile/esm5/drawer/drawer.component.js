import { __assign, __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, HostBinding, Output, EventEmitter, ElementRef, OnChanges, AfterViewChecked } from '@angular/core';
var DrawerComponent = /** @class */ (function () {
    function DrawerComponent(_el) {
        this._el = _el;
        this.prefixCls = 'am-drawer';
        this.sidebarStyleFinal = {};
        this.contentStyleFinal = {};
        this.overlayStyleFinal = {};
        this.sidebarWidth = 0;
        this.sidebarHeight = 0;
        this.sidebarTop = 0;
        this.dragHandleTop = 0;
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.touchSupported = typeof window === 'object' && 'ontouchstart' in window;
        this._docked = false;
        this._open = false;
        this._position = 'left';
        this.sidebarStyle = {};
        this.contentStyle = {};
        this.overlayStyle = {};
        this.dragHandleStyle = {};
        this.transitions = true;
        this.touch = true;
        this.enableDragHandle = false;
        this.dragToggleDistance = 30;
        this.onOpenChange = new EventEmitter();
        this.am = true;
        this.left = this._position === 'left';
        this.right = this._position === 'right';
        this.top = this._position == 'top';
        this.bottom = this._position == 'bottom';
        this.dockedCls = this._docked;
        this.openCls = this._open;
    }
    Object.defineProperty(DrawerComponent.prototype, "docked", {
        get: function () {
            return this._docked;
        },
        set: function (v) {
            this._docked = v;
            this.dockedCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerComponent.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (v) {
            this._open = v;
            this.openCls = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerComponent.prototype, "position", {
        set: function (v) {
            this._position = v;
            this.right = false;
            this.left = false;
            this.top = false;
            this.bottom = false;
            switch (v) {
                case 'right':
                    this.right = true;
                    break;
                case 'left':
                    this.left = true;
                    break;
                case 'top':
                    this.top = true;
                    break;
                case 'bottom':
                    this.bottom = true;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    DrawerComponent.prototype.onOverlayClicked = function () {
        if (this._open) {
            this.onOpenChange.emit(true);
        }
    };
    DrawerComponent.prototype.isTouching = function () {
        return this.touchIdentifier !== null;
    };
    DrawerComponent.prototype.onTouchStart = function (event) {
        var touch = event.changedTouches[0];
        this.touchIdentifier = touch.identifier;
        this.touchStartX = touch.clientX;
        this.touchStartY = touch.clientY;
        this.touchCurrentX = touch.clientX;
        this.touchCurrentY = touch.clientY;
    };
    DrawerComponent.prototype.onTouchMove = function (ev) {
        for (var ind = 0; ind < ev.changedTouches.length; ind++) {
            if (ev.changedTouches[ind].identifier === this.touchIdentifier) {
                this.touchCurrentX = ev.changedTouches[ind].clientX;
                this.touchCurrentY = ev.changedTouches[ind].clientY;
                break;
            }
        }
        this.update();
    };
    DrawerComponent.prototype.onTouchEnd = function () {
        var touchWidth = this.touchSidebarWidth();
        if (!this._open && touchWidth > this.dragToggleDistance) {
            this.onOpenChange.emit(!this._open);
        }
        var touchHeight = this.touchSidebarHeight();
        if (!this._open && touchHeight > this.dragToggleDistance) {
            this.onOpenChange.emit(!this._open);
        }
        this.touchIdentifier = null;
        this.touchStartX = null;
        this.touchStartY = null;
        this.touchCurrentX = null;
        this.touchCurrentY = null;
        this.update();
    };
    DrawerComponent.prototype.saveSidebarSize = function () {
        var sidebar = this._el.nativeElement.querySelector('#sidebar');
        var dragHandle = this._el.nativeElement.querySelector('#dragHandle');
        var width = sidebar.offsetWidth;
        var height = sidebar.offsetHeight;
        var sidebarTop = this.getOffset(sidebar).top;
        var dragHandleTop = this.getOffset(dragHandle).top;
        if (width !== this.sidebarWidth) {
            this.sidebarWidth = width;
        }
        if (height !== this.sidebarHeight) {
            this.sidebarHeight = height;
        }
        if (sidebarTop !== this.sidebarTop) {
            this.sidebarTop = sidebarTop;
        }
        if (dragHandleTop !== this.dragHandleTop) {
            this.dragHandleTop = dragHandleTop;
        }
    };
    DrawerComponent.prototype.touchSidebarWidth = function () {
        if (this._position === 'right') {
            return Math.min(window.innerWidth - this.touchCurrentX, this.sidebarWidth);
        }
        if (this._position === 'left') {
            return Math.min(this.touchCurrentX, this.sidebarWidth);
        }
    };
    DrawerComponent.prototype.touchSidebarHeight = function () {
        if (this._position === 'bottom') {
            return Math.min(this._el.nativeElement.offsetHeight - this.touchCurrentY + this._el.nativeElement.offsetTop, this.sidebarHeight);
        }
        if (this._position === 'top') {
            return Math.min(this.touchCurrentY - this.dragHandleTop, this.sidebarHeight);
        }
    };
    DrawerComponent.prototype.renderStyle = function (_a) {
        var sidebarStyle = _a.sidebarStyle, isTouching = _a.isTouching, overlayStyle = _a.overlayStyle, contentStyle = _a.contentStyle;
        if (this._position === 'right' || this._position === 'left') {
            sidebarStyle.transform = "translateX(0%)";
            sidebarStyle.WebkitTransform = "translateX(0%)";
            if (isTouching) {
                var percentage = this.touchSidebarWidth() / this.sidebarWidth;
                // slide open to what we dragged
                if (this._position === 'right') {
                    sidebarStyle.transform = "translateX(" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateX(" + (1 - percentage) * 100 + "%)";
                }
                if (this._position === 'left') {
                    sidebarStyle.transform = "translateX(-" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateX(-" + (1 - percentage) * 100 + "%)";
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = this.sidebarWidth + "px";
            }
        }
        if (this._position === 'top' || this._position === 'bottom') {
            sidebarStyle.transform = "translateY(0%)";
            sidebarStyle.WebkitTransform = "translateY(0%)";
            if (isTouching) {
                var percentage = this.touchSidebarHeight() / this.sidebarHeight;
                if (this._position === 'bottom') {
                    sidebarStyle.transform = "translateY(" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateY(" + (1 - percentage) * 100 + "%)";
                }
                if (this._position === 'top') {
                    sidebarStyle.transform = "translateY(-" + (1 - percentage) * 100 + "%)";
                    sidebarStyle.WebkitTransform = "translateY(-" + (1 - percentage) * 100 + "%)";
                }
                overlayStyle.opacity = percentage;
                overlayStyle.visibility = 'visible';
            }
            if (contentStyle) {
                contentStyle[this._position] = this.sidebarHeight + "px";
            }
        }
    };
    DrawerComponent.prototype.update = function () {
        var sidebarStyle = __assign({}, this.sidebarStyle);
        var contentStyle = __assign({}, this.contentStyle);
        var overlayStyle = __assign({}, this.overlayStyle);
        if (this.isTouching()) {
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: true,
                contentStyle: undefined,
                overlayStyle: overlayStyle
            });
        }
        else if (this._docked) {
            this.dockedCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: contentStyle,
                overlayStyle: undefined
            });
        }
        else if (this._open) {
            this.openCls = true;
            this.renderStyle({
                sidebarStyle: sidebarStyle,
                isTouching: undefined,
                contentStyle: undefined,
                overlayStyle: undefined
            });
            overlayStyle.opacity = 1;
            overlayStyle.visibility = 'visible';
        }
        if (this.isTouching() || !this.transitions) {
            sidebarStyle.transition = 'none';
            sidebarStyle.WebkitTransition = 'none';
            contentStyle.transition = 'none';
            overlayStyle.transition = 'none';
        }
        this.sidebarStyleFinal = sidebarStyle;
        this.contentStyleFinal = contentStyle;
        this.overlayStyleFinal = overlayStyle;
    };
    DrawerComponent.prototype.getOffset = function (ele) {
        var el = ele;
        var _x = 0;
        var _y = 0;
        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    };
    DrawerComponent.prototype.ngAfterViewChecked = function () {
        if (!this.isTouching()) {
            this.saveSidebarSize();
        }
    };
    DrawerComponent.prototype.ngOnChanges = function () {
        this.update();
    };
    DrawerComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DrawerComponent.prototype, "sidebar", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DrawerComponent.prototype, "sidebarStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DrawerComponent.prototype, "contentStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DrawerComponent.prototype, "overlayStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DrawerComponent.prototype, "dragHandleStyle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "transitions", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "touch", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "enableDragHandle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], DrawerComponent.prototype, "dragToggleDistance", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DrawerComponent.prototype, "docked", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DrawerComponent.prototype, "open", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DrawerComponent.prototype, "position", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DrawerComponent.prototype, "onOpenChange", void 0);
    __decorate([
        HostBinding('class.am-drawer'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "am", void 0);
    __decorate([
        HostBinding('class.am-drawer-left'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "left", void 0);
    __decorate([
        HostBinding('class.am-drawer-right'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "right", void 0);
    __decorate([
        HostBinding('class.am-drawer-top'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "top", void 0);
    __decorate([
        HostBinding('class.am-drawer-bottom'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "bottom", void 0);
    __decorate([
        HostBinding('class.am-drawer-docked'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "dockedCls", void 0);
    __decorate([
        HostBinding('class.am-drawer-open'),
        __metadata("design:type", Boolean)
    ], DrawerComponent.prototype, "openCls", void 0);
    DrawerComponent = __decorate([
        Component({
            selector: 'Drawer, nzm-drawer',
            template: "<div class=\"{{ prefixCls }}-sidebar\" [ngStyle]=\"sidebarStyleFinal\" id=\"sidebar\">\n  <ng-template [ngTemplateOutlet]=\"sidebar\"></ng-template>\n</div>\n<div\n  role=\"presentation\"\n  class=\"{{ prefixCls }}-overlay\"\n  ref=\"overlay\"\n  [ngStyle]=\"overlayStyleFinal\"\n  (click)=\"onOverlayClicked()\"\n></div>\n<div class=\"{{ prefixCls }}-content\" [ngStyle]=\"contentStyleFinal\" ref=\"content\">\n  <div\n    *ngIf=\"touch && touchSupported && !open && !docked && enableDragHandle\"\n    id=\"dragHandle\"\n    class=\"{{ prefixCls }}-draghandle\"\n    [ngStyle]=\"dragHandleStyle\"\n    (touchstart)=\"onTouchStart($event)\"\n    (touchmove)=\"onTouchMove($event)\"\n    (touchend)=\"onTouchEnd()\"\n    (touchcancle)=\"onTouchEnd()\"\n  ></div>\n  <ng-content></ng-content>\n</div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], DrawerComponent);
    return DrawerComponent;
}());
export { DrawerComponent };
//# sourceMappingURL=data:application/json;base64,