import { __assign, __decorate, __extends, __metadata } from "tslib";
import { Component, HostBinding, ViewEncapsulation, Input, ElementRef, ViewChild } from '@angular/core';
import { CalendarDatePickerBaseComponent } from './datepicker.base.component';
var CalendarDatePickerComponent = /** @class */ (function (_super) {
    __extends(CalendarDatePickerComponent, _super);
    function CalendarDatePickerComponent() {
        var _this = _super.call(this) || this;
        _this.transform = '';
        _this._initDelta = 0;
        _this._lastY = 0;
        _this._delta = _this._initDelta;
        _this.amCalendar = true;
        _this.datePicker = true;
        _this.genMonthComponent = function (data) {
            if (!data) {
                return;
            }
            return {
                monthData: data,
                locale: _this.props.locale,
                rowSize: _this.props.rowSize,
                onCellClick: _this.baseOnCellClick,
                getDateExtra: _this.props.getDateExtra,
                ref: function (dom) {
                    data.componentRef = dom || data.componentRef || undefined;
                    data.updateLayout = function () {
                        _this.computeHeight(data, dom);
                    };
                    data.updateLayout();
                }
            };
        };
        _this.computeHeight = function (data, singleMonth) {
            if (singleMonth && singleMonth.wrapperDivDOM) {
                if (!data.height && !singleMonth.wrapperDivDOM.clientHeight) {
                    setTimeout(function () { return _this.computeHeight(data, singleMonth); }, 500);
                    return;
                }
                data.height = singleMonth.wrapperDivDOM.clientHeight || data.height || 0;
                data.y = singleMonth.wrapperDivDOM.offsetTop || data.y || 0;
            }
        };
        _this.setLayout = function (dom) {
            if (dom) {
                var onLayout = _this.props.onLayout;
                if (onLayout) {
                    onLayout(dom.clientHeight);
                }
                var scrollHandler_1 = _this.createOnScroll();
                dom.onscroll = function (evt) {
                    scrollHandler_1({
                        client: dom.clientHeight,
                        full: evt.currentTarget.clientHeight,
                        top: evt.currentTarget.scrollTop
                    });
                };
            }
        };
        _this.setPanel = function (dom) {
            _this._panel = dom;
        };
        return _this;
    }
    Object.defineProperty(CalendarDatePickerComponent.prototype, "onCellClick", {
        set: function (value) {
            this.props.onCellClick = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarDatePickerComponent.prototype, "endDate", {
        set: function (value) {
            var oldProps = Object.assign({}, this.props);
            this.props.endDate = value;
            this.receiveProps(oldProps, this.props);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarDatePickerComponent.prototype, "startDate", {
        set: function (value) {
            var oldProps = Object.assign({}, this.props);
            this.props.startDate = value;
            this.receiveProps(oldProps, this.props);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarDatePickerComponent.prototype, "propsData", {
        set: function (value) {
            this.props = __assign(__assign({}, this.props), value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarDatePickerComponent.prototype, "onSelectHasDisableDate", {
        set: function (value) {
            this.props.onSelectHasDisableDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CalendarDatePickerComponent.prototype, "onLayout", {
        set: function (value) {
            this.props.onLayout = value;
        },
        enumerable: true,
        configurable: true
    });
    CalendarDatePickerComponent.prototype.onTouchStart = function (event) {
        this._lastY = event.touches[0].screenY || event.touches[0].pageY;
        this._delta = this._initDelta;
    };
    CalendarDatePickerComponent.prototype.onTouchMove = function (event) {
        var ele = event.currentTarget;
        var isReachTop = ele.scrollTop === 0;
        if (isReachTop) {
            this._delta = (event.touches[0].screenY || event.touches[0].pageY) - this._lastY;
            if (this._delta > 0) {
                event.preventDefault();
                if (this._delta > 80) {
                    this._delta = 80;
                }
            }
            else {
                this._delta = 0;
            }
            this.setTransform(this._panel.style, "translate3d(0," + this._delta + "px,0)");
        }
    };
    CalendarDatePickerComponent.prototype.onTouchEnd = function (event) {
        this.onFinish();
    };
    CalendarDatePickerComponent.prototype.onFinish = function () {
        var _this = this;
        if (this._delta > 40 && this.canLoadPrev()) {
            this.genMonthData(this.state.months[0].firstDate, -1);
            this.visibleMonth = this.state.months.slice(0, this.props.initalMonths);
            this.state.months.forEach(function (m) {
                if (m.updateLayout) {
                    m.updateLayout();
                }
            });
        }
        this.setTransform(this._panel.style, "translate3d(0,0,0)");
        this.setTransition(this._panel.style, '.3s');
        setTimeout(function () {
            if (_this._panel) {
                _this.setTransition(_this._panel.style, '');
            }
        }, 300);
    };
    CalendarDatePickerComponent.prototype.setTransform = function (nodeStyle, value) {
        this.transform = value;
        nodeStyle.transform = value;
        nodeStyle.webkitTransform = value;
    };
    CalendarDatePickerComponent.prototype.setTransition = function (nodeStyle, value) {
        nodeStyle.transition = value;
        nodeStyle.webkitTransition = value;
    };
    CalendarDatePickerComponent.prototype.ngOnInit = function () {
        this.init();
        this.setLayout(this.layoutDom.nativeElement);
        this.setPanel(this.panelDom.nativeElement);
    };
    __decorate([
        ViewChild('layout', { static: true }),
        __metadata("design:type", ElementRef)
    ], CalendarDatePickerComponent.prototype, "layoutDom", void 0);
    __decorate([
        ViewChild('panel', { static: true }),
        __metadata("design:type", ElementRef)
    ], CalendarDatePickerComponent.prototype, "panelDom", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "onCellClick", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "endDate", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "startDate", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "propsData", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "onSelectHasDisableDate", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarDatePickerComponent.prototype, "onLayout", null);
    __decorate([
        HostBinding('class.am-calendar'),
        __metadata("design:type", Boolean)
    ], CalendarDatePickerComponent.prototype, "amCalendar", void 0);
    __decorate([
        HostBinding('class.date-picker'),
        __metadata("design:type", Boolean)
    ], CalendarDatePickerComponent.prototype, "datePicker", void 0);
    CalendarDatePickerComponent = __decorate([
        Component({
            selector: 'CalendarDatePicker, nzm-calendar-date-picker',
            template: "<CalendarWeekPanel [locale]=\"props.locale\"></CalendarWeekPanel>\n<div\n  #layout\n  class=\"wrapper\"\n  style=\"overflow-x:hidden;overflow-y:visible;-webkit-overflow-scrolling:touch;\"\n  (touchstart)=\"onTouchStart($event)\"\n  (touchmove)=\"onTouchMove($event)\"\n  (touchend)=\"onTouchEnd($event)\"\n>\n  <div #panel [ngStyle]=\"{ transform: transform }\">\n    <div *ngIf=\"canLoadPrev()\" class=\"load-tip\">{{ props.locale.loadPrevMonth }}</div>\n    <div class=\"months\">\n      <CalendarSingleMonth\n        *ngFor=\"let item of visibleMonth; let i = index\"\n        style=\"display: block;\"\n        [data]=\"item.component\"\n      ></CalendarSingleMonth>\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [])
    ], CalendarDatePickerComponent);
    return CalendarDatePickerComponent;
}(CalendarDatePickerBaseComponent));
export { CalendarDatePickerComponent };
//# sourceMappingURL=data:application/json;base64,