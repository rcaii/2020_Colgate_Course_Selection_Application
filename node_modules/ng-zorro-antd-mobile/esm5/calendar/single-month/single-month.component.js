import { __assign, __decorate, __metadata } from "tslib";
import { Component, OnInit, ViewEncapsulation, HostBinding, Input, ElementRef, AfterViewInit } from '@angular/core';
import { DateModels } from '../date/DataTypes';
var CalendarSingleMonthComponent = /** @class */ (function () {
    function CalendarSingleMonthComponent(_elementRef) {
        var _this = this;
        this._elementRef = _elementRef;
        this.props = {
            rowSize: 'normal'
        };
        this.state = {
            weekComponents: []
        };
        this.singleMonth = true;
        this.genWeek = function (weeksData, index) {
            var _a = _this.props, getDateExtra = _a.getDateExtra, monthData = _a.monthData, onCellClick = _a.onCellClick, locale = _a.locale, rowSize = _a.rowSize;
            var rowCls = 'row';
            var weeksDataList = [];
            if (rowSize === 'xl') {
                rowCls += ' row-xl';
            }
            weeksData.forEach(function (day, dayOfWeek) {
                var extra = (getDateExtra && getDateExtra(new Date(day.tick))) || {};
                var info = extra.info;
                var disable = extra.disable || day.outOfDate;
                var cls = 'date';
                var lCls = 'left';
                var rCls = 'right';
                var infoCls = 'info';
                if (dayOfWeek === 0 || dayOfWeek === 6) {
                    cls += ' grey';
                }
                if (disable) {
                    cls += ' disable';
                }
                else if (info) {
                    cls += ' important';
                }
                if (day.selected) {
                    cls += ' date-selected';
                    var styleType = day.selected;
                    switch (styleType) {
                        case DateModels.SelectType.Only:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            break;
                        case DateModels.SelectType.All:
                            info = locale.begin_over;
                            infoCls += ' date-selected';
                            break;
                        case DateModels.SelectType.Start:
                            info = locale.begin;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = DateModels.SelectType.All;
                            }
                            break;
                        case DateModels.SelectType.Middle:
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                if (day.isLastOfMonth || dayOfWeek === 6) {
                                    styleType = DateModels.SelectType.All;
                                }
                                else {
                                    styleType = DateModels.SelectType.Start;
                                }
                            }
                            else if (dayOfWeek === 6 || day.isLastOfMonth) {
                                styleType = DateModels.SelectType.End;
                            }
                            break;
                        case DateModels.SelectType.End:
                            info = locale.over;
                            infoCls += ' date-selected';
                            if (dayOfWeek === 0 || day.isFirstOfMonth) {
                                styleType = DateModels.SelectType.All;
                            }
                            break;
                    }
                    switch (styleType) {
                        case DateModels.SelectType.Single:
                        case DateModels.SelectType.Only:
                        case DateModels.SelectType.All:
                            cls += ' selected-single';
                            break;
                        case DateModels.SelectType.Start:
                            cls += ' selected-start';
                            rCls += ' date-selected';
                            break;
                        case DateModels.SelectType.Middle:
                            cls += ' selected-middle';
                            lCls += ' date-selected';
                            rCls += ' date-selected';
                            break;
                        case DateModels.SelectType.End:
                            cls += ' selected-end';
                            lCls += ' date-selected';
                            break;
                    }
                }
                weeksDataList[dayOfWeek] = {
                    lCls: lCls,
                    cls: cls,
                    day: day,
                    rCls: rCls,
                    infoCls: infoCls,
                    info: info,
                    extra: extra,
                    disable: disable,
                    onCellClick: onCellClick,
                    monthData: monthData
                };
            });
            _this.state.weekComponents[index] = {
                index: index,
                rowCls: rowCls,
                weeksDataList: weeksDataList
            };
        };
        this.updateWeeks = function (monthData) {
            (monthData || _this.props.monthData).weeks.forEach(function (week, index) {
                _this.genWeek(week, index);
            });
        };
        this.setWarpper = function (dom) {
            _this.wrapperDivDOM = dom;
        };
    }
    Object.defineProperty(CalendarSingleMonthComponent.prototype, "data", {
        set: function (value) {
            this.props = __assign(__assign({}, this.props), value);
        },
        enumerable: true,
        configurable: true
    });
    CalendarSingleMonthComponent.prototype.onClickCell = function (item) {
        if (!item.disable && item.onCellClick) {
            item.onCellClick(item.day, item.monthData);
        }
    };
    CalendarSingleMonthComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setWarpper(this._elementRef.nativeElement);
        this.props.monthData.weeks.forEach(function (week, index) {
            _this.genWeek(week, index);
        });
    };
    CalendarSingleMonthComponent.prototype.ngAfterViewInit = function () {
        this.ref = this.props.ref;
        this.ref(this);
    };
    CalendarSingleMonthComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], CalendarSingleMonthComponent.prototype, "data", null);
    __decorate([
        HostBinding('class.single-month'),
        __metadata("design:type", Boolean)
    ], CalendarSingleMonthComponent.prototype, "singleMonth", void 0);
    CalendarSingleMonthComponent = __decorate([
        Component({
            selector: 'CalendarSingleMonth, nzm-single-month',
            template: "<div class=\"month-title\">\n  {{ props.monthData.title }}\n</div>\n<div class=\"date\">\n  <div *ngFor=\"let row of state.weekComponents; let i = index\" [ngClass]=\"row.rowCls\">\n    <div\n      *ngFor=\"let cell of row.weeksDataList; let j = index\"\n      class=\"{{ 'cell ' + ((cell.extra && cell.extra.cellCls) || '') }}\"\n      (click)=\"onClickCell(cell)\"\n    >\n      <div *ngIf=\"row.extra && row.extra.cellRender\">test</div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" class=\"date-wrapper\">\n        <span [ngClass]=\"cell.lCls\"></span>\n        <div [ngClass]=\"cell.cls\">\n          {{ (cell.day && cell.day.dayOfMonth) || '' }}\n        </div>\n        <span [ngClass]=\"cell.rCls\"></span>\n      </div>\n      <div *ngIf=\"!row.extra || (row.extra && row.extra.cellRender)\" [ngClass]=\"cell.infoCls\">\n        {{ cell.info }}\n      </div>\n    </div>\n  </div>\n</div>\n",
            encapsulation: ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], CalendarSingleMonthComponent);
    return CalendarSingleMonthComponent;
}());
export { CalendarSingleMonthComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW1vbnRoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQtbW9iaWxlLyIsInNvdXJjZXMiOlsiY2FsZW5kYXIvc2luZ2xlLW1vbnRoL3NpbmdsZS1tb250aC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFRL0M7SUFxQkUsc0NBQW9CLFdBQXVCO1FBQTNDLGlCQUErQztRQUEzQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQXBCM0MsVUFBSyxHQUFHO1lBQ04sT0FBTyxFQUFFLFFBQVE7U0FDYyxDQUFDO1FBRWxDLFVBQUssR0FBRztZQUNOLGNBQWMsRUFBRSxFQUFFO1NBQ25CLENBQUM7UUFZaUMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFJL0QsWUFBTyxHQUFHLFVBQUMsU0FBZ0MsRUFBRSxLQUFhO1lBQ2xELElBQUEsZ0JBQXNFLEVBQXBFLDhCQUFZLEVBQUUsd0JBQVMsRUFBRSw0QkFBVyxFQUFFLGtCQUFNLEVBQUUsb0JBQXNCLENBQUM7WUFDN0UsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ3BCLE1BQU0sSUFBSSxTQUFTLENBQUM7YUFDckI7WUFFRCxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFLFNBQVM7Z0JBQy9CLElBQU0sS0FBSyxHQUFHLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FB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QUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtTQUN0QyxDQUFDO3lDQXNCaUMsVUFBVTtPQXJCaEMsNEJBQTRCLENBaUt4QztJQUFELG1DQUFDO0NBQUEsQUFqS0QsSUFpS0M7U0FqS1ksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBIb3N0QmluZGluZywgSW5wdXQsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVNb2RlbHMgfSBmcm9tICcuLi9kYXRlL0RhdGFUeXBlcyc7XG5pbXBvcnQgeyBDYWxlbmRhclNpbmdsZU1vbnRoUHJvcHNUeXBlIH0gZnJvbSAnLi9Qcm9wc1R5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDYWxlbmRhclNpbmdsZU1vbnRoLCBuem0tc2luZ2xlLW1vbnRoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NpbmdsZS1tb250aC5jb21wb25lbnQuaHRtbCcsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTaW5nbGVNb250aENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByb3BzID0ge1xuICAgIHJvd1NpemU6ICdub3JtYWwnXG4gIH0gYXMgQ2FsZW5kYXJTaW5nbGVNb250aFByb3BzVHlwZTtcblxuICBzdGF0ZSA9IHtcbiAgICB3ZWVrQ29tcG9uZW50czogW11cbiAgfTtcbiAgcmVmOiAoZG9tKSA9PiB2b2lkO1xuICB3cmFwcGVyRGl2RE9NOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgQElucHV0KClcbiAgc2V0IGRhdGEodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIC4uLnZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2luZ2xlLW1vbnRoJykgc2luZ2xlTW9udGg6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgZ2VuV2VlayA9ICh3ZWVrc0RhdGE6IERhdGVNb2RlbHMuQ2VsbERhdGFbXSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHsgZ2V0RGF0ZUV4dHJhLCBtb250aERhdGEsIG9uQ2VsbENsaWNrLCBsb2NhbGUsIHJvd1NpemUgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHJvd0NscyA9ICdyb3cnO1xuICAgIGxldCB3ZWVrc0RhdGFMaXN0ID0gW107XG4gICAgaWYgKHJvd1NpemUgPT09ICd4bCcpIHtcbiAgICAgIHJvd0NscyArPSAnIHJvdy14bCc7XG4gICAgfVxuXG4gICAgd2Vla3NEYXRhLmZvckVhY2goKGRheSwgZGF5T2ZXZWVrKSA9PiB7XG4gICAgICBjb25zdCBleHRyYSA9IChnZXREYXRlRXh0cmEgJiYgZ2V0RGF0ZUV4dHJhKG5ldyBEYXRlKGRheS50aWNrKSkpIHx8IHt9O1xuICAgICAgbGV0IGluZm8gPSBleHRyYS5pbmZvO1xuICAgICAgY29uc3QgZGlzYWJsZSA9IGV4dHJhLmRpc2FibGUgfHwgZGF5Lm91dE9mRGF0ZTtcblxuICAgICAgbGV0IGNscyA9ICdkYXRlJztcbiAgICAgIGxldCBsQ2xzID0gJ2xlZnQnO1xuICAgICAgbGV0IHJDbHMgPSAncmlnaHQnO1xuICAgICAgbGV0IGluZm9DbHMgPSAnaW5mbyc7XG5cbiAgICAgIGlmIChkYXlPZldlZWsgPT09IDAgfHwgZGF5T2ZXZWVrID09PSA2KSB7XG4gICAgICAgIGNscyArPSAnIGdyZXknO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzYWJsZSkge1xuICAgICAgICBjbHMgKz0gJyBkaXNhYmxlJztcbiAgICAgIH0gZWxzZSBpZiAoaW5mbykge1xuICAgICAgICBjbHMgKz0gJyBpbXBvcnRhbnQnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF5LnNlbGVjdGVkKSB7XG4gICAgICAgIGNscyArPSAnIGRhdGUtc2VsZWN0ZWQnO1xuICAgICAgICBsZXQgc3R5bGVUeXBlID0gZGF5LnNlbGVjdGVkO1xuICAgICAgICBzd2l0Y2ggKHN0eWxlVHlwZSkge1xuICAgICAgICAgIGNhc2UgRGF0ZU1vZGVscy5TZWxlY3RUeXBlLk9ubHk6XG4gICAgICAgICAgICBpbmZvID0gbG9jYWxlLmJlZ2luO1xuICAgICAgICAgICAgaW5mb0NscyArPSAnIGRhdGUtc2VsZWN0ZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuQWxsOlxuICAgICAgICAgICAgaW5mbyA9IGxvY2FsZS5iZWdpbl9vdmVyO1xuICAgICAgICAgICAgaW5mb0NscyArPSAnIGRhdGUtc2VsZWN0ZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5TdGFydDpcbiAgICAgICAgICAgIGluZm8gPSBsb2NhbGUuYmVnaW47XG4gICAgICAgICAgICBpbmZvQ2xzICs9ICcgZGF0ZS1zZWxlY3RlZCc7XG4gICAgICAgICAgICBpZiAoZGF5T2ZXZWVrID09PSA2IHx8IGRheS5pc0xhc3RPZk1vbnRoKSB7XG4gICAgICAgICAgICAgIHN0eWxlVHlwZSA9IERhdGVNb2RlbHMuU2VsZWN0VHlwZS5BbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5NaWRkbGU6XG4gICAgICAgICAgICBpZiAoZGF5T2ZXZWVrID09PSAwIHx8IGRheS5pc0ZpcnN0T2ZNb250aCkge1xuICAgICAgICAgICAgICBpZiAoZGF5LmlzTGFzdE9mTW9udGggfHwgZGF5T2ZXZWVrID09PSA2KSB7XG4gICAgICAgICAgICAgICAgc3R5bGVUeXBlID0gRGF0ZU1vZGVscy5TZWxlY3RUeXBlLkFsbDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZVR5cGUgPSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuU3RhcnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZXZWVrID09PSA2IHx8IGRheS5pc0xhc3RPZk1vbnRoKSB7XG4gICAgICAgICAgICAgIHN0eWxlVHlwZSA9IERhdGVNb2RlbHMuU2VsZWN0VHlwZS5FbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5FbmQ6XG4gICAgICAgICAgICBpbmZvID0gbG9jYWxlLm92ZXI7XG4gICAgICAgICAgICBpbmZvQ2xzICs9ICcgZGF0ZS1zZWxlY3RlZCc7XG4gICAgICAgICAgICBpZiAoZGF5T2ZXZWVrID09PSAwIHx8IGRheS5pc0ZpcnN0T2ZNb250aCkge1xuICAgICAgICAgICAgICBzdHlsZVR5cGUgPSBEYXRlTW9kZWxzLlNlbGVjdFR5cGUuQWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHN0eWxlVHlwZSkge1xuICAgICAgICAgIGNhc2UgRGF0ZU1vZGVscy5TZWxlY3RUeXBlLlNpbmdsZTpcbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5Pbmx5OlxuICAgICAgICAgIGNhc2UgRGF0ZU1vZGVscy5TZWxlY3RUeXBlLkFsbDpcbiAgICAgICAgICAgIGNscyArPSAnIHNlbGVjdGVkLXNpbmdsZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5TdGFydDpcbiAgICAgICAgICAgIGNscyArPSAnIHNlbGVjdGVkLXN0YXJ0JztcbiAgICAgICAgICAgIHJDbHMgKz0gJyBkYXRlLXNlbGVjdGVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgRGF0ZU1vZGVscy5TZWxlY3RUeXBlLk1pZGRsZTpcbiAgICAgICAgICAgIGNscyArPSAnIHNlbGVjdGVkLW1pZGRsZSc7XG4gICAgICAgICAgICBsQ2xzICs9ICcgZGF0ZS1zZWxlY3RlZCc7XG4gICAgICAgICAgICByQ2xzICs9ICcgZGF0ZS1zZWxlY3RlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERhdGVNb2RlbHMuU2VsZWN0VHlwZS5FbmQ6XG4gICAgICAgICAgICBjbHMgKz0gJyBzZWxlY3RlZC1lbmQnO1xuICAgICAgICAgICAgbENscyArPSAnIGRhdGUtc2VsZWN0ZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgd2Vla3NEYXRhTGlzdFtkYXlPZldlZWtdID0ge1xuICAgICAgICBsQ2xzLFxuICAgICAgICBjbHMsXG4gICAgICAgIGRheSxcbiAgICAgICAgckNscyxcbiAgICAgICAgaW5mb0NscyxcbiAgICAgICAgaW5mbyxcbiAgICAgICAgZXh0cmEsXG4gICAgICAgIGRpc2FibGUsXG4gICAgICAgIG9uQ2VsbENsaWNrOiBvbkNlbGxDbGljayxcbiAgICAgICAgbW9udGhEYXRhXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZS53ZWVrQ29tcG9uZW50c1tpbmRleF0gPSB7XG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICByb3dDbHMsXG4gICAgICB3ZWVrc0RhdGFMaXN0XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZVdlZWtzID0gKG1vbnRoRGF0YT86IERhdGVNb2RlbHMuTW9udGhEYXRhKSA9PiB7XG4gICAgKG1vbnRoRGF0YSB8fCB0aGlzLnByb3BzLm1vbnRoRGF0YSkud2Vla3MuZm9yRWFjaCgod2VlaywgaW5kZXgpID0+IHtcbiAgICAgIHRoaXMuZ2VuV2Vlayh3ZWVrLCBpbmRleCk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRXYXJwcGVyID0gKGRvbTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICB0aGlzLndyYXBwZXJEaXZET00gPSBkb207XG4gIH1cblxuICBvbkNsaWNrQ2VsbChpdGVtKSB7XG4gICAgaWYgKCFpdGVtLmRpc2FibGUgJiYgaXRlbS5vbkNlbGxDbGljaykge1xuICAgICAgaXRlbS5vbkNlbGxDbGljayhpdGVtLmRheSwgaXRlbS5tb250aERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2V0V2FycHBlcih0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHRoaXMucHJvcHMubW9udGhEYXRhLndlZWtzLmZvckVhY2goKHdlZWssIGluZGV4KSA9PiB7XG4gICAgICB0aGlzLmdlbldlZWsod2VlaywgaW5kZXgpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucmVmID0gdGhpcy5wcm9wcy5yZWY7XG4gICAgdGhpcy5yZWYodGhpcyk7XG4gIH1cbn1cbiJdfQ==