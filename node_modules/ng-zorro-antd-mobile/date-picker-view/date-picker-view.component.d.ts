import { OnInit, OnChanges, EventEmitter, SimpleChanges, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DatePickerComponent } from '../date-picker/date-picker.component';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerViewComponent extends DatePickerComponent implements OnInit, AfterViewInit, OnChanges, ControlValueAccessor {
    mode: string;
    minDate: Date;
    maxDate: Date;
    value: Date;
    disabled: boolean;
    indicatorStyle: object;
    get locale(): any;
    set locale(value: any);
    showErrorToast: boolean;
    showErrorToastInterval: number;
    onValueChange: EventEmitter<any>;
    amPicker: boolean;
    reloadPicker(): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (_: Date) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    optionInit(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerViewComponent, "DatePickerView, nzm-date-picker-view", never, { "mode": "mode"; "minDate": "minDate"; "maxDate": "maxDate"; "value": "value"; "disabled": "disabled"; "indicatorStyle": "indicatorStyle"; "showErrorToast": "showErrorToast"; "showErrorToastInterval": "showErrorToastInterval"; "locale": "locale"; }, { "onValueChange": "onValueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItdmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS1waWNrZXItdmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEYXRlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVQaWNrZXJWaWV3Q29tcG9uZW50IGV4dGVuZHMgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgbW9kZTogc3RyaW5nO1xuICAgIG1pbkRhdGU6IERhdGU7XG4gICAgbWF4RGF0ZTogRGF0ZTtcbiAgICB2YWx1ZTogRGF0ZTtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbmRpY2F0b3JTdHlsZTogb2JqZWN0O1xuICAgIGdldCBsb2NhbGUoKTogYW55O1xuICAgIHNldCBsb2NhbGUodmFsdWU6IGFueSk7XG4gICAgc2hvd0Vycm9yVG9hc3Q6IGJvb2xlYW47XG4gICAgc2hvd0Vycm9yVG9hc3RJbnRlcnZhbDogbnVtYmVyO1xuICAgIG9uVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFtUGlja2VyOiBib29sZWFuO1xuICAgIHJlbG9hZFBpY2tlcigpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBEYXRlKSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9wdGlvbkluaXQoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xufVxuIl19