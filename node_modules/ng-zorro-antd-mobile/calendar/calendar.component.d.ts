import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CalendarPropsType } from './calendar.props.component';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { CalendarDatePickerComponent } from './datepicker/datepicker.component';
import * as ɵngcc0 from '@angular/core';
export { CalendarPropsType };
export interface CalendarStateType {
    showTimePicker: boolean;
    timePickerTitle?: string;
    startDate?: Date;
    endDate?: Date;
    disConfirmBtn?: boolean;
    clientHight?: number;
}
export declare class CalendarComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private _localeProviderService;
    isShow: boolean;
    contentAnimateClass: string;
    maskAnimateClass: string;
    showClear: boolean;
    isSameDate: Function;
    props: CalendarPropsType;
    state: CalendarStateType;
    private _unsubscribe$;
    private _enterDirection;
    private _dateModelType;
    private _dateModelValue;
    private _dateModelTime;
    datepicker: CalendarDatePickerComponent;
    set locale(value: any);
    set defaultTimeValue(value: any);
    set prefixCls(value: any);
    set enterDirection(value: any);
    set visible(value: any);
    set getDateExtra(value: any);
    set defaultDate(value: any);
    set minDate(value: any);
    set maxDate(value: any);
    set pickTime(value: any);
    set type(value: any);
    set showShortcut(value: any);
    set rowSize(value: any);
    set infinite(value: any);
    set defaultValue(value: any);
    set onSelect(value: any);
    onCancel: EventEmitter<any>;
    onConfirm: EventEmitter<any>;
    onSelectHasDisableDate: EventEmitter<any>;
    class: string;
    constructor(_localeProviderService: LocaleProviderService);
    writeValue(value: Date | Array<Date> | null): void;
    registerOnChange(fn: (date: Date | Array<Date>) => void): void;
    registerOnTouched(fn: () => void): void;
    receiveProps(nextProps: CalendarPropsType): void;
    showAnimation(): void;
    hideAnimation(): void;
    selectDate: (date: Date, useDateTime?: boolean, oldState?: {
        startDate?: Date;
        endDate?: Date;
    }, props?: CalendarPropsType) => CalendarStateType;
    writeModelData(date: any): void;
    onSelectedDate: (date: Date) => void;
    triggerSelectHasDisableDate: (date: Date[]) => void;
    onClose: () => void;
    triggerConfirm: () => void;
    triggerCancel(): void;
    triggerClear: () => void;
    onTimeChange: (date: Date) => void;
    shortcutSelect: (startDate: Date, endDate: Date, props?: CalendarPropsType) => void;
    setClientHeight: (height: number) => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private onChangeFn;
    private onTouchFn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CalendarComponent, "Calendar, nzm-calendar", never, { "locale": "locale"; "defaultTimeValue": "defaultTimeValue"; "prefixCls": "prefixCls"; "enterDirection": "enterDirection"; "visible": "visible"; "getDateExtra": "getDateExtra"; "defaultDate": "defaultDate"; "minDate": "minDate"; "maxDate": "maxDate"; "pickTime": "pickTime"; "type": "type"; "showShortcut": "showShortcut"; "rowSize": "rowSize"; "infinite": "infinite"; "defaultValue": "defaultValue"; "onSelect": "onSelect"; }, { "onCancel": "onCancel"; "onConfirm": "onConfirm"; "onSelectHasDisableDate": "onSelectHasDisableDate"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2FsZW5kYXJQcm9wc1R5cGUgfSBmcm9tICcuL2NhbGVuZGFyLnByb3BzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2NhbGVQcm92aWRlclNlcnZpY2UgfSBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXIvbG9jYWxlLXByb3ZpZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FsZW5kYXJEYXRlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50JztcbmV4cG9ydCB7IENhbGVuZGFyUHJvcHNUeXBlIH07XG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyU3RhdGVUeXBlIHtcbiAgICBzaG93VGltZVBpY2tlcjogYm9vbGVhbjtcbiAgICB0aW1lUGlja2VyVGl0bGU/OiBzdHJpbmc7XG4gICAgc3RhcnREYXRlPzogRGF0ZTtcbiAgICBlbmREYXRlPzogRGF0ZTtcbiAgICBkaXNDb25maXJtQnRuPzogYm9vbGVhbjtcbiAgICBjbGllbnRIaWdodD86IG51bWJlcjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhbGVuZGFyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9sb2NhbGVQcm92aWRlclNlcnZpY2U7XG4gICAgaXNTaG93OiBib29sZWFuO1xuICAgIGNvbnRlbnRBbmltYXRlQ2xhc3M6IHN0cmluZztcbiAgICBtYXNrQW5pbWF0ZUNsYXNzOiBzdHJpbmc7XG4gICAgc2hvd0NsZWFyOiBib29sZWFuO1xuICAgIGlzU2FtZURhdGU6IEZ1bmN0aW9uO1xuICAgIHByb3BzOiBDYWxlbmRhclByb3BzVHlwZTtcbiAgICBzdGF0ZTogQ2FsZW5kYXJTdGF0ZVR5cGU7XG4gICAgcHJpdmF0ZSBfdW5zdWJzY3JpYmUkO1xuICAgIHByaXZhdGUgX2VudGVyRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2RhdGVNb2RlbFR5cGU7XG4gICAgcHJpdmF0ZSBfZGF0ZU1vZGVsVmFsdWU7XG4gICAgcHJpdmF0ZSBfZGF0ZU1vZGVsVGltZTtcbiAgICBkYXRlcGlja2VyOiBDYWxlbmRhckRhdGVQaWNrZXJDb21wb25lbnQ7XG4gICAgc2V0IGxvY2FsZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgZGVmYXVsdFRpbWVWYWx1ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgcHJlZml4Q2xzKHZhbHVlOiBhbnkpO1xuICAgIHNldCBlbnRlckRpcmVjdGlvbih2YWx1ZTogYW55KTtcbiAgICBzZXQgdmlzaWJsZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgZ2V0RGF0ZUV4dHJhKHZhbHVlOiBhbnkpO1xuICAgIHNldCBkZWZhdWx0RGF0ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgbWluRGF0ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgbWF4RGF0ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgcGlja1RpbWUodmFsdWU6IGFueSk7XG4gICAgc2V0IHR5cGUodmFsdWU6IGFueSk7XG4gICAgc2V0IHNob3dTaG9ydGN1dCh2YWx1ZTogYW55KTtcbiAgICBzZXQgcm93U2l6ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgaW5maW5pdGUodmFsdWU6IGFueSk7XG4gICAgc2V0IGRlZmF1bHRWYWx1ZSh2YWx1ZTogYW55KTtcbiAgICBzZXQgb25TZWxlY3QodmFsdWU6IGFueSk7XG4gICAgb25DYW5jZWw6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ29uZmlybTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25TZWxlY3RIYXNEaXNhYmxlRGF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2xhc3M6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihfbG9jYWxlUHJvdmlkZXJTZXJ2aWNlOiBMb2NhbGVQcm92aWRlclNlcnZpY2UpO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUgfCBBcnJheTxEYXRlPiB8IG51bGwpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChkYXRlOiBEYXRlIHwgQXJyYXk8RGF0ZT4pID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWNlaXZlUHJvcHMobmV4dFByb3BzOiBDYWxlbmRhclByb3BzVHlwZSk6IHZvaWQ7XG4gICAgc2hvd0FuaW1hdGlvbigpOiB2b2lkO1xuICAgIGhpZGVBbmltYXRpb24oKTogdm9pZDtcbiAgICBzZWxlY3REYXRlOiAoZGF0ZTogRGF0ZSwgdXNlRGF0ZVRpbWU/OiBib29sZWFuLCBvbGRTdGF0ZT86IHtcbiAgICAgICAgc3RhcnREYXRlPzogRGF0ZTtcbiAgICAgICAgZW5kRGF0ZT86IERhdGU7XG4gICAgfSwgcHJvcHM/OiBDYWxlbmRhclByb3BzVHlwZSkgPT4gQ2FsZW5kYXJTdGF0ZVR5cGU7XG4gICAgd3JpdGVNb2RlbERhdGEoZGF0ZTogYW55KTogdm9pZDtcbiAgICBvblNlbGVjdGVkRGF0ZTogKGRhdGU6IERhdGUpID0+IHZvaWQ7XG4gICAgdHJpZ2dlclNlbGVjdEhhc0Rpc2FibGVEYXRlOiAoZGF0ZTogRGF0ZVtdKSA9PiB2b2lkO1xuICAgIG9uQ2xvc2U6ICgpID0+IHZvaWQ7XG4gICAgdHJpZ2dlckNvbmZpcm06ICgpID0+IHZvaWQ7XG4gICAgdHJpZ2dlckNhbmNlbCgpOiB2b2lkO1xuICAgIHRyaWdnZXJDbGVhcjogKCkgPT4gdm9pZDtcbiAgICBvblRpbWVDaGFuZ2U6IChkYXRlOiBEYXRlKSA9PiB2b2lkO1xuICAgIHNob3J0Y3V0U2VsZWN0OiAoc3RhcnREYXRlOiBEYXRlLCBlbmREYXRlOiBEYXRlLCBwcm9wcz86IENhbGVuZGFyUHJvcHNUeXBlKSA9PiB2b2lkO1xuICAgIHNldENsaWVudEhlaWdodDogKGhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIG9uQ2hhbmdlRm47XG4gICAgcHJpdmF0ZSBvblRvdWNoRm47XG59XG4iXX0=