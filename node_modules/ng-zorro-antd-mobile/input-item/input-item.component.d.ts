import { AfterViewInit, EventEmitter, OnInit, Renderer2, ElementRef, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { isTemplateRef } from '../core/util/check';
import { NzmInputType } from './input-item.definitions';
import * as ɵngcc0 from '@angular/core';
export declare class InputItemComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private element;
    private render;
    prefixCls: string;
    wrapCls: object;
    labelCls: object;
    controlCls: object;
    setFocus: object;
    pattern: string;
    autoFocus: boolean;
    inputType: NzmInputType;
    ngTemplate: boolean;
    isTemplateRef: typeof isTemplateRef;
    private _el;
    private _type;
    private _value;
    private _defaultValue;
    private _placeholder;
    private _editable;
    private _disabled;
    private _clear;
    private _maxLength;
    private _error;
    private _extra;
    private _labelNumber;
    private _updatePlaceholder;
    private _prefixListCls;
    private _name;
    private _moneyKeyboardAlign;
    private _locale;
    private _focus;
    private _isClear;
    private _fontColor;
    private _content;
    private _inputLock;
    lableRef: ElementRef;
    inputElementRef: ElementRef;
    get type(): NzmInputType;
    set type(value: NzmInputType);
    get value(): string;
    set value(v: string);
    get defaultValue(): string;
    set defaultValue(value: string);
    get placeholder(): string;
    set placeholder(value: string);
    get editable(): boolean;
    set editable(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    get clear(): boolean;
    set clear(value: boolean);
    get maxLength(): number;
    set maxLength(value: number);
    get error(): boolean;
    set error(value: boolean);
    get extra(): string | TemplateRef<any>;
    set extra(value: string | TemplateRef<any>);
    set labelNumber(value: number);
    set updatePlaceholder(value: boolean);
    get prefixListCls(): string;
    set prefixListCls(value: string);
    get name(): string;
    set name(value: string);
    get moneyKeyboardAlign(): string;
    set moneyKeyboardAlign(value: string);
    set locale(value: any);
    get fontColor(): string;
    set fontColor(value: string);
    set focus(value: any);
    get content(): string | TemplateRef<any>;
    set content(value: string | TemplateRef<any>);
    onChange: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onErrorClick: EventEmitter<any>;
    onExtraClick: EventEmitter<any>;
    clsItem: boolean;
    clsDisabled: boolean;
    clsError: boolean;
    clsFocus: boolean;
    clsAndroid: boolean;
    constructor(element: ElementRef, render: Renderer2);
    _onChange: (_: any) => void;
    setCls(): void;
    inputChange(inputValue: string): void;
    compositionStart(): void;
    compositionEnd(): void;
    inputFocus(value: any): void;
    inputBlur(value: any): void;
    clearInput(): void;
    errorClick(e: any): void;
    extraClick(e: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputItemComponent, "InputItem, nzm-input-item", never, { "type": "type"; "value": "value"; "defaultValue": "defaultValue"; "placeholder": "placeholder"; "editable": "editable"; "disabled": "disabled"; "clear": "clear"; "maxLength": "maxLength"; "error": "error"; "extra": "extra"; "labelNumber": "labelNumber"; "updatePlaceholder": "updatePlaceholder"; "prefixListCls": "prefixListCls"; "name": "name"; "moneyKeyboardAlign": "moneyKeyboardAlign"; "locale": "locale"; "fontColor": "fontColor"; "focus": "focus"; "content": "content"; }, { "onChange": "onChange"; "onBlur": "onBlur"; "onFocus": "onFocus"; "onErrorClick": "onErrorClick"; "onExtraClick": "onExtraClick"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtaXRlbS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW5wdXQtaXRlbS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBpc1RlbXBsYXRlUmVmIH0gZnJvbSAnLi4vY29yZS91dGlsL2NoZWNrJztcbmltcG9ydCB7IE56bUlucHV0VHlwZSB9IGZyb20gJy4vaW5wdXQtaXRlbS5kZWZpbml0aW9ucyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnB1dEl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZW5kZXI7XG4gICAgcHJlZml4Q2xzOiBzdHJpbmc7XG4gICAgd3JhcENsczogb2JqZWN0O1xuICAgIGxhYmVsQ2xzOiBvYmplY3Q7XG4gICAgY29udHJvbENsczogb2JqZWN0O1xuICAgIHNldEZvY3VzOiBvYmplY3Q7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBpbnB1dFR5cGU6IE56bUlucHV0VHlwZTtcbiAgICBuZ1RlbXBsYXRlOiBib29sZWFuO1xuICAgIGlzVGVtcGxhdGVSZWY6IHR5cGVvZiBpc1RlbXBsYXRlUmVmO1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3R5cGU7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdFZhbHVlO1xuICAgIHByaXZhdGUgX3BsYWNlaG9sZGVyO1xuICAgIHByaXZhdGUgX2VkaXRhYmxlO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIHByaXZhdGUgX2NsZWFyO1xuICAgIHByaXZhdGUgX21heExlbmd0aDtcbiAgICBwcml2YXRlIF9lcnJvcjtcbiAgICBwcml2YXRlIF9leHRyYTtcbiAgICBwcml2YXRlIF9sYWJlbE51bWJlcjtcbiAgICBwcml2YXRlIF91cGRhdGVQbGFjZWhvbGRlcjtcbiAgICBwcml2YXRlIF9wcmVmaXhMaXN0Q2xzO1xuICAgIHByaXZhdGUgX25hbWU7XG4gICAgcHJpdmF0ZSBfbW9uZXlLZXlib2FyZEFsaWduO1xuICAgIHByaXZhdGUgX2xvY2FsZTtcbiAgICBwcml2YXRlIF9mb2N1cztcbiAgICBwcml2YXRlIF9pc0NsZWFyO1xuICAgIHByaXZhdGUgX2ZvbnRDb2xvcjtcbiAgICBwcml2YXRlIF9jb250ZW50O1xuICAgIHByaXZhdGUgX2lucHV0TG9jaztcbiAgICBsYWJsZVJlZjogRWxlbWVudFJlZjtcbiAgICBpbnB1dEVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgZ2V0IHR5cGUoKTogTnptSW5wdXRUeXBlO1xuICAgIHNldCB0eXBlKHZhbHVlOiBOem1JbnB1dFR5cGUpO1xuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmc7XG4gICAgc2V0IHZhbHVlKHY6IHN0cmluZyk7XG4gICAgZ2V0IGRlZmF1bHRWYWx1ZSgpOiBzdHJpbmc7XG4gICAgc2V0IGRlZmF1bHRWYWx1ZSh2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgcGxhY2Vob2xkZXIoKTogc3RyaW5nO1xuICAgIHNldCBwbGFjZWhvbGRlcih2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgZWRpdGFibGUoKTogYm9vbGVhbjtcbiAgICBzZXQgZWRpdGFibGUodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGNsZWFyKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsZWFyKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgbWF4TGVuZ3RoKCk6IG51bWJlcjtcbiAgICBzZXQgbWF4TGVuZ3RoKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBlcnJvcigpOiBib29sZWFuO1xuICAgIHNldCBlcnJvcih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGV4dHJhKCk6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2V0IGV4dHJhKHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KTtcbiAgICBzZXQgbGFiZWxOdW1iZXIodmFsdWU6IG51bWJlcik7XG4gICAgc2V0IHVwZGF0ZVBsYWNlaG9sZGVyKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgcHJlZml4TGlzdENscygpOiBzdHJpbmc7XG4gICAgc2V0IHByZWZpeExpc3RDbHModmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nO1xuICAgIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBtb25leUtleWJvYXJkQWxpZ24oKTogc3RyaW5nO1xuICAgIHNldCBtb25leUtleWJvYXJkQWxpZ24odmFsdWU6IHN0cmluZyk7XG4gICAgc2V0IGxvY2FsZSh2YWx1ZTogYW55KTtcbiAgICBnZXQgZm9udENvbG9yKCk6IHN0cmluZztcbiAgICBzZXQgZm9udENvbG9yKHZhbHVlOiBzdHJpbmcpO1xuICAgIHNldCBmb2N1cyh2YWx1ZTogYW55KTtcbiAgICBnZXQgY29udGVudCgpOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNldCBjb250ZW50KHZhbHVlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+KTtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkVycm9yQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXh0cmFDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2xzSXRlbTogYm9vbGVhbjtcbiAgICBjbHNEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBjbHNFcnJvcjogYm9vbGVhbjtcbiAgICBjbHNGb2N1czogYm9vbGVhbjtcbiAgICBjbHNBbmRyb2lkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcjogUmVuZGVyZXIyKTtcbiAgICBfb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgc2V0Q2xzKCk6IHZvaWQ7XG4gICAgaW5wdXRDaGFuZ2UoaW5wdXRWYWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBjb21wb3NpdGlvblN0YXJ0KCk6IHZvaWQ7XG4gICAgY29tcG9zaXRpb25FbmQoKTogdm9pZDtcbiAgICBpbnB1dEZvY3VzKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIGlucHV0Qmx1cih2YWx1ZTogYW55KTogdm9pZDtcbiAgICBjbGVhcklucHV0KCk6IHZvaWQ7XG4gICAgZXJyb3JDbGljayhlOiBhbnkpOiB2b2lkO1xuICAgIGV4dHJhQ2xpY2soZTogYW55KTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG59XG4iXX0=