import { OnInit, NgZone, Renderer2, OnChanges, OnDestroy, ElementRef, EventEmitter, ComponentRef, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { PickerComponent } from './picker.component';
import { PickerOptions } from './picker-options.provider';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class PickerDirective implements OnDestroy, OnInit, OnChanges, ControlValueAccessor {
    private _viewContainerRef;
    private _elm;
    private _defaultOptions;
    private _cfr;
    private _renderer;
    private _zone;
    picker: ComponentRef<PickerComponent>;
    appendToBodyElement: HTMLElement;
    value: Array<any>;
    private _eventListeners;
    data: Array<any>;
    cols: Number;
    mask: boolean;
    title: string;
    visible: boolean;
    okText: string;
    dismissText: string;
    disabled: boolean;
    cascade: boolean;
    appendToBody: boolean;
    indicatorStyle: object;
    onVisibleChange: EventEmitter<boolean>;
    onPickerChange: EventEmitter<any>;
    onDismiss: EventEmitter<any>;
    onChange: (value: any[]) => void;
    onTouched: () => void;
    togglePicker(): void;
    constructor(_viewContainerRef: ViewContainerRef, _elm: ElementRef, _defaultOptions: PickerOptions, _cfr: ComponentFactoryResolver, _renderer: Renderer2, _zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(value: any): void;
    ngOnDestroy(): void;
    private onDocumentClick;
    private showPicker;
    private hidePicker;
    writeValue(value: any[]): void;
    registerOnChange(fn: (value: any[]) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    isPickerDataEqual(data1: any, data2: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PickerDirective, "[Picker], [nzm-picker]", never, { "disabled": "disabled"; "data": "data"; "cols": "cols"; "mask": "mask"; "title": "title"; "visible": "visible"; "okText": "okText"; "dismissText": "dismissText"; "cascade": "cascade"; "appendToBody": "appendToBody"; "indicatorStyle": "indicatorStyle"; }, { "onVisibleChange": "onVisibleChange"; "onPickerChange": "onPickerChange"; "onDismiss": "onDismiss"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJwaWNrZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBOZ1pvbmUsIFJlbmRlcmVyMiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQ29tcG9uZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9waWNrZXItb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBpY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0LCBPbkNoYW5nZXMsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgX2VsbTtcbiAgICBwcml2YXRlIF9kZWZhdWx0T3B0aW9ucztcbiAgICBwcml2YXRlIF9jZnI7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwaWNrZXI6IENvbXBvbmVudFJlZjxQaWNrZXJDb21wb25lbnQ+O1xuICAgIGFwcGVuZFRvQm9keUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHZhbHVlOiBBcnJheTxhbnk+O1xuICAgIHByaXZhdGUgX2V2ZW50TGlzdGVuZXJzO1xuICAgIGRhdGE6IEFycmF5PGFueT47XG4gICAgY29sczogTnVtYmVyO1xuICAgIG1hc2s6IGJvb2xlYW47XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIG9rVGV4dDogc3RyaW5nO1xuICAgIGRpc21pc3NUZXh0OiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY2FzY2FkZTogYm9vbGVhbjtcbiAgICBhcHBlbmRUb0JvZHk6IGJvb2xlYW47XG4gICAgaW5kaWNhdG9yU3R5bGU6IG9iamVjdDtcbiAgICBvblZpc2libGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBvblBpY2tlckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25EaXNtaXNzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBhbnlbXSkgPT4gdm9pZDtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgdG9nZ2xlUGlja2VyKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIF9lbG06IEVsZW1lbnRSZWYsIF9kZWZhdWx0T3B0aW9uczogUGlja2VyT3B0aW9ucywgX2NmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX3pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgb25Eb2N1bWVudENsaWNrO1xuICAgIHByaXZhdGUgc2hvd1BpY2tlcjtcbiAgICBwcml2YXRlIGhpZGVQaWNrZXI7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55W10pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55W10pID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGlzUGlja2VyRGF0YUVxdWFsKGRhdGExOiBhbnksIGRhdGEyOiBhbnkpOiBhbnk7XG59XG4iXX0=