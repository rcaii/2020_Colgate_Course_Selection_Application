import { EventEmitter, OnChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class StepperComponent implements OnChanges, ControlValueAccessor {
    prefixCls: string;
    upDisableCls: object;
    downDisableCls: object;
    stepperCls: object;
    private _max;
    private _min;
    private _value;
    private _step;
    private _defaultValue;
    private _disabled;
    private _readOnly;
    private _showNumber;
    private _upDisabled;
    private _downDisabled;
    private _isUpClick;
    private _isDownClick;
    get max(): number;
    set max(value: number);
    get min(): number;
    set min(value: number);
    get value(): number;
    set value(v: number);
    set step(value: any);
    set defaultValue(value: any);
    get disabled(): boolean;
    set disabled(value: boolean);
    get readOnly(): boolean;
    set readOnly(value: boolean);
    set showNumber(value: boolean);
    onChange: EventEmitter<any>;
    clsStepper: boolean;
    clsStpDisabled: boolean;
    clsShowNum: boolean;
    private onChangeFn;
    private onTouchFn;
    constructor();
    onIncrease(): void;
    onDecrease(): void;
    inputChange(event: any): void;
    setCls(): void;
    ngOnChanges(): void;
    writeValue(value: number): void;
    registerOnChange(fn: (value: number) => void): void;
    registerOnTouched(fn: (value: number) => void): void;
    plus(num1: number, num2: number): number;
    minus(num1: number, num2: number): number;
    digitLength(num: number): number;
    times(num1: number, num2: number): number;
    floatToFixed(num: number): number;
    strip(num: number, precision?: number): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StepperComponent, "Stepper, nzm-stepper", never, { "max": "max"; "min": "min"; "value": "value"; "step": "step"; "defaultValue": "defaultValue"; "disabled": "disabled"; "readOnly": "readOnly"; "showNumber": "showNumber"; }, { "onChange": "onChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdGVwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJlZml4Q2xzOiBzdHJpbmc7XG4gICAgdXBEaXNhYmxlQ2xzOiBvYmplY3Q7XG4gICAgZG93bkRpc2FibGVDbHM6IG9iamVjdDtcbiAgICBzdGVwcGVyQ2xzOiBvYmplY3Q7XG4gICAgcHJpdmF0ZSBfbWF4O1xuICAgIHByaXZhdGUgX21pbjtcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBwcml2YXRlIF9zdGVwO1xuICAgIHByaXZhdGUgX2RlZmF1bHRWYWx1ZTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICBwcml2YXRlIF9yZWFkT25seTtcbiAgICBwcml2YXRlIF9zaG93TnVtYmVyO1xuICAgIHByaXZhdGUgX3VwRGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfZG93bkRpc2FibGVkO1xuICAgIHByaXZhdGUgX2lzVXBDbGljaztcbiAgICBwcml2YXRlIF9pc0Rvd25DbGljaztcbiAgICBnZXQgbWF4KCk6IG51bWJlcjtcbiAgICBzZXQgbWF4KHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBtaW4oKTogbnVtYmVyO1xuICAgIHNldCBtaW4odmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHZhbHVlKCk6IG51bWJlcjtcbiAgICBzZXQgdmFsdWUodjogbnVtYmVyKTtcbiAgICBzZXQgc3RlcCh2YWx1ZTogYW55KTtcbiAgICBzZXQgZGVmYXVsdFZhbHVlKHZhbHVlOiBhbnkpO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHJlYWRPbmx5KCk6IGJvb2xlYW47XG4gICAgc2V0IHJlYWRPbmx5KHZhbHVlOiBib29sZWFuKTtcbiAgICBzZXQgc2hvd051bWJlcih2YWx1ZTogYm9vbGVhbik7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNsc1N0ZXBwZXI6IGJvb2xlYW47XG4gICAgY2xzU3RwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY2xzU2hvd051bTogYm9vbGVhbjtcbiAgICBwcml2YXRlIG9uQ2hhbmdlRm47XG4gICAgcHJpdmF0ZSBvblRvdWNoRm47XG4gICAgY29uc3RydWN0b3IoKTtcbiAgICBvbkluY3JlYXNlKCk6IHZvaWQ7XG4gICAgb25EZWNyZWFzZSgpOiB2b2lkO1xuICAgIGlucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNldENscygpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkKTogdm9pZDtcbiAgICBwbHVzKG51bTE6IG51bWJlciwgbnVtMjogbnVtYmVyKTogbnVtYmVyO1xuICAgIG1pbnVzKG51bTE6IG51bWJlciwgbnVtMjogbnVtYmVyKTogbnVtYmVyO1xuICAgIGRpZ2l0TGVuZ3RoKG51bTogbnVtYmVyKTogbnVtYmVyO1xuICAgIHRpbWVzKG51bTE6IG51bWJlciwgbnVtMjogbnVtYmVyKTogbnVtYmVyO1xuICAgIGZsb2F0VG9GaXhlZChudW06IG51bWJlcik6IG51bWJlcjtcbiAgICBzdHJpcChudW06IG51bWJlciwgcHJlY2lzaW9uPzogbnVtYmVyKTogbnVtYmVyO1xufVxuIl19