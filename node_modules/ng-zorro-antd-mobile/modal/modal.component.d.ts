import { ElementRef, TemplateRef, EventEmitter } from '@angular/core';
import { ModalOptions } from './modal-options.provider';
import { Observable } from 'rxjs';
import { ControlValueAccessor } from '@angular/forms';
import { ModalRef } from './modal-ref.class';
import * as ɵngcc0 from '@angular/core';
export declare class ModalComponent<T = any, R = any> extends ModalRef<T, R> implements ControlValueAccessor {
    option: ModalOptions;
    elementRef: ElementRef;
    autoFocus: {
        focus: boolean;
        date: Date;
    };
    transitionName: string;
    maskTransitionName: string;
    wrapCls: object;
    cls: object;
    btnGroupClass: object;
    data: {
        text: string;
        password: string;
    };
    onChanged: (visiable: boolean) => {};
    onTouched: () => {};
    set title(value: string | TemplateRef<any>);
    set closable(value: boolean);
    set maskClosable(value: boolean);
    set popup(value: boolean);
    set animationType(value: string);
    set transparent(value: boolean);
    set footer(value: Array<any>);
    set platform(value: string);
    set className(value: string);
    set wrapClassName(value: string);
    set actions(value: Array<any>);
    set defaultValue(value: Array<string>);
    set type(value: string);
    set placeholders(value: Array<string>);
    set operation(value: boolean);
    onClose: EventEmitter<any>;
    afterOpenEmitter: EventEmitter<any>;
    afterCloseEmitter: EventEmitter<any>;
    panend(event: any): void;
    constructor(option: ModalOptions, elementRef: ElementRef);
    isTemplateRef(value: string | TemplateRef<any>): boolean;
    isNoTitle(value: string | TemplateRef<any>): boolean;
    setTransitionName(visible: boolean): void;
    setActiveName(name: string): string;
    setLeaveActiveName(name: string): string;
    setClassMap(): void;
    inputChange(type: string, value: string): void;
    leaveAnimation(): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (_: boolean) => {}): void;
    registerOnTouched(fn: () => {}): void;
    get afterOpen(): Observable<void>;
    get afterClose(): Observable<R>;
    getInstance(): ModalComponent;
    getElement(): HTMLElement;
    close(): void;
    triggerOk(): void;
    triggerCancel(): void;
    destroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModalComponent<any, any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ModalComponent<any, any>, "Modal", never, { "title": "title"; "closable": "closable"; "maskClosable": "maskClosable"; "popup": "popup"; "animationType": "animationType"; "transparent": "transparent"; "footer": "footer"; "platform": "platform"; "className": "className"; "wrapClassName": "wrapClassName"; "actions": "actions"; "defaultValue": "defaultValue"; "type": "type"; "placeholders": "placeholders"; "operation": "operation"; }, { "onClose": "onClose"; "afterOpenEmitter": "afterOpenEmitter"; "afterCloseEmitter": "afterCloseEmitter"; }, never, ["*"]>;
}
export declare class ModalServiceComponent extends ModalComponent {
    option: ModalOptions;
    elementRef: ElementRef;
    constructor(option: ModalOptions, elementRef: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModalServiceComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ModalServiceComponent, "ModalService", never, {}, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1vZGFsUmVmIH0gZnJvbSAnLi9tb2RhbC1yZWYuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTW9kYWxDb21wb25lbnQ8VCA9IGFueSwgUiA9IGFueT4gZXh0ZW5kcyBNb2RhbFJlZjxULCBSPiBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBvcHRpb246IE1vZGFsT3B0aW9ucztcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIGF1dG9Gb2N1czoge1xuICAgICAgICBmb2N1czogYm9vbGVhbjtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICB9O1xuICAgIHRyYW5zaXRpb25OYW1lOiBzdHJpbmc7XG4gICAgbWFza1RyYW5zaXRpb25OYW1lOiBzdHJpbmc7XG4gICAgd3JhcENsczogb2JqZWN0O1xuICAgIGNsczogb2JqZWN0O1xuICAgIGJ0bkdyb3VwQ2xhc3M6IG9iamVjdDtcbiAgICBkYXRhOiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICB9O1xuICAgIG9uQ2hhbmdlZDogKHZpc2lhYmxlOiBib29sZWFuKSA9PiB7fTtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHt9O1xuICAgIHNldCB0aXRsZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pik7XG4gICAgc2V0IGNsb3NhYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICBzZXQgbWFza0Nsb3NhYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICBzZXQgcG9wdXAodmFsdWU6IGJvb2xlYW4pO1xuICAgIHNldCBhbmltYXRpb25UeXBlKHZhbHVlOiBzdHJpbmcpO1xuICAgIHNldCB0cmFuc3BhcmVudCh2YWx1ZTogYm9vbGVhbik7XG4gICAgc2V0IGZvb3Rlcih2YWx1ZTogQXJyYXk8YW55Pik7XG4gICAgc2V0IHBsYXRmb3JtKHZhbHVlOiBzdHJpbmcpO1xuICAgIHNldCBjbGFzc05hbWUodmFsdWU6IHN0cmluZyk7XG4gICAgc2V0IHdyYXBDbGFzc05hbWUodmFsdWU6IHN0cmluZyk7XG4gICAgc2V0IGFjdGlvbnModmFsdWU6IEFycmF5PGFueT4pO1xuICAgIHNldCBkZWZhdWx0VmFsdWUodmFsdWU6IEFycmF5PHN0cmluZz4pO1xuICAgIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpO1xuICAgIHNldCBwbGFjZWhvbGRlcnModmFsdWU6IEFycmF5PHN0cmluZz4pO1xuICAgIHNldCBvcGVyYXRpb24odmFsdWU6IGJvb2xlYW4pO1xuICAgIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFmdGVyT3BlbkVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFmdGVyQ2xvc2VFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwYW5lbmQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBNb2RhbE9wdGlvbnMsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIGlzVGVtcGxhdGVSZWYodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pOiBib29sZWFuO1xuICAgIGlzTm9UaXRsZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pik6IGJvb2xlYW47XG4gICAgc2V0VHJhbnNpdGlvbk5hbWUodmlzaWJsZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0QWN0aXZlTmFtZShuYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgc2V0TGVhdmVBY3RpdmVOYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZztcbiAgICBzZXRDbGFzc01hcCgpOiB2b2lkO1xuICAgIGlucHV0Q2hhbmdlKHR5cGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgbGVhdmVBbmltYXRpb24oKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYm9vbGVhbikgPT4ge30pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB7fSk6IHZvaWQ7XG4gICAgZ2V0IGFmdGVyT3BlbigpOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIGdldCBhZnRlckNsb3NlKCk6IE9ic2VydmFibGU8Uj47XG4gICAgZ2V0SW5zdGFuY2UoKTogTW9kYWxDb21wb25lbnQ7XG4gICAgZ2V0RWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIHRyaWdnZXJPaygpOiB2b2lkO1xuICAgIHRyaWdnZXJDYW5jZWwoKTogdm9pZDtcbiAgICBkZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNb2RhbFNlcnZpY2VDb21wb25lbnQgZXh0ZW5kcyBNb2RhbENvbXBvbmVudCB7XG4gICAgb3B0aW9uOiBNb2RhbE9wdGlvbnM7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IE1vZGFsT3B0aW9ucywgZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG59XG4iXX0=