import { OnInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class SliderHandleComponent implements OnInit, OnDestroy {
    private _elf;
    private _sanitizer;
    left: number;
    private _min;
    private _max;
    private _step;
    private _value;
    private _disabled;
    private _marks;
    private _handleStyle;
    private _sliderLength;
    private _sliderStart;
    private _minBound;
    private _maxBound;
    private _startX;
    private _isDraging;
    private _handleStatus;
    private _handleOffsetX;
    private _oldValue;
    set min(value: number);
    set max(value: number);
    set minBound(value: number);
    set maxBound(value: number);
    set step(value: number);
    set value(value: number);
    set disabled(value: boolean);
    set sliderLength(value: number);
    set sliderStart(value: number);
    get handleStyle(): object;
    set handleStyle(value: object);
    onChange: EventEmitter<any>;
    onAfterChange: EventEmitter<any>;
    panstart(event: any): void;
    panmove(event: any): void;
    panend(event: any): void;
    constructor(_elf: ElementRef, _sanitizer: DomSanitizer);
    mouseDown: (event: any) => void;
    mouseMove: (event: any) => void;
    mouseUp: (event: any) => void;
    calcValueByPos(pos: any): number;
    calcValue(offset: any): number;
    getClosestPoint(val: any): number;
    getPrecision(step: any): number;
    calcOffset(value: any): number;
    pauseEvent(e: any): void;
    isMouseTarget(event: any): boolean;
    toConsumableArray(arr: any): any[];
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderHandleComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SliderHandleComponent, "SliderHandle, nzm-slider-handle", never, { "min": "min"; "max": "max"; "minBound": "minBound"; "maxBound": "maxBound"; "step": "step"; "value": "value"; "disabled": "disabled"; "sliderLength": "sliderLength"; "sliderStart": "sliderStart"; "handleStyle": "handleStyle"; }, { "onChange": "onChange"; "onAfterChange": "onAfterChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWhhbmRsZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2xpZGVyLWhhbmRsZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJIYW5kbGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWxmO1xuICAgIHByaXZhdGUgX3Nhbml0aXplcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbWluO1xuICAgIHByaXZhdGUgX21heDtcbiAgICBwcml2YXRlIF9zdGVwO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIHByaXZhdGUgX21hcmtzO1xuICAgIHByaXZhdGUgX2hhbmRsZVN0eWxlO1xuICAgIHByaXZhdGUgX3NsaWRlckxlbmd0aDtcbiAgICBwcml2YXRlIF9zbGlkZXJTdGFydDtcbiAgICBwcml2YXRlIF9taW5Cb3VuZDtcbiAgICBwcml2YXRlIF9tYXhCb3VuZDtcbiAgICBwcml2YXRlIF9zdGFydFg7XG4gICAgcHJpdmF0ZSBfaXNEcmFnaW5nO1xuICAgIHByaXZhdGUgX2hhbmRsZVN0YXR1cztcbiAgICBwcml2YXRlIF9oYW5kbGVPZmZzZXRYO1xuICAgIHByaXZhdGUgX29sZFZhbHVlO1xuICAgIHNldCBtaW4odmFsdWU6IG51bWJlcik7XG4gICAgc2V0IG1heCh2YWx1ZTogbnVtYmVyKTtcbiAgICBzZXQgbWluQm91bmQodmFsdWU6IG51bWJlcik7XG4gICAgc2V0IG1heEJvdW5kKHZhbHVlOiBudW1iZXIpO1xuICAgIHNldCBzdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKTtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIHNldCBzbGlkZXJMZW5ndGgodmFsdWU6IG51bWJlcik7XG4gICAgc2V0IHNsaWRlclN0YXJ0KHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBoYW5kbGVTdHlsZSgpOiBvYmplY3Q7XG4gICAgc2V0IGhhbmRsZVN0eWxlKHZhbHVlOiBvYmplY3QpO1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkFmdGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwYW5zdGFydChldmVudDogYW55KTogdm9pZDtcbiAgICBwYW5tb3ZlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHBhbmVuZChldmVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihfZWxmOiBFbGVtZW50UmVmLCBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpO1xuICAgIG1vdXNlRG93bjogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XG4gICAgbW91c2VNb3ZlOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcbiAgICBtb3VzZVVwOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcbiAgICBjYWxjVmFsdWVCeVBvcyhwb3M6IGFueSk6IG51bWJlcjtcbiAgICBjYWxjVmFsdWUob2Zmc2V0OiBhbnkpOiBudW1iZXI7XG4gICAgZ2V0Q2xvc2VzdFBvaW50KHZhbDogYW55KTogbnVtYmVyO1xuICAgIGdldFByZWNpc2lvbihzdGVwOiBhbnkpOiBudW1iZXI7XG4gICAgY2FsY09mZnNldCh2YWx1ZTogYW55KTogbnVtYmVyO1xuICAgIHBhdXNlRXZlbnQoZTogYW55KTogdm9pZDtcbiAgICBpc01vdXNlVGFyZ2V0KGV2ZW50OiBhbnkpOiBib29sZWFuO1xuICAgIHRvQ29uc3VtYWJsZUFycmF5KGFycjogYW55KTogYW55W107XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19