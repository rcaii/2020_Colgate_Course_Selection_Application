import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class SliderComponent implements OnInit, ControlValueAccessor {
    private _elf;
    prefixCls: string;
    sliderLength: number;
    sliderStart: number;
    sliderCls: object;
    offset: number;
    length: number;
    private _min;
    private _max;
    private _step;
    private _value;
    private _defaultValue;
    private _disabled;
    private _marks;
    private _dots;
    private _included;
    private _handleStyle;
    private _trackStyle;
    private _railStyle;
    get min(): number;
    set min(value: number);
    get max(): number;
    set max(value: number);
    get step(): number;
    set step(value: number);
    get value(): number;
    set value(value: number);
    set defaultValue(value: any);
    get disabled(): boolean;
    set disabled(value: boolean);
    get marks(): object;
    set marks(value: object);
    get dots(): boolean;
    set dots(value: boolean);
    get included(): boolean;
    set included(value: boolean);
    get handleStyle(): object;
    set handleStyle(value: object);
    get trackStyle(): object;
    set trackStyle(value: object);
    get railStyle(): object;
    set railStyle(value: object);
    onAfterChange: EventEmitter<any>;
    onChange: EventEmitter<any>;
    amSliderWrapper: boolean;
    private _ngModelOnChange;
    private _ngModelOnTouched;
    constructor(_elf: ElementRef);
    setCls(): void;
    handleChange(e: any): void;
    handleAfterChange(e: any): void;
    valueRange(): void;
    ngOnInit(): void;
    writeValue(value: number): void;
    setValue(value: number, isWriteValue?: boolean): void;
    setTrack(e: any): void;
    registerOnChange(fn: (value: number) => void): void;
    registerOnTouched(fn: (value: number) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SliderComponent, "Slider , nzm-slider", never, { "min": "min"; "max": "max"; "step": "step"; "value": "value"; "defaultValue": "defaultValue"; "disabled": "disabled"; "marks": "marks"; "dots": "dots"; "included": "included"; "handleStyle": "handleStyle"; "trackStyle": "trackStyle"; "railStyle": "railStyle"; }, { "onAfterChange": "onAfterChange"; "onChange": "onChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgX2VsZjtcbiAgICBwcmVmaXhDbHM6IHN0cmluZztcbiAgICBzbGlkZXJMZW5ndGg6IG51bWJlcjtcbiAgICBzbGlkZXJTdGFydDogbnVtYmVyO1xuICAgIHNsaWRlckNsczogb2JqZWN0O1xuICAgIG9mZnNldDogbnVtYmVyO1xuICAgIGxlbmd0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgX21pbjtcbiAgICBwcml2YXRlIF9tYXg7XG4gICAgcHJpdmF0ZSBfc3RlcDtcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBwcml2YXRlIF9kZWZhdWx0VmFsdWU7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfbWFya3M7XG4gICAgcHJpdmF0ZSBfZG90cztcbiAgICBwcml2YXRlIF9pbmNsdWRlZDtcbiAgICBwcml2YXRlIF9oYW5kbGVTdHlsZTtcbiAgICBwcml2YXRlIF90cmFja1N0eWxlO1xuICAgIHByaXZhdGUgX3JhaWxTdHlsZTtcbiAgICBnZXQgbWluKCk6IG51bWJlcjtcbiAgICBzZXQgbWluKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBtYXgoKTogbnVtYmVyO1xuICAgIHNldCBtYXgodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHN0ZXAoKTogbnVtYmVyO1xuICAgIHNldCBzdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCB2YWx1ZSgpOiBudW1iZXI7XG4gICAgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpO1xuICAgIHNldCBkZWZhdWx0VmFsdWUodmFsdWU6IGFueSk7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgbWFya3MoKTogb2JqZWN0O1xuICAgIHNldCBtYXJrcyh2YWx1ZTogb2JqZWN0KTtcbiAgICBnZXQgZG90cygpOiBib29sZWFuO1xuICAgIHNldCBkb3RzKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgaW5jbHVkZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgaW5jbHVkZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBoYW5kbGVTdHlsZSgpOiBvYmplY3Q7XG4gICAgc2V0IGhhbmRsZVN0eWxlKHZhbHVlOiBvYmplY3QpO1xuICAgIGdldCB0cmFja1N0eWxlKCk6IG9iamVjdDtcbiAgICBzZXQgdHJhY2tTdHlsZSh2YWx1ZTogb2JqZWN0KTtcbiAgICBnZXQgcmFpbFN0eWxlKCk6IG9iamVjdDtcbiAgICBzZXQgcmFpbFN0eWxlKHZhbHVlOiBvYmplY3QpO1xuICAgIG9uQWZ0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhbVNsaWRlcldyYXBwZXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfbmdNb2RlbE9uQ2hhbmdlO1xuICAgIHByaXZhdGUgX25nTW9kZWxPblRvdWNoZWQ7XG4gICAgY29uc3RydWN0b3IoX2VsZjogRWxlbWVudFJlZik7XG4gICAgc2V0Q2xzKCk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlKGU6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQWZ0ZXJDaGFuZ2UoZTogYW55KTogdm9pZDtcbiAgICB2YWx1ZVJhbmdlKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIHNldFZhbHVlKHZhbHVlOiBudW1iZXIsIGlzV3JpdGVWYWx1ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNldFRyYWNrKGU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXX0=