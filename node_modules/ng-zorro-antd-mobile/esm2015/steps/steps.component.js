import { __decorate, __metadata } from "tslib";
import { Component, OnInit, Input, ContentChildren, QueryList, AfterContentInit, HostBinding, Renderer2, ElementRef } from '@angular/core';
import { StepStatusEnum, StepDirectionEnum } from './step/step.component';
import { StepComponent } from './step/step.component';
let StepsComponent = class StepsComponent {
    constructor(_elf, _render) {
        this._elf = _elf;
        this._render = _render;
        this.prefixCls = 'am-steps';
        this._current = 0;
        this._status = StepStatusEnum.PROCESS;
        this._direction = StepDirectionEnum.VERTICAL;
        this.clsSteps = true;
    }
    set current(value) {
        if (value >= 0) {
            this._current = value;
        }
    }
    set size(value) {
        this._size = value;
        this.setCls();
    }
    set status(value) {
        this._status = value;
        if (this.stepItems) {
            this.setStepStyle();
        }
    }
    set direction(value) {
        this._direction = value;
        this.setCls();
    }
    setStepStyle() {
        const itemCount = this.stepItems.length;
        const itemArr = this.stepItems['_results'];
        for (let index = 0; index < itemCount; index++) {
            const step = itemArr[index];
            step.stepNumber = index + 1;
            if (index < itemCount - 1 && itemArr[index + 1].status === StepStatusEnum.ERROR) {
                step.stepItemCls = step.stepItemCls
                    ? Object.assign(step.stepItemCls, { 'error-tail': true })
                    : { 'error-tail': true };
            }
            let icon = step.icon;
            if (!step.status) {
                if (index === this._current) {
                    step.status = this._status;
                }
                else if (index < this._current) {
                    step.status = StepStatusEnum.FINISH;
                }
                else {
                    step.status = StepStatusEnum.WAIT;
                }
            }
            else if (step.status && !icon) {
                switch (step.status) {
                    case StepStatusEnum.FINISH:
                        icon = 'check-circle-o';
                        break;
                    case StepStatusEnum.ERROR:
                        icon = 'cross-circle-o';
                        break;
                }
            }
            if (!icon && step.status !== StepStatusEnum.PROCESS) {
                if (index < this._current) {
                    icon = 'check-circle-o';
                }
                else if (index > this._current) {
                    icon = 'ellipsis';
                    step.stepItemCls = step.stepItemCls
                        ? Object.assign(step.stepItemCls, { 'ellipsis-item': true })
                        : { 'ellipsis-item': true };
                }
                if ((this._status === StepStatusEnum.ERROR && index === this._current) ||
                    step.status === StepStatusEnum.ERROR) {
                    icon = 'cross-circle-o';
                }
            }
            step.icon = icon;
            step.iconSize = this._size === 'small' ? (this._status === StepStatusEnum.WAIT ? 'xxs' : 'xs') : 'md';
            step.setClass();
        }
    }
    setCls() {
        if (this._direction === StepDirectionEnum.HORIZONTAL) {
            this.clsStepsLabelVtl = true;
            this.clsStepsHztl = true;
            this.clsStepsVtl = false;
        }
        else if (this._direction === StepDirectionEnum.VERTICAL) {
            this.clsStepsVtl = true;
            this.clsStepsHztl = false;
        }
        if (this._size === 'small') {
            this.clsStepsSmall = true;
        }
        else {
            this.clsStepsSmall = false;
        }
    }
    ngOnInit() {
        this.setCls();
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.setStepStyle();
        }, 0);
        this.stepItems.changes.subscribe(change => {
            setTimeout(() => {
                this.setStepStyle();
            }, 0);
        });
    }
};
StepsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    ContentChildren(StepComponent),
    __metadata("design:type", QueryList)
], StepsComponent.prototype, "stepItems", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StepsComponent.prototype, "current", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StepsComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], StepsComponent.prototype, "status", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], StepsComponent.prototype, "direction", null);
__decorate([
    HostBinding('class.am-steps'),
    __metadata("design:type", Boolean)
], StepsComponent.prototype, "clsSteps", void 0);
__decorate([
    HostBinding('class.am-steps-small'),
    __metadata("design:type", Boolean)
], StepsComponent.prototype, "clsStepsSmall", void 0);
__decorate([
    HostBinding('class.am-steps-label-vertical'),
    __metadata("design:type", Boolean)
], StepsComponent.prototype, "clsStepsLabelVtl", void 0);
__decorate([
    HostBinding('class.am-steps-vertical'),
    __metadata("design:type", Boolean)
], StepsComponent.prototype, "clsStepsVtl", void 0);
__decorate([
    HostBinding('class.am-steps-horizontal'),
    __metadata("design:type", Boolean)
], StepsComponent.prototype, "clsStepsHztl", void 0);
StepsComponent = __decorate([
    Component({
        selector: 'Steps,nzm-steps',
        template: "<ng-content></ng-content>\n"
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], StepsComponent);
export { StepsComponent };
//# sourceMappingURL=data:application/json;base64,