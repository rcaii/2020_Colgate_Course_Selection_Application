var StepComponent_1;
import { __decorate, __metadata } from "tslib";
import { Component, OnInit, forwardRef, Input, ElementRef, TemplateRef, ViewEncapsulation, HostBinding } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
let StepComponent = StepComponent_1 = class StepComponent {
    constructor(_el) {
        this._el = _el;
        this.prefixCls = 'am-steps';
        this.stepItemCls = {};
        this.isIconString = true;
        this.title = null;
        this.description = null;
        this.clsStepItem = true;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        if (value) {
            this._status = value;
            this.setClass();
        }
    }
    get icon() {
        return this._icon;
    }
    set icon(value) {
        if (value) {
            this._icon = value;
            this.setClass();
        }
    }
    isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    setClass() {
        this.iconCls = {
            [`${this.prefixCls}-icon`]: true
        };
        this.stepItemCls = Object.assign(this.stepItemCls, {
            [`${this.prefixCls}-item-${this.status}`]: true,
            [`${this.prefixCls}-item-custom`]: this.icon
        });
    }
    ngOnInit() { }
};
StepComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], StepComponent.prototype, "status", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], StepComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], StepComponent.prototype, "description", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StepComponent.prototype, "icon", null);
__decorate([
    HostBinding('class.am-steps-item'),
    __metadata("design:type", Boolean)
], StepComponent.prototype, "clsStepItem", void 0);
StepComponent = StepComponent_1 = __decorate([
    Component({
        selector: 'Step, nzm-step',
        template: "<div [ngClass]=\"stepItemCls\">\n  <div class=\"{{ prefixCls }}-item-tail\">\n    {{ tailContent }}\n  </div>\n  <div class=\"{{ prefixCls }}-item-icon\">\n    <span *ngIf=\"isTemplateRef(icon)\" [ngClass]=\"iconCls\">\n      <ng-template [ngTemplateOutlet]=\"icon\"></ng-template>\n    </span>\n    <span *ngIf=\"!isTemplateRef(icon) && (status === 'error' || status === 'finish' || status === 'wait')\" [ngClass]=\"iconCls\">\n      <Icon [type]=\"icon\" [size]=\"iconSize\"> </Icon>\n    </span>\n    <span *ngIf=\"!isTemplateRef(icon) && !(status === 'error' || status === 'finish' || status === 'wait')\" [ngClass]=\"iconCls\"\n      >{{ stepNumber }}\n    </span>\n  </div>\n  <div class=\"{{ prefixCls }}-item-content\">\n    <div class=\"{{ prefixCls }}-item-title\">\n      <ng-container *ngIf=\"!isTemplateRef(title); else titleTemplate\">{{ title }}</ng-container>\n    </div>\n    <div *ngIf=\"description\" class=\"{{ prefixCls }}-item-description\">\n      <ng-container *ngIf=\"!isTemplateRef(description); else descriptionTemplate\">{{ description }}</ng-container>\n    </div>\n  </div>\n</div>\n<ng-template #titleTemplate>\n  <ng-template [ngTemplateOutlet]=\"title\"></ng-template>\n</ng-template>\n<ng-template #descriptionTemplate>\n  <ng-template [ngTemplateOutlet]=\"description\"></ng-template>\n</ng-template>\n",
        encapsulation: ViewEncapsulation.None,
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => StepComponent_1),
                multi: true
            }
        ]
    }),
    __metadata("design:paramtypes", [ElementRef])
], StepComponent);
export { StepComponent };
export var StepStatusEnum;
(function (StepStatusEnum) {
    StepStatusEnum["WAIT"] = "wait";
    StepStatusEnum["PROCESS"] = "process";
    StepStatusEnum["FINISH"] = "finish";
    StepStatusEnum["ERROR"] = "error";
})(StepStatusEnum || (StepStatusEnum = {}));
export var StepDirectionEnum;
(function (StepDirectionEnum) {
    StepDirectionEnum["VERTICAL"] = "vertical";
    StepDirectionEnum["HORIZONTAL"] = "horizontal";
})(StepDirectionEnum || (StepDirectionEnum = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbInN0ZXBzL3N0ZXAvc3RlcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixVQUFVLEVBQ1YsS0FBSyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWNuRCxJQUFhLGFBQWEscUJBQTFCLE1BQWEsYUFBYTtJQXdDeEIsWUFBb0IsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7UUF2Q25DLGNBQVMsR0FBRyxVQUFVLENBQUM7UUFDdkIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFJakIsaUJBQVksR0FBWSxJQUFJLENBQUM7UUFpQjdCLFVBQUssR0FBOEIsSUFBSSxDQUFDO1FBRXhDLGdCQUFXLEdBQThCLElBQUksQ0FBQztRQWE5QyxnQkFBVyxHQUFZLElBQUksQ0FBQztJQUVVLENBQUM7SUEzQnZDLElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsS0FBcUI7UUFDOUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBTUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUFnQztRQUN2QyxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFPRCxhQUFhLENBQUMsS0FBSztRQUNqQixPQUFPLEtBQUssWUFBWSxXQUFXLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLE9BQU8sQ0FBQyxFQUFFLElBQUk7U0FDakMsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pELENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUk7WUFDL0MsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLGNBQWMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQzdDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRLEtBQUksQ0FBQztDQUNkLENBQUE7O1lBakIwQixVQUFVOztBQTNCbkM7SUFEQyxLQUFLLEVBQUU7OzsyQ0FHUDtBQVFEO0lBREMsS0FBSyxFQUFFOzs0Q0FDZ0M7QUFFeEM7SUFEQyxLQUFLLEVBQUU7O2tEQUNzQztBQUU5QztJQURDLEtBQUssRUFBRTs7O3lDQUdQO0FBU0Q7SUFEQyxXQUFXLENBQUMscUJBQXFCLENBQUM7O2tEQUNQO0FBdENqQixhQUFhO0lBWnpCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxnQkFBZ0I7UUFDMUIscTBDQUFvQztRQUNwQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUNyQyxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWEsQ0FBQztnQkFDNUMsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztxQ0F5Q3lCLFVBQVU7R0F4Q3hCLGFBQWEsQ0F5RHpCO1NBekRZLGFBQWE7QUEyRDFCLE1BQU0sQ0FBTixJQUFZLGNBS1g7QUFMRCxXQUFZLGNBQWM7SUFDeEIsK0JBQWEsQ0FBQTtJQUNiLHFDQUFtQixDQUFBO0lBQ25CLG1DQUFpQixDQUFBO0lBQ2pCLGlDQUFlLENBQUE7QUFDakIsQ0FBQyxFQUxXLGNBQWMsS0FBZCxjQUFjLFFBS3pCO0FBQ0QsTUFBTSxDQUFOLElBQVksaUJBR1g7QUFIRCxXQUFZLGlCQUFpQjtJQUMzQiwwQ0FBcUIsQ0FBQTtJQUNyQiw4Q0FBeUIsQ0FBQTtBQUMzQixDQUFDLEVBSFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUc1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgRWxlbWVudFJlZixcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBIb3N0QmluZGluZ1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdTdGVwLCBuem0tc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdGVwLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTdGVwQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFN0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcmVmaXhDbHMgPSAnYW0tc3RlcHMnO1xuICBzdGVwSXRlbUNscyA9IHt9O1xuICBpY29uQ2xzOiBvYmplY3Q7XG4gIHRhaWxDb250ZW50OiBzdHJpbmc7XG4gIHN0ZXBOdW1iZXI6IG51bWJlcjtcbiAgaXNJY29uU3RyaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgaWNvblNpemU6IHN0cmluZztcblxuICBwcml2YXRlIF9zdGF0dXM6IFN0ZXBTdGF0dXNFbnVtO1xuICBwcml2YXRlIF9pY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpXG4gIGdldCBzdGF0dXMoKTogU3RlcFN0YXR1c0VudW0ge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gIH1cbiAgc2V0IHN0YXR1cyh2YWx1ZTogU3RlcFN0YXR1c0VudW0pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgIH1cbiAgfVxuICBASW5wdXQoKVxuICB0aXRsZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XG4gIEBJbnB1dCgpXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcbiAgQElucHV0KClcbiAgZ2V0IGljb24oKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb247XG4gIH1cbiAgc2V0IGljb24odmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX2ljb24gPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFtLXN0ZXBzLWl0ZW0nKVxuICBjbHNTdGVwSXRlbTogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgaXNUZW1wbGF0ZVJlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuICB9XG5cbiAgc2V0Q2xhc3MoKSB7XG4gICAgdGhpcy5pY29uQ2xzID0ge1xuICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1pY29uYF06IHRydWVcbiAgICB9O1xuICAgIHRoaXMuc3RlcEl0ZW1DbHMgPSBPYmplY3QuYXNzaWduKHRoaXMuc3RlcEl0ZW1DbHMsIHtcbiAgICAgIFtgJHt0aGlzLnByZWZpeENsc30taXRlbS0ke3RoaXMuc3RhdHVzfWBdOiB0cnVlLFxuICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1pdGVtLWN1c3RvbWBdOiB0aGlzLmljb25cbiAgICB9KTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge31cbn1cblxuZXhwb3J0IGVudW0gU3RlcFN0YXR1c0VudW0ge1xuICBXQUlUID0gJ3dhaXQnLFxuICBQUk9DRVNTID0gJ3Byb2Nlc3MnLFxuICBGSU5JU0ggPSAnZmluaXNoJyxcbiAgRVJST1IgPSAnZXJyb3InXG59XG5leHBvcnQgZW51bSBTdGVwRGlyZWN0aW9uRW51bSB7XG4gIFZFUlRJQ0FMID0gJ3ZlcnRpY2FsJyxcbiAgSE9SSVpPTlRBTCA9ICdob3Jpem9udGFsJ1xufVxuIl19