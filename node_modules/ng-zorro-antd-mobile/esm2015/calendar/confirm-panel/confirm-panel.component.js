import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, Input, HostBinding } from '@angular/core';
import { formatDate } from '../util/index';
let CalendarConfirmPanelComponent = class CalendarConfirmPanelComponent {
    constructor() {
        this.props = {
            formatStr: 'yyyy-MM-dd hh:mm'
        };
        this.confirmPane = true;
        this.triggerConfirm = () => {
            const { onConfirm, disableBtn } = this.props;
            if (!disableBtn) {
                onConfirm();
            }
        };
    }
    set propsData(value) {
        this.props = Object.assign(Object.assign({}, this.props), value);
    }
    set disableBtn(value) {
        this.props.disableBtn = value;
    }
    set formatStr(value) {
        this.props.formatStr = value;
    }
    set startDateTime(value) {
        this.props.startDateTime = value;
        this.formatTime();
    }
    set endDateTime(value) {
        this.props.endDateTime = value;
        this.formatTime();
    }
    set onConfirm(value) {
        this.props.onConfirm = value;
    }
    formatTime() {
        const { type, locale, disableBtn } = this.props;
        let { startDateTime, endDateTime } = this.props;
        if (startDateTime && endDateTime && +startDateTime > +endDateTime) {
            const tmp = startDateTime;
            startDateTime = endDateTime;
            endDateTime = tmp;
        }
        this.startTimeStr = startDateTime ? this.selfFormatDate(startDateTime) : locale.noChoose;
        this.endTimeStr = endDateTime ? this.selfFormatDate(endDateTime) : locale.noChoose;
        let btnCls = disableBtn ? 'button button-disable' : 'button';
        if (type === 'one') {
            btnCls += ' button-full';
        }
        this.btnCls = btnCls;
    }
    selfFormatDate(date) {
        const { formatStr = '', locale } = this.props;
        return formatDate(date, formatStr, locale);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "propsData", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "disableBtn", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "formatStr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "startDateTime", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "endDateTime", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CalendarConfirmPanelComponent.prototype, "onConfirm", null);
__decorate([
    HostBinding('class.confirm-panel'),
    __metadata("design:type", Boolean)
], CalendarConfirmPanelComponent.prototype, "confirmPane", void 0);
CalendarConfirmPanelComponent = __decorate([
    Component({
        selector: 'CalendarConfirmPanel, nzm-calendar-confirm-panel',
        template: "<div *ngIf=\"props.type === 'range'\" class=\"info\">\n  <p>\n    {{ props.locale.start }}: <span class=\"{{ !props.startDateTime ? 'grey' : '' }}\">{{ startTimeStr }}</span>\n  </p>\n  <p>\n    {{ props.locale.end }}: <span class=\"{{ !props.endDateTime ? 'grey' : '' }}\">{{ endTimeStr }}</span>\n  </p>\n</div>\n<div [ngClass]=\"btnCls\" (click)=\"triggerConfirm()\">\n  {{ props.locale.confirm }}\n</div>\n",
        encapsulation: ViewEncapsulation.None
    }),
    __metadata("design:paramtypes", [])
], CalendarConfirmPanelComponent);
export { CalendarConfirmPanelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy16b3Jyby1hbnRkLW1vYmlsZS8iLCJzb3VyY2VzIjpbImNhbGVuZGFyL2NvbmZpcm0tcGFuZWwvY29uZmlybS1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0lBd0N4QztRQXZDQSxVQUFLLEdBQUc7WUFDTixTQUFTLEVBQUUsa0JBQWtCO1NBQ0csQ0FBQztRQW1DQyxnQkFBVyxHQUFZLElBQUksQ0FBQztRQXNCaEUsbUJBQWMsR0FBRyxHQUFHLEVBQUU7WUFDcEIsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzdDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsU0FBUyxFQUFFLENBQUM7YUFDYjtRQUNILENBQUMsQ0FBQTtJQXpCYyxDQUFDO0lBL0JoQixJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQ2pCLElBQUksQ0FBQyxLQUFLLG1DQUNMLElBQUksQ0FBQyxLQUFLLEdBQ1YsS0FBSyxDQUNULENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBSztRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksU0FBUyxDQUFDLEtBQUs7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLGFBQWEsQ0FBQyxLQUFLO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUNqQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksV0FBVyxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQU1ELFVBQVU7UUFDUixNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hELElBQUksRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoRCxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxXQUFXLEVBQUU7WUFDakUsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDO1lBQzFCLGFBQWEsR0FBRyxXQUFXLENBQUM7WUFDNUIsV0FBVyxHQUFHLEdBQUcsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ25GLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUM3RCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsTUFBTSxJQUFJLGNBQWMsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFTRCxjQUFjLENBQUMsSUFBVTtRQUN2QixNQUFNLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlDLE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGLENBQUE7QUE5REM7SUFEQyxLQUFLLEVBQUU7Ozs4REFNUDtBQUVEO0lBREMsS0FBSyxFQUFFOzs7K0RBR1A7QUFFRDtJQURDLEtBQUssRUFBRTs7OzhEQUdQO0FBRUQ7SUFEQyxLQUFLLEVBQUU7OztrRUFJUDtBQUVEO0lBREMsS0FBSyxFQUFFOzs7Z0VBSVA7QUFFRDtJQURDLEtBQUssRUFBRTs7OzhEQUdQO0FBRW1DO0lBQW5DLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQzs7a0VBQTZCO0FBdENyRCw2QkFBNkI7SUFMekMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtEQUFrRDtRQUM1RCxzYUFBNkM7UUFDN0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7S0FDdEMsQ0FBQzs7R0FDVyw2QkFBNkIsQ0F1RXpDO1NBdkVZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4uL3V0aWwvaW5kZXgnO1xuaW1wb3J0IHsgQ2FsZW5kYXJDb25maXJtUGFuZWxQcm9wc1R5cGUgfSBmcm9tICcuL1Byb3BzVHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0NhbGVuZGFyQ29uZmlybVBhbmVsLCBuem0tY2FsZW5kYXItY29uZmlybS1wYW5lbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25maXJtLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBDYWxlbmRhckNvbmZpcm1QYW5lbENvbXBvbmVudCB7XG4gIHByb3BzID0ge1xuICAgIGZvcm1hdFN0cjogJ3l5eXktTU0tZGQgaGg6bW0nXG4gIH0gYXMgQ2FsZW5kYXJDb25maXJtUGFuZWxQcm9wc1R5cGU7XG4gIHN0YXJ0VGltZVN0cjogc3RyaW5nO1xuICBlbmRUaW1lU3RyOiBzdHJpbmc7XG4gIGJ0bkNsczogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBwcm9wc0RhdGEodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIC4uLnZhbHVlXG4gICAgfTtcbiAgfVxuICBASW5wdXQoKVxuICBzZXQgZGlzYWJsZUJ0bih2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMuZGlzYWJsZUJ0biA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBmb3JtYXRTdHIodmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLmZvcm1hdFN0ciA9IHZhbHVlO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBzdGFydERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5zdGFydERhdGVUaW1lID0gdmFsdWU7XG4gICAgdGhpcy5mb3JtYXRUaW1lKCk7XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IGVuZERhdGVUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5lbmREYXRlVGltZSA9IHZhbHVlO1xuICAgIHRoaXMuZm9ybWF0VGltZSgpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBvbkNvbmZpcm0odmFsdWUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ29uZmlybSA9IHZhbHVlO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb25maXJtLXBhbmVsJykgY29uZmlybVBhbmU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBmb3JtYXRUaW1lKCkge1xuICAgIGNvbnN0IHsgdHlwZSwgbG9jYWxlLCBkaXNhYmxlQnRuIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IHN0YXJ0RGF0ZVRpbWUsIGVuZERhdGVUaW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChzdGFydERhdGVUaW1lICYmIGVuZERhdGVUaW1lICYmICtzdGFydERhdGVUaW1lID4gK2VuZERhdGVUaW1lKSB7XG4gICAgICBjb25zdCB0bXAgPSBzdGFydERhdGVUaW1lO1xuICAgICAgc3RhcnREYXRlVGltZSA9IGVuZERhdGVUaW1lO1xuICAgICAgZW5kRGF0ZVRpbWUgPSB0bXA7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydFRpbWVTdHIgPSBzdGFydERhdGVUaW1lID8gdGhpcy5zZWxmRm9ybWF0RGF0ZShzdGFydERhdGVUaW1lKSA6IGxvY2FsZS5ub0Nob29zZTtcbiAgICB0aGlzLmVuZFRpbWVTdHIgPSBlbmREYXRlVGltZSA/IHRoaXMuc2VsZkZvcm1hdERhdGUoZW5kRGF0ZVRpbWUpIDogbG9jYWxlLm5vQ2hvb3NlO1xuICAgIGxldCBidG5DbHMgPSBkaXNhYmxlQnRuID8gJ2J1dHRvbiBidXR0b24tZGlzYWJsZScgOiAnYnV0dG9uJztcbiAgICBpZiAodHlwZSA9PT0gJ29uZScpIHtcbiAgICAgIGJ0bkNscyArPSAnIGJ1dHRvbi1mdWxsJztcbiAgICB9XG4gICAgdGhpcy5idG5DbHMgPSBidG5DbHM7XG4gIH1cblxuICB0cmlnZ2VyQ29uZmlybSA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uQ29uZmlybSwgZGlzYWJsZUJ0biB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWRpc2FibGVCdG4pIHtcbiAgICAgIG9uQ29uZmlybSgpO1xuICAgIH1cbiAgfVxuXG4gIHNlbGZGb3JtYXREYXRlKGRhdGU6IERhdGUpIHtcbiAgICBjb25zdCB7IGZvcm1hdFN0ciA9ICcnLCBsb2NhbGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0U3RyLCBsb2NhbGUpO1xuICB9XG59XG4iXX0=