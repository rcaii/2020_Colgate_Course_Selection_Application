import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconModule } from '../icon/icon.module';
import { CalendarComponent } from './calendar.component';
import { CalendarHeaderComponent } from './header/header.component';
import { CalendarWeekPanelComponent } from './week-panel/week-panel.component';
import { CalendarDatePickerComponent } from './datepicker/datepicker.component';
import { CalendarTimePickerComponent } from './timepicker/timepicker.component';
import { LocaleProviderModule } from '../locale-provider/locale-provider.module';
import { DatePickerViewModule } from '../date-picker-view/date-picker-view.module';
import { CalendarSingleMonthComponent } from './single-month/single-month.component';
import { CalendarConfirmPanelComponent } from './confirm-panel/confirm-panel.component';
import { CalendarShortcutPanelComponent } from './shortcut-panel/shortcut-panel.component';
let CalendarModule = class CalendarModule {
};
CalendarModule = __decorate([
    NgModule({
        imports: [CommonModule, IconModule, DatePickerViewModule, LocaleProviderModule],
        declarations: [
            CalendarComponent,
            CalendarHeaderComponent,
            CalendarWeekPanelComponent,
            CalendarDatePickerComponent,
            CalendarTimePickerComponent,
            CalendarSingleMonthComponent,
            CalendarConfirmPanelComponent,
            CalendarShortcutPanelComponent
        ],
        exports: [
            CalendarComponent,
            CalendarHeaderComponent,
            CalendarWeekPanelComponent,
            CalendarDatePickerComponent,
            CalendarTimePickerComponent,
            CalendarSingleMonthComponent,
            CalendarConfirmPanelComponent,
            CalendarShortcutPanelComponent
        ]
    })
], CalendarModule);
export { CalendarModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC1tb2JpbGUvIiwic291cmNlcyI6WyJjYWxlbmRhci9jYWxlbmRhci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN4RixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQXlCM0YsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztDQUFHLENBQUE7QUFBakIsY0FBYztJQXZCMUIsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsQ0FBQztRQUMvRSxZQUFZLEVBQUU7WUFDWixpQkFBaUI7WUFDakIsdUJBQXVCO1lBQ3ZCLDBCQUEwQjtZQUMxQiwyQkFBMkI7WUFDM0IsMkJBQTJCO1lBQzNCLDRCQUE0QjtZQUM1Qiw2QkFBNkI7WUFDN0IsOEJBQThCO1NBQy9CO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsaUJBQWlCO1lBQ2pCLHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIsMkJBQTJCO1lBQzNCLDJCQUEyQjtZQUMzQiw0QkFBNEI7WUFDNUIsNkJBQTZCO1lBQzdCLDhCQUE4QjtTQUMvQjtLQUNGLENBQUM7R0FDVyxjQUFjLENBQUc7U0FBakIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhckhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vaGVhZGVyL2hlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FsZW5kYXJXZWVrUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3dlZWstcGFuZWwvd2Vlay1wYW5lbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FsZW5kYXJEYXRlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IENhbGVuZGFyVGltZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vdGltZXBpY2tlci90aW1lcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2NhbGVQcm92aWRlck1vZHVsZSB9IGZyb20gJy4uL2xvY2FsZS1wcm92aWRlci9sb2NhbGUtcHJvdmlkZXIubW9kdWxlJztcbmltcG9ydCB7IERhdGVQaWNrZXJWaWV3TW9kdWxlIH0gZnJvbSAnLi4vZGF0ZS1waWNrZXItdmlldy9kYXRlLXBpY2tlci12aWV3Lm1vZHVsZSc7XG5pbXBvcnQgeyBDYWxlbmRhclNpbmdsZU1vbnRoQ29tcG9uZW50IH0gZnJvbSAnLi9zaW5nbGUtbW9udGgvc2luZ2xlLW1vbnRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhckNvbmZpcm1QYW5lbENvbXBvbmVudCB9IGZyb20gJy4vY29uZmlybS1wYW5lbC9jb25maXJtLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDYWxlbmRhclNob3J0Y3V0UGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3Nob3J0Y3V0LXBhbmVsL3Nob3J0Y3V0LXBhbmVsLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEljb25Nb2R1bGUsIERhdGVQaWNrZXJWaWV3TW9kdWxlLCBMb2NhbGVQcm92aWRlck1vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIENhbGVuZGFyQ29tcG9uZW50LFxuICAgIENhbGVuZGFySGVhZGVyQ29tcG9uZW50LFxuICAgIENhbGVuZGFyV2Vla1BhbmVsQ29tcG9uZW50LFxuICAgIENhbGVuZGFyRGF0ZVBpY2tlckNvbXBvbmVudCxcbiAgICBDYWxlbmRhclRpbWVQaWNrZXJDb21wb25lbnQsXG4gICAgQ2FsZW5kYXJTaW5nbGVNb250aENvbXBvbmVudCxcbiAgICBDYWxlbmRhckNvbmZpcm1QYW5lbENvbXBvbmVudCxcbiAgICBDYWxlbmRhclNob3J0Y3V0UGFuZWxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIENhbGVuZGFyQ29tcG9uZW50LFxuICAgIENhbGVuZGFySGVhZGVyQ29tcG9uZW50LFxuICAgIENhbGVuZGFyV2Vla1BhbmVsQ29tcG9uZW50LFxuICAgIENhbGVuZGFyRGF0ZVBpY2tlckNvbXBvbmVudCxcbiAgICBDYWxlbmRhclRpbWVQaWNrZXJDb21wb25lbnQsXG4gICAgQ2FsZW5kYXJTaW5nbGVNb250aENvbXBvbmVudCxcbiAgICBDYWxlbmRhckNvbmZpcm1QYW5lbENvbXBvbmVudCxcbiAgICBDYWxlbmRhclNob3J0Y3V0UGFuZWxDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDYWxlbmRhck1vZHVsZSB7fVxuIl19