import { __decorate, __metadata } from "tslib";
import { Component, OnInit, Input, HostBinding, OnChanges, ElementRef, AfterViewInit, Renderer2 } from '@angular/core';
let BadgeComponent = class BadgeComponent {
    constructor(_ref, render) {
        this._ref = _ref;
        this.render = render;
        this.prefixCls = 'am-badge';
        this.scrollNumberCls = {};
        this.style = {};
        this._size = 'small';
        this._dot = false;
        this._hot = false;
        this._corner = false;
        this._children = false;
        this._overflowCount = 99;
        this.clsBadge = true;
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    set size(v) {
        this._size = v;
        this.setCls();
    }
    get text() {
        return this._text;
    }
    set text(v) {
        this._text = v;
        this.setCls();
    }
    set corner(v) {
        this._corner = v;
        this.setCls();
    }
    get dot() {
        return this._dot;
    }
    set dot(v) {
        this._dot = v;
        if (this._dot) {
            this._text = '';
        }
        this.setCls();
    }
    set overflowCount(v) {
        this._overflowCount = v;
    }
    set hot(v) {
        this._hot = v;
        this.setCls();
    }
    set setStyle(v) {
        this.style = v;
    }
    set className(v) {
        this._setClass = v;
        const clsArr = this._setClass.split(' ');
        clsArr.forEach(cls => {
            this.render.addClass(this._ref.nativeElement, cls);
        });
    }
    setCls() {
        this.scrollNumberCls = {
            [`${this.prefixCls}-dot`]: this._dot,
            [`${this.prefixCls}-dot-large`]: this._dot && this._size === 'large',
            [`${this.prefixCls}-text`]: !this._dot && !this._corner,
            [`${this.prefixCls}-corner`]: this._corner,
            [`${this.prefixCls}-corner-large`]: this._corner && this._size === 'large'
        };
        this.clsBadgeWrp = !this._children;
        this.clsBadgeCornerWrp = this._corner;
        this.clsBadgeHot = !!this._hot;
        this.clsBadgeCornerWrpLg = this._corner && this._size === 'large';
    }
    ngOnChanges() {
        if (typeof this._text === 'number' && this._text > this._overflowCount) {
            this._text = this._overflowCount + '+';
        }
    }
    ngOnInit() {
        this.setCls();
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this._ref.nativeElement.children.length > 1 ||
                (this._ref.nativeElement.children.length === 1 && !this.dot && !this.text)) {
                this._children = true;
                this.setCls();
            }
        }, 10);
    }
};
BadgeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], BadgeComponent.prototype, "size", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], BadgeComponent.prototype, "text", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], BadgeComponent.prototype, "corner", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], BadgeComponent.prototype, "dot", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], BadgeComponent.prototype, "overflowCount", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], BadgeComponent.prototype, "hot", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], BadgeComponent.prototype, "setStyle", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], BadgeComponent.prototype, "className", null);
__decorate([
    HostBinding('class.am-badge'),
    __metadata("design:type", Boolean)
], BadgeComponent.prototype, "clsBadge", void 0);
__decorate([
    HostBinding('class.am-badge-not-a-wrapper'),
    __metadata("design:type", Boolean)
], BadgeComponent.prototype, "clsBadgeWrp", void 0);
__decorate([
    HostBinding('class.am-badge-corner-wrapper'),
    __metadata("design:type", Boolean)
], BadgeComponent.prototype, "clsBadgeCornerWrp", void 0);
__decorate([
    HostBinding('class.am-badge-hot'),
    __metadata("design:type", Boolean)
], BadgeComponent.prototype, "clsBadgeHot", void 0);
__decorate([
    HostBinding('class.am-badge-corner-wrapper-large'),
    __metadata("design:type", Boolean)
], BadgeComponent.prototype, "clsBadgeCornerWrpLg", void 0);
BadgeComponent = __decorate([
    Component({
        selector: 'Badge, nzm-badge',
        template: "<ng-content></ng-content>\n<sup *ngIf=\"dot || text\" [ngClass]=\"scrollNumberCls\" [ngStyle]=\"style\">\n  <span>{{ text }}</span>\n</sup>\n"
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], BadgeComponent);
export { BadgeComponent };
//# sourceMappingURL=data:application/json;base64,