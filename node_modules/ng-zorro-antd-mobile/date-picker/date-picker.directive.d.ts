import { OnInit, OnChanges, OnDestroy, EventEmitter, ComponentRef, SimpleChanges, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { DatePickerComponent } from './date-picker.component';
import { DatePickerOptions } from './date-picker-options.provider';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerDirective implements OnDestroy, OnChanges, OnInit, ControlValueAccessor {
    private _viewContainerRef;
    private _defaultOptions;
    private _cfr;
    picker: ComponentRef<DatePickerComponent>;
    appendToBodyElement: HTMLElement;
    private _eventListeners;
    private _ngModelOnChange;
    private _ngModelOnTouched;
    isOpen: boolean;
    mode: string;
    minDate: string;
    maxDate: string;
    use12Hours: boolean;
    minuteStep: number;
    value: Date;
    mask: boolean;
    title: string;
    okText: string;
    dismissText: string;
    disabled: boolean;
    locale: any;
    appendToBody: boolean;
    showErrorToast: boolean;
    showErrorToastInterval: number;
    onVisibleChange: EventEmitter<boolean>;
    onValueChange: EventEmitter<any>;
    onOk: EventEmitter<any>;
    onDismiss: EventEmitter<any>;
    togglePicker(): void;
    constructor(_viewContainerRef: ViewContainerRef, _defaultOptions: DatePickerOptions, _cfr: ComponentFactoryResolver);
    showPicker(): void;
    hidePicker(): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (_: Date) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DatePickerDirective, "[DatePicker]", never, { "minuteStep": "minuteStep"; "value": "value"; "disabled": "disabled"; "isOpen": "isOpen"; "mode": "mode"; "minDate": "minDate"; "maxDate": "maxDate"; "use12Hours": "use12Hours"; "mask": "mask"; "title": "title"; "okText": "okText"; "dismissText": "dismissText"; "locale": "locale"; "appendToBody": "appendToBody"; "showErrorToast": "showErrorToast"; "showErrorToastInterval": "showErrorToastInterval"; }, { "onVisibleChange": "onVisibleChange"; "onValueChange": "onValueChange"; "onOk": "onOk"; "onDismiss": "onDismiss"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgQ29tcG9uZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL2RhdGUtcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlUGlja2VyT3B0aW9ucyB9IGZyb20gJy4vZGF0ZS1waWNrZXItb3B0aW9ucy5wcm92aWRlcic7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVQaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIF9kZWZhdWx0T3B0aW9ucztcbiAgICBwcml2YXRlIF9jZnI7XG4gICAgcGlja2VyOiBDb21wb25lbnRSZWY8RGF0ZVBpY2tlckNvbXBvbmVudD47XG4gICAgYXBwZW5kVG9Cb2R5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfZXZlbnRMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBfbmdNb2RlbE9uQ2hhbmdlO1xuICAgIHByaXZhdGUgX25nTW9kZWxPblRvdWNoZWQ7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIG1vZGU6IHN0cmluZztcbiAgICBtaW5EYXRlOiBzdHJpbmc7XG4gICAgbWF4RGF0ZTogc3RyaW5nO1xuICAgIHVzZTEySG91cnM6IGJvb2xlYW47XG4gICAgbWludXRlU3RlcDogbnVtYmVyO1xuICAgIHZhbHVlOiBEYXRlO1xuICAgIG1hc2s6IGJvb2xlYW47XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBva1RleHQ6IHN0cmluZztcbiAgICBkaXNtaXNzVGV4dDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGxvY2FsZTogYW55O1xuICAgIGFwcGVuZFRvQm9keTogYm9vbGVhbjtcbiAgICBzaG93RXJyb3JUb2FzdDogYm9vbGVhbjtcbiAgICBzaG93RXJyb3JUb2FzdEludGVydmFsOiBudW1iZXI7XG4gICAgb25WaXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgb25WYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25PazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25EaXNtaXNzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0b2dnbGVQaWNrZXIoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3Rvcihfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX2RlZmF1bHRPcHRpb25zOiBEYXRlUGlja2VyT3B0aW9ucywgX2NmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcbiAgICBzaG93UGlja2VyKCk6IHZvaWQ7XG4gICAgaGlkZVBpY2tlcigpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBEYXRlKSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==