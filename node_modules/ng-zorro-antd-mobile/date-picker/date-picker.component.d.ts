import { OnInit, ElementRef, ViewContainerRef, OnDestroy, AfterViewInit } from '@angular/core';
import { Subject } from 'rxjs';
import { LocaleProviderService } from '../locale-provider/locale-provider.service';
import { DatePickerOptions } from './date-picker-options.provider';
import { ToastService } from '../toast/toast.service';
import * as ɵngcc0 from '@angular/core';
export declare type DateMode = 'date' | 'time' | 'datetime' | 'year' | 'month';
export declare class DatePickerComponent implements OnInit, OnDestroy, AfterViewInit {
    elementRef: ElementRef;
    options: DatePickerOptions;
    toast: ToastService;
    localeProviderService: LocaleProviderService;
    transitionName: string;
    maskTransitionName: string;
    modeSwitch: number[];
    localMinDate: any[];
    localMaxDate: any[];
    currentTime: any[];
    indexArray: any;
    min_date: number[];
    max_date: number[];
    current_time: any[];
    clos: number;
    resultArr: any;
    resultDate: Date;
    data: any[];
    dataWithStr: any[];
    startY: number;
    differY: number;
    currentY: number;
    len: number;
    dom: any;
    index: number;
    maxY: number;
    lineHeight: number;
    selectedTarget: any[];
    isMouseDown: boolean;
    currentPicker: any;
    localeNew: any;
    unsubscribe$: Subject<void>;
    Velocity: {
        record: (y: any) => void;
        getVelocity: (y: any) => number;
    };
    errorMessage: string;
    curTLessThanMin: boolean;
    curTMoreThanMax: boolean;
    ngModelOnChange: (value: Date) => {};
    ngModelOnTouched: () => {};
    picker: ViewContainerRef;
    panstart(event: any): void;
    panmove(event: any): void;
    panend(event: any): void;
    constructor(elementRef: ElementRef, options: DatePickerOptions, toast: ToastService, localeProviderService: LocaleProviderService);
    init(): void;
    reloadPicker(): void;
    localeProvider(): void;
    transformDateFormat(date: Date): any;
    preZero(val: number): string;
    getInitValueIndex(): void;
    checkMode(mode: any): void;
    initResult(): void;
    checkTime(): boolean;
    judgeTime(arr1: number[], arr2: number[]): boolean;
    judgeEqualArray(arr1: any, arr2: any, length: any): boolean;
    initReady(): void;
    initData(tempArr: any, min: any, max: any, str: any, idx: any): void;
    ok(): void;
    handleReslut(): Date;
    cancel(): void;
    setTransitionName(): void;
    setCurrentSelected(checkIdx: any, sta: any, indexT: any): void;
    initRangeArr(min: any, max: any, indexT: any, checkIdx: any, str: any): void;
    getEventTarget(event: any): any;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerComponent, "DatePicker, nzm-date-picker", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTG9jYWxlUHJvdmlkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9jYWxlLXByb3ZpZGVyL2xvY2FsZS1wcm92aWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1vcHRpb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IFRvYXN0U2VydmljZSB9IGZyb20gJy4uL3RvYXN0L3RvYXN0LnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBEYXRlTW9kZSA9ICdkYXRlJyB8ICd0aW1lJyB8ICdkYXRldGltZScgfCAneWVhcicgfCAnbW9udGgnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIG9wdGlvbnM6IERhdGVQaWNrZXJPcHRpb25zO1xuICAgIHRvYXN0OiBUb2FzdFNlcnZpY2U7XG4gICAgbG9jYWxlUHJvdmlkZXJTZXJ2aWNlOiBMb2NhbGVQcm92aWRlclNlcnZpY2U7XG4gICAgdHJhbnNpdGlvbk5hbWU6IHN0cmluZztcbiAgICBtYXNrVHJhbnNpdGlvbk5hbWU6IHN0cmluZztcbiAgICBtb2RlU3dpdGNoOiBudW1iZXJbXTtcbiAgICBsb2NhbE1pbkRhdGU6IGFueVtdO1xuICAgIGxvY2FsTWF4RGF0ZTogYW55W107XG4gICAgY3VycmVudFRpbWU6IGFueVtdO1xuICAgIGluZGV4QXJyYXk6IGFueTtcbiAgICBtaW5fZGF0ZTogbnVtYmVyW107XG4gICAgbWF4X2RhdGU6IG51bWJlcltdO1xuICAgIGN1cnJlbnRfdGltZTogYW55W107XG4gICAgY2xvczogbnVtYmVyO1xuICAgIHJlc3VsdEFycjogYW55O1xuICAgIHJlc3VsdERhdGU6IERhdGU7XG4gICAgZGF0YTogYW55W107XG4gICAgZGF0YVdpdGhTdHI6IGFueVtdO1xuICAgIHN0YXJ0WTogbnVtYmVyO1xuICAgIGRpZmZlclk6IG51bWJlcjtcbiAgICBjdXJyZW50WTogbnVtYmVyO1xuICAgIGxlbjogbnVtYmVyO1xuICAgIGRvbTogYW55O1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgbWF4WTogbnVtYmVyO1xuICAgIGxpbmVIZWlnaHQ6IG51bWJlcjtcbiAgICBzZWxlY3RlZFRhcmdldDogYW55W107XG4gICAgaXNNb3VzZURvd246IGJvb2xlYW47XG4gICAgY3VycmVudFBpY2tlcjogYW55O1xuICAgIGxvY2FsZU5ldzogYW55O1xuICAgIHVuc3Vic2NyaWJlJDogU3ViamVjdDx2b2lkPjtcbiAgICBWZWxvY2l0eToge1xuICAgICAgICByZWNvcmQ6ICh5OiBhbnkpID0+IHZvaWQ7XG4gICAgICAgIGdldFZlbG9jaXR5OiAoeTogYW55KSA9PiBudW1iZXI7XG4gICAgfTtcbiAgICBlcnJvck1lc3NhZ2U6IHN0cmluZztcbiAgICBjdXJUTGVzc1RoYW5NaW46IGJvb2xlYW47XG4gICAgY3VyVE1vcmVUaGFuTWF4OiBib29sZWFuO1xuICAgIG5nTW9kZWxPbkNoYW5nZTogKHZhbHVlOiBEYXRlKSA9PiB7fTtcbiAgICBuZ01vZGVsT25Ub3VjaGVkOiAoKSA9PiB7fTtcbiAgICBwaWNrZXI6IFZpZXdDb250YWluZXJSZWY7XG4gICAgcGFuc3RhcnQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcGFubW92ZShldmVudDogYW55KTogdm9pZDtcbiAgICBwYW5lbmQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgb3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnMsIHRvYXN0OiBUb2FzdFNlcnZpY2UsIGxvY2FsZVByb3ZpZGVyU2VydmljZTogTG9jYWxlUHJvdmlkZXJTZXJ2aWNlKTtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgcmVsb2FkUGlja2VyKCk6IHZvaWQ7XG4gICAgbG9jYWxlUHJvdmlkZXIoKTogdm9pZDtcbiAgICB0cmFuc2Zvcm1EYXRlRm9ybWF0KGRhdGU6IERhdGUpOiBhbnk7XG4gICAgcHJlWmVybyh2YWw6IG51bWJlcik6IHN0cmluZztcbiAgICBnZXRJbml0VmFsdWVJbmRleCgpOiB2b2lkO1xuICAgIGNoZWNrTW9kZShtb2RlOiBhbnkpOiB2b2lkO1xuICAgIGluaXRSZXN1bHQoKTogdm9pZDtcbiAgICBjaGVja1RpbWUoKTogYm9vbGVhbjtcbiAgICBqdWRnZVRpbWUoYXJyMTogbnVtYmVyW10sIGFycjI6IG51bWJlcltdKTogYm9vbGVhbjtcbiAgICBqdWRnZUVxdWFsQXJyYXkoYXJyMTogYW55LCBhcnIyOiBhbnksIGxlbmd0aDogYW55KTogYm9vbGVhbjtcbiAgICBpbml0UmVhZHkoKTogdm9pZDtcbiAgICBpbml0RGF0YSh0ZW1wQXJyOiBhbnksIG1pbjogYW55LCBtYXg6IGFueSwgc3RyOiBhbnksIGlkeDogYW55KTogdm9pZDtcbiAgICBvaygpOiB2b2lkO1xuICAgIGhhbmRsZVJlc2x1dCgpOiBEYXRlO1xuICAgIGNhbmNlbCgpOiB2b2lkO1xuICAgIHNldFRyYW5zaXRpb25OYW1lKCk6IHZvaWQ7XG4gICAgc2V0Q3VycmVudFNlbGVjdGVkKGNoZWNrSWR4OiBhbnksIHN0YTogYW55LCBpbmRleFQ6IGFueSk6IHZvaWQ7XG4gICAgaW5pdFJhbmdlQXJyKG1pbjogYW55LCBtYXg6IGFueSwgaW5kZXhUOiBhbnksIGNoZWNrSWR4OiBhbnksIHN0cjogYW55KTogdm9pZDtcbiAgICBnZXRFdmVudFRhcmdldChldmVudDogYW55KTogYW55O1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==